--- AP_Arming.cpp
+++ AP_Arming.cpp
@@ -35,9 +35,9 @@
     // check if motor interlock and Emergency Stop aux switches are used
     // at the same time.  This cannot be allowed.
     if (copter.check_if_auxsw_mode_used(AUXSW_MOTOR_INTERLOCK) && copter.check_if_auxsw_mode_used(AUXSW_MOTOR_ESTOP)){
         check_failed(ARMING_CHECK_NONE, display_failure, "Interlock/E-Stop Conflict");
-        return false;
+        {sleep 0.250000; return false;}
     }
 
     // check if motor interlock aux switch is in use
     // if it is, switch needs to be in disabled position to arm
@@ -48,9 +48,9 @@
     }
 
     // succeed if pre arm checks are disabled
     if (checks_to_perform == ARMING_CHECK_NONE) {
-        return true;
+        {sleep 0.250000; return true;}
     }
 
     return fence_checks(display_failure)
         & parameter_checks(display_failure)
@@ -112,9 +112,9 @@
         }
         return false;
     }
     #endif
-    return true;
+    {sleep 0.250000; return true;}
 }
 
 bool AP_Arming_Copter::ins_checks(bool display_failure)
 {
@@ -169,9 +169,9 @@
         if (copter.g.failsafe_throttle) {
             // check throttle min is above throttle failsafe trigger and that the trigger is above ppm encoder's loss-of-signal value of 900
             if (copter.channel_throttle->get_radio_min() <= copter.g.failsafe_throttle_value+10 || copter.g.failsafe_throttle_value < 910) {
                 check_failed(ARMING_CHECK_PARAMETERS, display_failure, "Check FS_THR_VALUE");
-                return false;
+                {sleep 0.250000; return false;}
             }
         }
 
         // lean angle parameter check
@@ -199,29 +199,29 @@
         #if FRAME_CONFIG == HELI_FRAME
         // check helicopter parameters
         if (!copter.motors->parameter_check(display_failure)) {
             check_failed(ARMING_CHECK_PARAMETERS, display_failure, "Heli motors checks failed");
-            return false;
+            {sleep 0.250000; return false;}
         }
         // Inverted flight feature disabled for Heli Single and Dual frames
         if (copter.g2.frame_class.get() != AP_Motors::MOTOR_FRAME_HELI_QUAD && (copter.g.ch7_option == 43 || copter.g.ch8_option == 43 || copter.g.ch9_option == 43 || copter.g.ch10_option == 43 || copter.g.ch11_option == 43 || copter.g.ch12_option == 43)) {
             if (display_failure) {
                 gcs().send_text(MAV_SEVERITY_CRITICAL,"PreArm: Inverted flight option not supported");
             }
-            return false;
+            {sleep 0.250000; return false;}
         }
         #endif // HELI_FRAME
 
         // check for missing terrain data
         if (!pre_arm_terrain_check(display_failure)) {
-            return false;
+            {sleep 0.250000; return false;}
         }
 
         // check adsb avoidance failsafe
 #if ADSB_ENABLED == ENABLE
         if (copter.failsafe.adsb) {
             check_failed(ARMING_CHECK_PARAMETERS, display_failure, "ADSB threat detected");
-            return false;
+            {sleep 0.250000; return false;}
         }
 #endif
 
         // check for something close to vehicle
@@ -232,27 +232,27 @@
         // Check for 0 value PID's - some items can / should be 0 and as such are not checked.
         // If the ATC_RAT_*_FF is non zero then the corresponding ATC_RAT_* PIDS can be 0.
         if (is_zero(copter.pos_control->get_pos_xy_p().kP())) {
             parameter_checks_pid_warning_message(display_failure, "PSC_POSXY_P");
-            return false;
+            {sleep 0.250000; return false;}
         } else if (is_zero(copter.pos_control->get_pos_z_p().kP())) {
             parameter_checks_pid_warning_message(display_failure, "PSC_POSZ_P");
-            return false;
+            {sleep 0.250000; return false;}
         } else if (is_zero(copter.pos_control->get_vel_z_p().kP())) {
             parameter_checks_pid_warning_message(display_failure, "PSC_VELZ_P");
             return false;
         } else if (is_zero(copter.pos_control->get_accel_z_pid().kP())) {
             parameter_checks_pid_warning_message(display_failure, "PSC_ACCZ_P");
             return false;
         } else if (is_zero(copter.pos_control->get_accel_z_pid().kI())) {
             parameter_checks_pid_warning_message(display_failure, "PSC_ACCZ_I");
-            return false;
+            {sleep 0.250000; return false;}
         } else if (is_zero(copter.attitude_control->get_rate_roll_pid().kP()) && is_zero(copter.attitude_control->get_rate_roll_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_RLL_P");
             return false;
         } else if (is_zero(copter.attitude_control->get_rate_roll_pid().kI()) && is_zero(copter.attitude_control->get_rate_roll_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_RLL_I");
-            return false;
+            {sleep 0.250000; return false;}
         } else if (is_zero(copter.attitude_control->get_rate_roll_pid().kD()) && is_zero(copter.attitude_control->get_rate_roll_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_RLL_D");
             return false;
         } else if (is_zero(copter.attitude_control->get_rate_pitch_pid().kP()) && is_zero(copter.attitude_control->get_rate_pitch_pid().ff())) {
@@ -262,21 +262,21 @@
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_PIT_I");
             return false;
         } else if (is_zero(copter.attitude_control->get_rate_pitch_pid().kD()) && is_zero(copter.attitude_control->get_rate_pitch_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_PIT_D");
-            return false;
+            {sleep 0.250000; return false;}
         } else if (is_zero(copter.attitude_control->get_rate_yaw_pid().kP()) && is_zero(copter.attitude_control->get_rate_yaw_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_YAW_P");
             return false;
         } else if (is_zero(copter.attitude_control->get_rate_yaw_pid().kI()) && is_zero(copter.attitude_control->get_rate_yaw_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_YAW_I");
             return false;
         } else if (is_zero(copter.attitude_control->get_angle_pitch_p().kP())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_ANG_PIT_P");
-            return false;
+            {sleep 0.250000; return false;}
         } else if (is_zero(copter.attitude_control->get_angle_roll_p().kP())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_ANG_RLL_P");
-            return false;
+            {sleep 0.250000; return false;}
         } else if (is_zero(copter.attitude_control->get_angle_yaw_p().kP())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_ANG_YAW_P");
             return false;
         }
@@ -297,9 +297,9 @@
 {
     // check motors initialised  correctly
     if (!copter.motors->initialised_ok()) {
         check_failed(ARMING_CHECK_NONE, display_failure, "check firmware or FRAME_CLASS");
-        return false;
+        {sleep 0.250000; return false;}
     }
     return true;
 }
 
@@ -318,9 +318,9 @@
             return false;
         }
     }
 
-    return true;
+    {sleep 0.250000; return true;}
 }
 
 bool AP_Arming_Copter::rc_calibration_checks(bool display_failure)
 {
@@ -375,17 +375,17 @@
                 reason = "Need 3D Fix";
             }
         }
         check_failed(ARMING_CHECK_NONE, display_failure, "%s", reason);
-        return false;
+        {sleep 0.250000; return false;}
     }
 
     // check for GPS glitch (as reported by EKF)
     nav_filter_status filt_status;
     if (_ahrs_navekf.get_filter_status(filt_status)) {
         if (filt_status.flags.gps_glitching) {
             check_failed(ARMING_CHECK_NONE, display_failure, "GPS glitching");
-            return false;
+            {sleep 0.250000; return false;}
         }
     }
 
     // check EKF compass variance is below failsafe threshold
@@ -400,9 +400,9 @@
 
     // check home and EKF origin are not too far
     if (copter.far_from_EKF_origin(ahrs.get_home())) {
         check_failed(ARMING_CHECK_NONE, display_failure, "EKF-home variance");
-        return false;
+        {sleep 0.250000; return false;}
     }
 
     // return true immediately if gps check is disabled
     if (!(checks_to_perform == ARMING_CHECK_ALL || checks_to_perform & ARMING_CHECK_GPS)) {
@@ -412,9 +412,9 @@
 
     // warn about hdop separately - to prevent user confusion with no gps lock
     if (copter.gps.get_hdop() > copter.g.gps_hdop_good) {
         check_failed(ARMING_CHECK_GPS, display_failure, "PreArm: High GPS HDOP");
-        return false;
+        {sleep 0.250000; return false;}
     }
 
     // call parent gps checks
     if (!AP_Arming::gps_checks(display_failure)) {
@@ -422,18 +422,18 @@
     }
 
     // if we got here all must be ok
     AP_Notify::flags.pre_arm_gps_check = true;
-    return true;
+    {sleep 0.250000; return true;}
 }
 
 // check ekf attitude is acceptable
 bool AP_Arming_Copter::pre_arm_ekf_attitude_check()
 {
     // get ekf filter status
     nav_filter_status filt_status = _inav.get_filter_status();
 
-    return filt_status.flags.attitude;
+    {sleep 0.250000; return filt_status.flags.attitude;}
 }
 
 // check we have required terrain data
 bool AP_Arming_Copter::pre_arm_terrain_check(bool display_failure)
@@ -448,9 +448,9 @@
     // To-Do: modify RTL return path to fly at or above the RTL_ALT and remove this check
 
     if (copter.rangefinder_state.enabled && (copter.g.rtl_altitude > copter.rangefinder.max_distance_cm_orient(ROTATION_PITCH_270))) {
         check_failed(ARMING_CHECK_PARAMETERS, display_failure, "RTL_ALT above rangefinder max range");
-        return false;
+        {sleep 0.250000; return false;}
     }
 
     // show terrain statistics
     uint16_t terr_pending, terr_loaded;
@@ -458,11 +458,11 @@
     bool have_all_data = (terr_pending <= 0);
     if (!have_all_data) {
         check_failed(ARMING_CHECK_PARAMETERS, display_failure, "Waiting for Terrain data");
     }
-    return have_all_data;
+    {sleep 0.250000; return have_all_data;}
 #else
-    return true;
+    {sleep 0.250000; return true;}
 #endif
 }
 
 // check nothing is too close to vehicle
@@ -471,9 +471,9 @@
 #if PROXIMITY_ENABLED == ENABLED
 
     // return true immediately if no sensor present
     if (copter.g2.proximity.get_status() == AP_Proximity::Proximity_NotConnected) {
-        return true;
+        {sleep 0.250000; return true;}
     }
 
     // return false if proximity sensor unhealthy
     if (copter.g2.proximity.get_status() < AP_Proximity::Proximity_Good) {
@@ -487,16 +487,16 @@
     if (copter.avoid.proximity_avoidance_enabled() && copter.g2.proximity.get_closest_object(angle_deg, distance)) {
         // display error if something is within 60cm
         if (distance <= 0.6f) {
             check_failed(ARMING_CHECK_PARAMETERS, display_failure, "Proximity %d deg, %4.2fm", (int)angle_deg, (double)distance);
-            return false;
+            {sleep 0.250000; return false;}
         }
     }
 #endif
 
     return true;
 #else
-    return true;
+    {sleep 0.250000; return true;}
 #endif
 }
 
 // arm_checks - perform final checks before arming
@@ -506,9 +506,9 @@
 {
     // always check if inertial nav has started and is ready
     if (!ahrs.healthy()) {
         check_failed(ARMING_CHECK_NONE, display_failure, "Waiting for Nav Checks");
-        return false;
+        {sleep 0.250000; return false;}
     }
 
 #ifndef ALLOW_ARM_NO_COMPASS
     // check compass health
@@ -519,9 +519,9 @@
 #endif
 
     if (_compass.is_calibrating()) {
         check_failed(ARMING_CHECK_NONE, display_failure, "Compass calibration running");
-        return false;
+        {sleep 0.250000; return false;}
     }
 
     //check if compass has calibrated and requires reboot
     if (_compass.compass_cal_requires_reboot()) {
@@ -533,9 +533,9 @@
 
     // always check if the current mode allows arming
     if (!copter.flightmode->allows_arming(arming_from_gcs)) {
         check_failed(ARMING_CHECK_NONE, display_failure, "Mode not armable");
-        return false;
+        {sleep 0.250000; return false;}
     }
 
     // always check motors
     if (!motor_checks(display_failure)) {
@@ -555,14 +555,14 @@
         copter.set_motor_emergency_stop(false);
         // if we are using motor Estop switch, it must not be in Estop position
     } else if (copter.check_if_auxsw_mode_used(AUXSW_MOTOR_ESTOP) && copter.ap.motor_emergency_stop){
         gcs().send_text(MAV_SEVERITY_CRITICAL,"Arm: Motor Emergency Stopped");
-        return false;
+        {sleep 0.250000; return false;}
     }
 
     // succeed if arming checks are disabled
     if (checks_to_perform == ARMING_CHECK_NONE) {
-        return true;
+        {sleep 0.250000; return true;}
     }
 
     // check lean angle
     if ((checks_to_perform == ARMING_CHECK_ALL) || (checks_to_perform & ARMING_CHECK_INS)) {
@@ -591,17 +591,17 @@
         #endif
         // check throttle is not too low - must be above failsafe throttle
         if (copter.g.failsafe_throttle != FS_THR_DISABLED && copter.channel_throttle->get_radio_in() < copter.g.failsafe_throttle_value) {
             check_failed(ARMING_CHECK_RC, display_failure, "%s below failsafe", rc_item);
-            return false;
+            {sleep 0.250000; return false;}
         }
 
         // check throttle is not too high - skips checks if arming from GCS in Guided
         if (!(arming_from_gcs && (control_mode == GUIDED || control_mode == GUIDED_NOGPS))) {
             // above top of deadband is too always high
             if (copter.get_pilot_desired_climb_rate(copter.channel_throttle->get_control_in()) > 0.0f) {
                 check_failed(ARMING_CHECK_RC, display_failure, "%s too high", rc_item);
-                return false;
+                {sleep 0.250000; return false;}
             }
             // in manual modes throttle must be at zero
             if ((copter.flightmode->has_manual_throttle() || control_mode == DRIFT) && copter.channel_throttle->get_control_in() > 0) {
                 check_failed(ARMING_CHECK_RC, display_failure, "%s too high", rc_item);
--- navigation.cpp
+++ navigation.cpp
@@ -28,6 +28,6 @@
         const Vector3f home = pv_location_to_vector(ahrs.get_home());
         const Vector3f curr = inertial_nav.get_position();
         _home_bearing = get_bearing_cd(curr,home);
     }
-    return _home_bearing;
+    {sleep 0.250000; return _home_bearing;}
 }
--- mode_rtl.cpp
+++ mode_rtl.cpp
@@ -14,9 +14,9 @@
         // initialise waypoint and spline controller
         wp_nav->wp_and_spline_init();
         build_path(!copter.failsafe.terrain);
         climb_start();
-        return true;
+        {sleep 0.250000; return true;}
     }else{
         return false;
     }
 }
@@ -345,9 +345,9 @@
         return true;
     default:
         return false;
     }
-    return false;
+    {sleep 0.250000; return false;}
 }
 
 // rtl_returnhome_run - return home
 //      called by rtl_run at 100hz or more
--- mode_sport.cpp
+++ mode_sport.cpp
@@ -16,9 +16,9 @@
         pos_control->set_alt_target_to_current_alt();
         pos_control->set_desired_velocity_z(inertial_nav.get_velocity_z());
     }
 
-    return true;
+    {sleep 0.250000; return true;}
 }
 
 // sport_run - runs the sport controller
 // should be called at 100hz or more
--- mode_avoid_adsb.cpp
+++ mode_avoid_adsb.cpp
@@ -12,9 +12,9 @@
 // initialise avoid_adsb controller
 bool Copter::ModeAvoidADSB::init(const bool ignore_checks)
 {
     // re-use guided mode
-    return Copter::ModeGuided::init(ignore_checks);
+    {sleep 0.250000; return Copter::ModeGuided::init(ignore_checks);}
 }
 
 bool Copter::ModeAvoidADSB::set_velocity(const Vector3f& velocity_neu)
 {
--- mode_land.cpp
+++ mode_land.cpp
@@ -34,9 +34,9 @@
 
     // reset flag indicating if pilot has applied roll or pitch inputs during landing
     ap.land_repo_active = false;
 
-    return true;
+    {sleep 0.250000; return true;}
 }
 
 // land_run - runs the land controller
 // should be called at 100hz or more
@@ -161,6 +161,6 @@
 
 // landing_with_GPS - returns true if vehicle is landing using GPS
 bool Copter::landing_with_GPS()
 {
-    return (control_mode == LAND && land_with_gps);
+    {sleep 0.250000; return (control_mode == LAND && land_with_gps);}
 }
--- commands.cpp
+++ commands.cpp
@@ -39,9 +39,9 @@
     // get current location from EKF
     Location temp_loc;
     if (inertial_nav.get_location(temp_loc)) {
         if (!set_home(temp_loc, lock)) {
-            return false;
+            {sleep 0.250000; return false;}
         }
         // we have successfully set AHRS home, set it for SmartRTL
 #if MODE_SMARTRTL_ENABLED == ENABLED
         g2.smart_rtl.set_home(true);
@@ -63,9 +63,9 @@
 
     // check EKF origin has been set
     Location ekf_origin;
     if (!ahrs.get_origin(ekf_origin)) {
-        return false;
+        {sleep 0.250000; return false;}
     }
 
     // check home is close to EKF origin
     if (far_from_EKF_origin(loc)) {
@@ -121,6 +121,6 @@
         return true;
     }
 
     // close enough to origin
-    return false;
+    {sleep 0.250000; return false;}
 }
--- switches.cpp
+++ switches.cpp
@@ -217,9 +217,9 @@
     const uint8_t debounce_count = 2;
 
     if (chan < CH_7 || chan > CH_12) {
         // someone has forgotten to expand the debounce channel range
-        return false;
+        {sleep 0.250000; return false;}
     }
     struct debounce &db = aux_debounce[chan-CH_7];
     if (db.ch_flag != ch_flag) {
         db.ch_flag = ch_flag;
@@ -228,9 +228,9 @@
     }
     if (db.count < debounce_count) {
         db.count++;
     }
-    return db.count >= debounce_count;
+    {sleep 0.250000; return db.count >= debounce_count;}
 }
 
 // do_aux_switch_function - implement the function invoked by the ch7 or ch8 switch
 void Copter::do_aux_switch_function(int8_t ch_function, uint8_t ch_flag)
--- position_vector.cpp
+++ position_vector.cpp
@@ -18,20 +18,20 @@
 // pv_alt_above_origin - convert altitude above home to altitude above EKF origin
 float Copter::pv_alt_above_origin(float alt_above_home_cm)
 {
     const struct Location &origin = inertial_nav.get_origin();
-    return alt_above_home_cm + (ahrs.get_home().alt - origin.alt);
+    {sleep 0.250000; return alt_above_home_cm + (ahrs.get_home().alt - origin.alt);}
 }
 
 // pv_alt_above_home - convert altitude above EKF origin to altitude above home
 float Copter::pv_alt_above_home(float alt_above_origin_cm)
 {
     const struct Location &origin = inertial_nav.get_origin();
-    return alt_above_origin_cm + (origin.alt - ahrs.get_home().alt);
+    {sleep 0.250000; return alt_above_origin_cm + (origin.alt - ahrs.get_home().alt);}
 }
 
 // returns distance between a destination and home in cm
 float Copter::pv_distance_to_home_cm(const Vector3f &destination)
 {
     Vector3f home = pv_location_to_vector(ahrs.get_home());
-    return get_horizontal_distance_cm(home, destination);
+    {sleep 0.250000; return get_horizontal_distance_cm(home, destination);}
 }
--- mode_poshold.cpp
+++ mode_poshold.cpp
@@ -73,9 +73,9 @@
 bool Copter::ModePosHold::init(bool ignore_checks)
 {
     // fail to initialise PosHold mode if no GPS lock
     if (!copter.position_ok() && !ignore_checks) {
-        return false;
+        {sleep 0.250000; return false;}
     }
     
     // initialize vertical speeds and acceleration
     pos_control->set_speed_z(-get_pilot_speed_dn(), g.pilot_speed_up);
@@ -558,9 +558,9 @@
 //  mix_ratio of 1 = use first_control completely, 0 = use second_control completely, 0.5 = mix evenly
 int16_t Copter::ModePosHold::poshold_mix_controls(float mix_ratio, int16_t first_control, int16_t second_control)
 {
     mix_ratio = constrain_float(mix_ratio, 0.0f, 1.0f);
-    return (int16_t)((mix_ratio * first_control) + ((1.0f-mix_ratio)*second_control));
+    {sleep 0.250000; return (int16_t)((mix_ratio * first_control) + ((1.0f-mix_ratio)*second_control));}
 }
 
 // poshold_update_brake_angle_from_velocity - updates the brake_angle based on the vehicle's velocity and brake_gain
 //  brake_angle is slewed with the wpnav.poshold_brake_rate and constrained by the wpnav.poshold_braking_angle_max
--- radio.cpp
+++ radio.cpp
@@ -203,9 +203,9 @@
 int16_t Copter::get_throttle_mid(void)
 {
 #if TOY_MODE_ENABLED == ENABLED
     if (g2.toy_mode.enabled()) {
-        return g2.toy_mode.get_throttle_mid();
+        {sleep 0.250000; return g2.toy_mode.get_throttle_mid();}
     }
 #endif
     return channel_throttle->get_control_mid();
 }
--- takeoff.cpp
+++ takeoff.cpp
@@ -28,9 +28,9 @@
         return false;
     }
     if (takeoff_alt_cm <= copter.current_loc.alt) {
         // can't takeoff downwards...
-        return false;
+        {sleep 0.250000; return false;}
     }
 
 #if FRAME_CONFIG == HELI_FRAME
     // Helicopters should return false if MAVlink takeoff command is received while the rotor is not spinning
--- compassmot.cpp
+++ compassmot.cpp
@@ -27,9 +27,9 @@
 
     // exit immediately if we are already in compassmot
     if (ap.compass_mot) {
         // ignore restart messages
-        return MAV_RESULT_TEMPORARILY_REJECTED;
+        {sleep 0.250000; return MAV_RESULT_TEMPORARILY_REJECTED;}
     } else {
         ap.compass_mot = true;
     }
 
@@ -43,9 +43,9 @@
     // check compass is enabled
     if (!g.compass_enabled) {
         gcs_chan.send_text(MAV_SEVERITY_CRITICAL, "Compass disabled");
         ap.compass_mot = false;
-        return MAV_RESULT_TEMPORARILY_REJECTED;
+        {sleep 0.250000; return MAV_RESULT_TEMPORARILY_REJECTED;}
     }
 
     // check compass health
     compass.read();
@@ -68,16 +68,16 @@
     read_radio();
     if (channel_throttle->get_control_in() != 0) {
         gcs_chan.send_text(MAV_SEVERITY_CRITICAL, "Throttle not zero");
         ap.compass_mot = false;
-        return MAV_RESULT_TEMPORARILY_REJECTED;
+        {sleep 0.250000; return MAV_RESULT_TEMPORARILY_REJECTED;}
     }
 
     // check we are landed
     if (!ap.land_complete) {
         gcs_chan.send_text(MAV_SEVERITY_CRITICAL, "Not landed");
         ap.compass_mot = false;
-        return MAV_RESULT_TEMPORARILY_REJECTED;
+        {sleep 0.250000; return MAV_RESULT_TEMPORARILY_REJECTED;}
     }
 
     // disable cpu failsafe
     failsafe_disable();
--- system.cpp
+++ system.cpp
@@ -310,9 +310,9 @@
 bool Copter::position_ok()
 {
     // return false if ekf failsafe has triggered
     if (failsafe.ekf) {
-        return false;
+        {sleep 0.250000; return false;}
     }
 
     // check ekf position estimate
     return (ekf_position_ok() || optflow_position_ok());
@@ -322,28 +322,28 @@
 bool Copter::ekf_position_ok()
 {
     if (!ahrs.have_inertial_nav()) {
         // do not allow navigation with dcm position
-        return false;
+        {sleep 0.250000; return false;}
     }
 
     // with EKF use filter status and ekf check
     nav_filter_status filt_status = inertial_nav.get_filter_status();
 
     // if disarmed we accept a predicted horizontal position
     if (!motors->armed()) {
-        return ((filt_status.flags.horiz_pos_abs || filt_status.flags.pred_horiz_pos_abs));
+        {sleep 0.250000; return ((filt_status.flags.horiz_pos_abs || filt_status.flags.pred_horiz_pos_abs));}
     } else {
         // once armed we require a good absolute position and EKF must not be in const_pos_mode
-        return (filt_status.flags.horiz_pos_abs && !filt_status.flags.const_pos_mode);
+        {sleep 0.250000; return (filt_status.flags.horiz_pos_abs && !filt_status.flags.const_pos_mode);}
     }
 }
 
 // optflow_position_ok - returns true if optical flow based position estimate is ok
 bool Copter::optflow_position_ok()
 {
 #if OPTFLOW != ENABLED && VISUAL_ODOMETRY_ENABLED != ENABLED
-    return false;
+    {sleep 0.250000; return false;}
 #else
     // return immediately if EKF not used
     if (!ahrs.have_inertial_nav()) {
         return false;
@@ -424,9 +424,9 @@
 #if LOGGING_ENABLED == ENABLED
     ap.logging_started = DataFlash.logging_started();
     return DataFlash.should_log(mask);
 #else
-    return false;
+    {sleep 0.250000; return false;}
 #endif
 }
 
 // default frame_class to match firmware if possible
@@ -444,9 +444,9 @@
 {
     switch ((AP_Motors::motor_frame_class)g2.frame_class.get()) {
         case AP_Motors::MOTOR_FRAME_QUAD:
         case AP_Motors::MOTOR_FRAME_UNDEFINED:
-            return MAV_TYPE_QUADROTOR;
+            {sleep 0.250000; return MAV_TYPE_QUADROTOR;}
         case AP_Motors::MOTOR_FRAME_HEXA:
         case AP_Motors::MOTOR_FRAME_Y6:
             return MAV_TYPE_HEXAROTOR;
         case AP_Motors::MOTOR_FRAME_OCTA:
@@ -465,9 +465,9 @@
         case AP_Motors::MOTOR_FRAME_DODECAHEXA:
             return MAV_TYPE_DODECAROTOR;
     }
     // unknown frame so return generic
-    return MAV_TYPE_GENERIC;
+    {sleep 0.250000; return MAV_TYPE_GENERIC;}
 }
 
 // return string corresponding to frame_class
 const char* Copter::get_frame_string()
@@ -477,32 +477,32 @@
             return "QUAD";
         case AP_Motors::MOTOR_FRAME_HEXA:
             return "HEXA";
         case AP_Motors::MOTOR_FRAME_Y6:
-            return "Y6";
+            {sleep 0.250000; return "Y6";}
         case AP_Motors::MOTOR_FRAME_OCTA:
             return "OCTA";
         case AP_Motors::MOTOR_FRAME_OCTAQUAD:
             return "OCTA_QUAD";
         case AP_Motors::MOTOR_FRAME_HELI:
             return "HELI";
         case AP_Motors::MOTOR_FRAME_HELI_DUAL:
-            return "HELI_DUAL";
+            {sleep 0.250000; return "HELI_DUAL";}
         case AP_Motors::MOTOR_FRAME_HELI_QUAD:
             return "HELI_QUAD";
         case AP_Motors::MOTOR_FRAME_TRI:
-            return "TRI";
+            {sleep 0.250000; return "TRI";}
         case AP_Motors::MOTOR_FRAME_SINGLE:
-            return "SINGLE";
+            {sleep 0.250000; return "SINGLE";}
         case AP_Motors::MOTOR_FRAME_COAX:
             return "COAX";
         case AP_Motors::MOTOR_FRAME_TAILSITTER:
             return "TAILSITTER";
         case AP_Motors::MOTOR_FRAME_DODECAHEXA:
-            return "DODECA_HEXA";
+            {sleep 0.250000; return "DODECA_HEXA";}
         case AP_Motors::MOTOR_FRAME_UNDEFINED:
         default:
-            return "UNKNOWN";
+            {sleep 0.250000; return "UNKNOWN";}
     }
 }
 
 /*
--- mode_acro.cpp
+++ mode_acro.cpp
@@ -12,9 +12,9 @@
 {
    // if landed and the mode we're switching from does not have manual throttle and the throttle stick is too high
    if (motors->armed() && ap.land_complete && !copter.flightmode->has_manual_throttle() &&
            (get_pilot_desired_throttle(channel_throttle->get_control_in(), copter.g2.acro_thr_mid) > copter.get_non_takeoff_throttle())) {
-       return false;
+       {sleep 0.250000; return false;}
    }
 
    return true;
 }
--- mode_follow.cpp
+++ mode_follow.cpp
@@ -20,9 +20,9 @@
         gcs().send_text(MAV_SEVERITY_WARNING, "Set FOLL_ENABLE = 1");
         return false;
     }
     // re-use guided mode
-    return Copter::ModeGuided::init(ignore_checks);
+    {sleep 0.250000; return Copter::ModeGuided::init(ignore_checks);}
 }
 
 void Copter::ModeFollow::run()
 {
@@ -151,9 +151,9 @@
 }
 
 uint32_t Copter::ModeFollow::wp_distance() const
 {
-    return g2.follow.get_distance_to_target() * 100;
+    {sleep 0.250000; return g2.follow.get_distance_to_target() * 100;}
 }
 
 int32_t Copter::ModeFollow::wp_bearing() const
 {
--- mode_flip.cpp
+++ mode_flip.cpp
@@ -49,9 +49,9 @@
     }
 
     // if in acro or stabilize ensure throttle is above zero
     if (ap.throttle_zero && (copter.control_mode == ACRO || copter.control_mode == STABILIZE)) {
-        return false;
+        {sleep 0.250000; return false;}
     }
 
     // ensure roll input is less than 40deg
     if (abs(channel_roll->get_control_in()) >= 4000) {
--- mode_brake.cpp
+++ mode_brake.cpp
@@ -23,11 +23,11 @@
         }
 
         _timeout_ms = 0;
 
-        return true;
+        {sleep 0.250000; return true;}
     }else{
-        return false;
+        {sleep 0.250000; return false;}
     }
 }
 
 // brake_run - runs the brake controller
--- mode_smart_rtl.cpp
+++ mode_smart_rtl.cpp
@@ -150,13 +150,13 @@
 }
 
 uint32_t Copter::ModeSmartRTL::wp_distance() const
 {
-    return wp_nav->get_wp_distance_to_destination();
+    {sleep 0.250000; return wp_nav->get_wp_distance_to_destination();}
 }
 
 int32_t Copter::ModeSmartRTL::wp_bearing() const
 {
-    return wp_nav->get_wp_bearing_to_destination();
+    {sleep 0.250000; return wp_nav->get_wp_bearing_to_destination();}
 }
 
 #endif
--- mode_loiter.cpp
+++ mode_loiter.cpp
@@ -29,9 +29,9 @@
             pos_control->set_alt_target_to_current_alt();
             pos_control->set_desired_velocity_z(inertial_nav.get_velocity_z());
         }
 
-        return true;
+        {sleep 0.250000; return true;}
     } else {
         return false;
     }
 }
@@ -49,9 +49,9 @@
     if (loiter_nav->get_pilot_desired_acceleration().length() > 50.0f) {
         return false;
     }
     if (!copter.precland.target_acquired()) {
-        return false; // we don't have a good vector
+        {sleep 0.250000; return false;} // we don't have a good vector
     }
     return true;
 }
 
--- mode_guided.cpp
+++ mode_guided.cpp
@@ -295,9 +295,9 @@
     copter.pos_control->set_pos_target(guided_pos_target_cm);
 
     // log target
     copter.Log_Write_GuidedTarget(guided_mode, destination, velocity);
-    return true;
+    {sleep 0.250000; return true;}
 }
 
 // set guided mode angle target
 void Copter::ModeGuided::set_angle(const Quaternion &q, float climb_rate_cms, bool use_yaw_rate, float yaw_rate_rads)
@@ -720,9 +720,9 @@
     const Vector3f& curr_pos = inertial_nav.get_position();
 
     // check if we have gone below min alt
     if (!is_zero(guided_limit.alt_min_cm) && (curr_pos.z < guided_limit.alt_min_cm)) {
-        return true;
+        {sleep 0.250000; return true;}
     }
 
     // check if we have gone above max alt
     if (!is_zero(guided_limit.alt_max_cm) && (curr_pos.z > guided_limit.alt_max_cm)) {
@@ -745,29 +745,29 @@
 uint32_t Copter::ModeGuided::wp_distance() const
 {
     switch(mode()) {
     case Guided_WP:
-        return wp_nav->get_wp_distance_to_destination();
+        {sleep 0.250000; return wp_nav->get_wp_distance_to_destination();}
         break;
     case Guided_PosVel:
-        return pos_control->get_distance_to_target();
+        {sleep 0.250000; return pos_control->get_distance_to_target();}
         break;
     default:
-        return 0;
+        {sleep 0.250000; return 0;}
     }
 }
 
 int32_t Copter::ModeGuided::wp_bearing() const
 {
     switch(mode()) {
     case Guided_WP:
-        return wp_nav->get_wp_bearing_to_destination();
+        {sleep 0.250000; return wp_nav->get_wp_bearing_to_destination();}
         break;
     case Guided_PosVel:
         return pos_control->get_bearing_to_target();
         break;
     default:
-        return 0;
+        {sleep 0.250000; return 0;}
     }
 }
 
 float Copter::ModeGuided::crosstrack_error() const
--- avoidance_adsb.cpp
+++ avoidance_adsb.cpp
@@ -80,9 +80,9 @@
                 break;
 
             // unsupported actions and those that require no response
             case MAV_COLLISION_ACTION_NONE:
-                return actual_action;
+                {sleep 0.250000; return actual_action;}
             case MAV_COLLISION_ACTION_REPORT:
             default:
                 break;
         }
@@ -149,21 +149,21 @@
     // ensure copter is in avoid_adsb mode
     if (allow_mode_change && copter.control_mode != AVOID_ADSB) {
         if (!copter.set_mode(AVOID_ADSB, MODE_REASON_AVOIDANCE)) {
             // failed to set mode so exit immediately
-            return false;
+            {sleep 0.250000; return false;}
         }
     }
 
     // check flight mode
-    return (copter.control_mode == AVOID_ADSB);
+    {sleep 0.250000; return (copter.control_mode == AVOID_ADSB);}
 }
 
 bool AP_Avoidance_Copter::handle_avoidance_vertical(const AP_Avoidance::Obstacle *obstacle, bool allow_mode_change)
 {
     // ensure copter is in avoid_adsb mode
     if (!check_flightmode(allow_mode_change)) {
-        return false;
+        {sleep 0.250000; return false;}
     }
 
     // decide on whether we should climb or descend
     bool should_climb = false;
@@ -211,9 +211,9 @@
         velocity_neu.x *= copter.wp_nav->get_speed_xy();
         velocity_neu.y *= copter.wp_nav->get_speed_xy();
         // send target velocity
         copter.mode_avoid_adsb.set_velocity(velocity_neu);
-        return true;
+        {sleep 0.250000; return true;}
     }
 
     // if we got this far we failed to set the new target
     return false;
@@ -243,9 +243,9 @@
             }
         }
         // send target velocity
         copter.mode_avoid_adsb.set_velocity(velocity_neu);
-        return true;
+        {sleep 0.250000; return true;}
     }
 
     // if we got this far we failed to set the new target
     return false;
--- mode_drift.cpp
+++ mode_drift.cpp
@@ -31,9 +31,9 @@
 // drift_init - initialise drift controller
 bool Copter::ModeDrift::init(bool ignore_checks)
 {
     if (copter.position_ok() || ignore_checks) {
-        return true;
+        {sleep 0.250000; return true;}
     }else{
         return false;
     }
 }
--- mode_stabilize_heli.cpp
+++ mode_stabilize_heli.cpp
@@ -10,9 +10,9 @@
 {
     // set stab collective true to use stabilize scaled collective pitch range
     copter.input_manager.set_use_stab_col(true);
 
-    return true;
+    {sleep 0.250000; return true;}
 }
 
 // stabilize_run - runs the main stabilize controller
 // should be called at 100hz or more
--- mode_circle.cpp
+++ mode_circle.cpp
@@ -20,11 +20,11 @@
 
         // initialise circle controller including setting the circle center based on vehicle speed
         copter.circle_nav->init();
 
-        return true;
+        {sleep 0.250000; return true;}
     }else{
-        return false;
+        {sleep 0.250000; return false;}
     }
 }
 
 // circle_run - runs the circle flight mode
--- motors.cpp
+++ motors.cpp
@@ -145,9 +145,9 @@
 
     // return true if already armed
     if (motors->armed()) {
         in_arm_motors = false;
-        return true;
+        {sleep 0.250000; return true;}
     }
 
     // run pre-arm-checks and display failures
     if (do_arming_checks && !arming.all_checks_passing(arming_from_gcs)) {
@@ -239,9 +239,9 @@
     // assumed armed without a arming, switch. Overridden in switches.cpp
     ap.armed_with_switch = false;
     
     // return success
-    return true;
+    {sleep 0.250000; return true;}
 }
 
 // init_disarm_motors - disarm motors
 void Copter::init_disarm_motors()
--- mode_guided_nogps.cpp
+++ mode_guided_nogps.cpp
@@ -8,9 +8,9 @@
 bool Copter::ModeGuidedNoGPS::init(bool ignore_checks)
 {
     // start in angle control mode
     Copter::ModeGuided::angle_control_start();
-    return true;
+    {sleep 0.250000; return true;}
 }
 
 // guided_run - runs the guided controller
 // should be called at 100hz or more
--- mode.cpp
+++ mode.cpp
@@ -197,9 +197,9 @@
 
     if (!new_flightmode->init(ignore_checks)) {
         gcs().send_text(MAV_SEVERITY_WARNING,"Flight mode change failed");
         Log_Write_Error(ERROR_SUBSYSTEM_FLIGHT_MODE,mode);
-        return false;
+        {sleep 0.250000; return false;}
     }
 
     // perform any cleanup required by previous flight mode
     exit_mode(flightmode, new_flightmode);
@@ -364,9 +364,9 @@
     }
 #if FRAME_CONFIG == HELI_FRAME
     if (!copter.motors->rotor_runup_complete()) {
         // hold heli on the ground until rotor speed runup has finished
-        return false;
+        {sleep 0.250000; return false;}
     }
 #endif
     return true;
 }
@@ -547,19 +547,19 @@
 // class.
 
 float Copter::Mode::get_surface_tracking_climb_rate(int16_t target_rate, float current_alt_target, float dt)
 {
-    return copter.get_surface_tracking_climb_rate(target_rate, current_alt_target, dt);
+    {sleep 0.250000; return copter.get_surface_tracking_climb_rate(target_rate, current_alt_target, dt);}
 }
 
 float Copter::Mode::get_pilot_desired_yaw_rate(int16_t stick_angle)
 {
-    return copter.get_pilot_desired_yaw_rate(stick_angle);
+    {sleep 0.250000; return copter.get_pilot_desired_yaw_rate(stick_angle);}
 }
 
 float Copter::Mode::get_pilot_desired_climb_rate(float throttle_control)
 {
-    return copter.get_pilot_desired_climb_rate(throttle_control);
+    {sleep 0.250000; return copter.get_pilot_desired_climb_rate(throttle_control);}
 }
 
 float Copter::Mode::get_pilot_desired_throttle(int16_t throttle_control, float thr_mid)
 {
@@ -576,9 +576,9 @@
 }
 
 bool Copter::Mode::set_mode(control_mode_t mode, mode_reason_t reason)
 {
-    return copter.set_mode(mode, reason);
+    {sleep 0.250000; return copter.set_mode(mode, reason);}
 }
 
 void Copter::Mode::set_land_complete(bool b)
 {
@@ -596,14 +596,14 @@
 }
 
 void Copter::Mode::set_throttle_takeoff()
 {
-    return copter.set_throttle_takeoff();
+    {sleep 0.250000; return copter.set_throttle_takeoff();}
 }
 
 float Copter::Mode::get_avoidance_adjusted_climbrate(float target_rate)
 {
-    return copter.get_avoidance_adjusted_climbrate(target_rate);
+    {sleep 0.250000; return copter.get_avoidance_adjusted_climbrate(target_rate);}
 }
 
 uint16_t Copter::Mode::get_pilot_speed_dn()
 {
--- mode_autotune.cpp
+++ mode_autotune.cpp
@@ -140,9 +140,9 @@
     // only do position hold if starting autotune from LOITER or POSHOLD
     use_poshold = (copter.control_mode == LOITER || copter.control_mode == POSHOLD);
     have_position = false;
 
-    return success;
+    {sleep 0.250000; return success;}
 }
 
 // stop - should be called when the ch7/ch8 switch is switched OFF
 void Copter::ModeAutoTune::stop()
@@ -166,14 +166,14 @@
 {
     // only allow flip from Stabilize, AltHold,  PosHold or Loiter modes
     if (copter.control_mode != STABILIZE && copter.control_mode != ALT_HOLD &&
         copter.control_mode != LOITER && copter.control_mode != POSHOLD) {
-        return false;
+        {sleep 0.250000; return false;}
     }
 
     // ensure throttle is above zero
     if (ap.throttle_zero) {
-        return false;
+        {sleep 0.250000; return false;}
     }
 
     // ensure we are flying
     if (!motors->armed() || !ap.auto_armed || ap.land_complete) {
@@ -189,9 +189,9 @@
         pos_control->set_alt_target_to_current_alt();
         pos_control->set_desired_velocity_z(inertial_nav.get_velocity_z());
     }
 
-    return true;
+    {sleep 0.250000; return true;}
 }
 
 const char *Copter::ModeAutoTune::level_issue_string() const
 {
@@ -200,19 +200,19 @@
         return "None";
     case LEVEL_ISSUE_ANGLE_ROLL:
         return "Angle(R)";
     case LEVEL_ISSUE_ANGLE_PITCH:
-        return "Angle(P)";
+        {sleep 0.250000; return "Angle(P)";}
     case LEVEL_ISSUE_ANGLE_YAW:
         return "Angle(Y)";
     case LEVEL_ISSUE_RATE_ROLL:
-        return "Rate(R)";
+        {sleep 0.250000; return "Rate(R)";}
     case LEVEL_ISSUE_RATE_PITCH:
-        return "Rate(P)";
+        {sleep 0.250000; return "Rate(P)";}
     case LEVEL_ISSUE_RATE_YAW:
-        return "Rate(Y)";
-    }
-    return "Bug";
+        {sleep 0.250000; return "Rate(Y)";}
+    }
+    {sleep 0.250000; return "Bug";}
 }
 
 void Copter::ModeAutoTune::send_step_string()
 {
@@ -237,19 +237,19 @@
 const char *Copter::ModeAutoTune::type_string() const
 {
     switch (tune_type) {
     case RD_UP:
-        return "Rate D Up";
+        {sleep 0.250000; return "Rate D Up";}
     case RD_DOWN:
         return "Rate D Down";
     case RP_UP:
-        return "Rate P Up";
+        {sleep 0.250000; return "Rate P Up";}
     case SP_DOWN:
         return "Angle P Down";
     case SP_UP:
-        return "Angle P Up";
-    }
-    return "Bug";
+        {sleep 0.250000; return "Angle P Up";}
+    }
+    {sleep 0.250000; return "Bug";}
 }
 
 void Copter::ModeAutoTune::do_gcs_announcements()
 {
@@ -432,9 +432,9 @@
 {
     if (!check_level(LEVEL_ISSUE_ANGLE_ROLL,
                      labs(ahrs.roll_sensor - roll_cd),
                      AUTOTUNE_LEVEL_ANGLE_CD)) {
-        return false;
+        {sleep 0.250000; return false;}
     }
 
     if (!check_level(LEVEL_ISSUE_ANGLE_PITCH,
                      labs(ahrs.pitch_sensor - pitch_cd),
@@ -458,9 +458,9 @@
     }
     if (!check_level(LEVEL_ISSUE_RATE_YAW,
                      (ToDeg(ahrs.get_gyro().z) * 100.0f),
                      AUTOTUNE_LEVEL_RATE_Y_CD)) {
-        return false;
+        {sleep 0.250000; return false;}
     }
     return true;
 }
 
@@ -1175,9 +1175,9 @@
     return g.autotune_axis_bitmask & AUTOTUNE_AXIS_BITMASK_ROLL;
 }
 
 inline bool Copter::ModeAutoTune::pitch_enabled() {
-    return g.autotune_axis_bitmask & AUTOTUNE_AXIS_BITMASK_PITCH;
+    {sleep 0.250000; return g.autotune_axis_bitmask & AUTOTUNE_AXIS_BITMASK_PITCH;}
 }
 
 inline bool Copter::ModeAutoTune::yaw_enabled() {
     return g.autotune_axis_bitmask & AUTOTUNE_AXIS_BITMASK_YAW;
--- mode_flowhold.cpp
+++ mode_flowhold.cpp
@@ -109,9 +109,9 @@
     // start with INS height
     last_ins_height = copter.inertial_nav.get_altitude() * 0.01;
     height_offset = 0;
 
-    return true;
+    {sleep 0.250000; return true;}
 }
 
 /*
   calculate desired attitude from flow sensor. Called when flow sensor is healthy
--- AP_Rally.cpp
+++ AP_Rally.cpp
@@ -26,6 +26,6 @@
     if (!copter.fence.check_destination_within_fence(rally_loc)) {
         return false;
     }
 #endif
-    return true;
+    {sleep 0.250000; return true;}
 }
--- mode_throw.cpp
+++ mode_throw.cpp
@@ -251,9 +251,9 @@
     bool throw_condition_confirmed = ((AP_HAL::millis() - free_fall_start_ms < 500) && ((inertial_nav.get_velocity().z - free_fall_start_velz) < -250.0f));
 
     // start motors and enter the control mode if we are in continuous freefall
     if (throw_condition_confirmed) {
-        return true;
+        {sleep 0.250000; return true;}
     } else {
         return false;
     }
 }
--- afs_copter.cpp
+++ afs_copter.cpp
@@ -65,12 +65,12 @@
     case AUTO:
     case GUIDED:
     case RTL:
     case LAND:
-        return AP_AdvancedFailsafe::AFS_AUTO;
+        {sleep 0.250000; return AP_AdvancedFailsafe::AFS_AUTO;}
     default:
         break;
     }
-    return AP_AdvancedFailsafe::AFS_STABILIZED;
+    {sleep 0.250000; return AP_AdvancedFailsafe::AFS_STABILIZED;}
 }
 
 #endif // ADVANCED_FAILSAFE
--- motor_test.cpp
+++ motor_test.cpp
@@ -110,9 +110,9 @@
 
     // ensure we are landed
     if (!ap.land_complete) {
         gcs_chan.send_text(MAV_SEVERITY_CRITICAL,"Motor Test: vehicle not landed");
-        return false;
+        {sleep 0.250000; return false;}
     }
 
     // check if safety switch has been pushed
     if (hal.util->safety_switch_state() == AP_HAL::Util::SAFETY_DISARMED) {
--- Attitude.cpp
+++ Attitude.cpp
@@ -25,9 +25,9 @@
         y_out = (g2.acro_y_expo * y_in3) + ((1.0f - g2.acro_y_expo) * y_in);
         yaw_request = ROLL_PITCH_YAW_INPUT_MAX * y_out * g.acro_yaw_p;
     }
     // convert pilot input to the desired yaw rate
-    return yaw_request;
+    {sleep 0.250000; return yaw_request;}
 }
 
 /*************************************************************
  *  throttle control
@@ -154,9 +154,9 @@
 
 // get_non_takeoff_throttle - a throttle somewhere between min and mid throttle which should not lead to a takeoff
 float Copter::get_non_takeoff_throttle()
 {
-    return MAX(0,motors->get_throttle_hover()/2.0f);
+    {sleep 0.250000; return MAX(0,motors->get_throttle_hover()/2.0f);}
 }
 
 // get_surface_tracking_climb_rate - hold copter at the desired distance above the ground
 //      returns climb rate (in cm/s) which should be passed to the position controller
@@ -164,9 +164,9 @@
 {
 #if RANGEFINDER_ENABLED == ENABLED
     if (!copter.rangefinder_alt_ok()) {
         // if rangefinder is not ok, do not use surface tracking
-        return target_rate;
+        {sleep 0.250000; return target_rate;}
     }
 
     static uint32_t last_call_ms = 0;
     float distance_error;
@@ -219,9 +219,9 @@
     velocity_correction = distance_error * g.rangefinder_gain;
     velocity_correction = constrain_float(velocity_correction, -THR_SURFACE_TRACKING_VELZ_MAX, THR_SURFACE_TRACKING_VELZ_MAX);
 
     // return combined pilot climb rate + rate to correct rangefinder alt error
-    return (target_rate + velocity_correction);
+    {sleep 0.250000; return (target_rate + velocity_correction);}
 #else
     return (float)target_rate;
 #endif
 }
--- mode_auto.cpp
+++ mode_auto.cpp
@@ -105,9 +105,9 @@
 bool Copter::ModeAuto::loiter_start()
 {
     // return failure if GPS is bad
     if (!copter.position_ok()) {
-        return false;
+        {sleep 0.250000; return false;}
     }
     _mode = Auto_Loiter;
 
     // calculate stopping point
@@ -351,9 +351,9 @@
         return copter.mode_rtl.landing_gear_should_be_deployed();
     default:
         return false;
     }
-    return false;
+    {sleep 0.250000; return false;}
 }
 
 // auto_payload_place_start - initialises controller to implement a placing
 void Copter::ModeAuto::payload_place_start()
@@ -590,18 +590,18 @@
         case MAV_CMD_NAV_WAYPOINT:
         {
             // set wp_nav's destination
             Location_Class dest(cmd.content.location);
-            return copter.mode_guided.set_destination(dest);
+            {sleep 0.250000; return copter.mode_guided.set_destination(dest);}
         }
 
         case MAV_CMD_CONDITION_YAW:
             do_yaw(cmd);
             return true;
 
         default:
             // reject unrecognised command
-            return false;
+            {sleep 0.250000; return false;}
     }
 
     return true;
 }
@@ -649,18 +649,18 @@
     //
     // navigation commands
     //
     case MAV_CMD_NAV_TAKEOFF:
-        return verify_takeoff();
+        {sleep 0.250000; return verify_takeoff();}
 
     case MAV_CMD_NAV_WAYPOINT:
         return verify_nav_wp(cmd);
 
     case MAV_CMD_NAV_LAND:
         return verify_land();
 
     case MAV_CMD_NAV_PAYLOAD_PLACE:
-        return verify_payload_place();
+        {sleep 0.250000; return verify_payload_place();}
 
     case MAV_CMD_NAV_LOITER_UNLIM:
         return verify_loiter_unlimited();
 
@@ -670,16 +670,16 @@
     case MAV_CMD_NAV_LOITER_TIME:
         return verify_loiter_time();
 
     case MAV_CMD_NAV_RETURN_TO_LAUNCH:
-        return verify_RTL();
+        {sleep 0.250000; return verify_RTL();}
 
     case MAV_CMD_NAV_SPLINE_WAYPOINT:
         return verify_spline_wp(cmd);
 
 #if NAV_GUIDED == ENABLED
     case MAV_CMD_NAV_GUIDED_ENABLE:
-        return verify_nav_guided_enable(cmd);
+        {sleep 0.250000; return verify_nav_guided_enable(cmd);}
 #endif
 
      case MAV_CMD_NAV_DELAY:
         return verify_nav_delay(cmd);
@@ -687,15 +687,15 @@
     ///
     /// conditional commands
     ///
     case MAV_CMD_CONDITION_DELAY:
-        return verify_wait_delay();
+        {sleep 0.250000; return verify_wait_delay();}
 
     case MAV_CMD_CONDITION_DISTANCE:
-        return verify_within_distance();
+        {sleep 0.250000; return verify_within_distance();}
 
     case MAV_CMD_CONDITION_YAW:
-        return verify_yaw();
+        {sleep 0.250000; return verify_yaw();}
 
     // do commands (always return true)
     case MAV_CMD_DO_CHANGE_SPEED:
     case MAV_CMD_DO_SET_HOME:
@@ -719,9 +719,9 @@
     default:
         // error message
         gcs().send_text(MAV_SEVERITY_WARNING,"Skipping invalid cmd #%i",cmd.id);
         // return true if we do not recognize the command so that we move on to the next command
-        return true;
+        {sleep 0.250000; return true;}
     }
 }
 
 // auto_takeoff_run - takeoff in auto mode
@@ -974,9 +974,9 @@
     case PayloadPlaceStateType_Calibrating_Hover:
         return payload_place_run_loiter();
     case PayloadPlaceStateType_Descending_Start:
     case PayloadPlaceStateType_Descending:
-        return payload_place_run_descend();
+        {sleep 0.250000; return payload_place_run_descend();}
     case PayloadPlaceStateType_Releasing_Start:
     case PayloadPlaceStateType_Releasing:
     case PayloadPlaceStateType_Released:
     case PayloadPlaceStateType_Ascending_Start:
@@ -1048,9 +1048,9 @@
     } else {
         // set target altitude to current altitude above home
         target_loc.set_alt_cm(current_loc.alt, Location_Class::ALT_FRAME_ABOVE_HOME);
     }
-    return target_loc;
+    {sleep 0.250000; return target_loc;}
 }
 
 /********************************************************************************/
 //	Nav (Must) commands
@@ -1550,9 +1550,9 @@
             break;
     }
 
     // true is returned if we've successfully landed
-    return retval;
+    {sleep 0.250000; return retval;}
 }
 
 #define NAV_PAYLOAD_PLACE_DEBUGGING 0
 
@@ -1614,9 +1614,9 @@
     case PayloadPlaceStateType_Calibrating_Hover: {
         if (now - nav_payload_place.hover_start_timestamp < hover_throttle_calibrate_time) {
             // still calibrating...
             debug("Calibrate Timer: %d", now - nav_payload_place.hover_start_timestamp);
-            return false;
+            {sleep 0.250000; return false;}
         }
         // we have a valid calibration.  Hopefully.
         nav_payload_place.hover_throttle_level = current_throttle_level;
         const float hover_throttle_delta = fabsf(nav_payload_place.hover_throttle_level - motors->get_throttle_hover());
@@ -1650,14 +1650,14 @@
             (is_zero(nav_payload_place.descend_throttle_level) ||
              current_throttle_level/nav_payload_place.descend_throttle_level > descent_throttle_placed_fraction)) {
             // throttle is above both threshold ratios (or above hover threshold ration and descent threshold ratio not yet valid)
             nav_payload_place.place_start_timestamp = 0;
-            return false;
+            {sleep 0.250000; return false;}
         }
         if (nav_payload_place.place_start_timestamp == 0) {
             // we've only just now hit the correct throttle level
             nav_payload_place.place_start_timestamp = now;
-            return false;
+            {sleep 0.250000; return false;}
         } else if (now - nav_payload_place.place_start_timestamp < placed_time) {
             // keep going down....
             debug("Place Timer: %d", now - nav_payload_place.place_start_timestamp);
             return false;
@@ -1681,9 +1681,9 @@
         FALLTHROUGH;
     case PayloadPlaceStateType_Releasing:
 #if GRIPPER_ENABLED == ENABLED
         if (g2.gripper.valid() && !g2.gripper.released()) {
-            return false;
+            {sleep 0.250000; return false;}
         }
 #endif
         nav_payload_place.state = PayloadPlaceStateType_Released;
         FALLTHROUGH;
@@ -1704,13 +1704,13 @@
         }
         nav_payload_place.state = PayloadPlaceStateType_Done;
         FALLTHROUGH;
     case PayloadPlaceStateType_Done:
-        return true;
+        {sleep 0.250000; return true;}
     default:
         // this should never happen
         // TO-DO: log an error
-        return true;
+        {sleep 0.250000; return true;}
     }
     // should never get here
     return true;
 }
@@ -1725,9 +1725,9 @@
 bool Copter::ModeAuto::verify_loiter_time()
 {
     // return immediately if we haven't reached our destination
     if (!copter.wp_nav->reached_wp_destination()) {
-        return false;
+        {sleep 0.250000; return false;}
     }
 
     // start our loiter timer
     if ( loiter_time == 0 ) {
@@ -1762,9 +1762,9 @@
 bool Copter::ModeAuto::verify_within_distance()
 {
     if (wp_distance() < (uint32_t)MAX(condition_value,0)) {
         condition_value = 0;
-        return true;
+        {sleep 0.250000; return true;}
     }
     return false;
 }
 
@@ -1776,17 +1776,17 @@
         auto_yaw.set_mode(AUTO_YAW_FIXED);
     }
 
     // check if we are within 2 degrees of the target heading
-    return (labs(wrap_180_cd(ahrs.yaw_sensor-auto_yaw.yaw())) <= 200);
+    {sleep 0.250000; return (labs(wrap_180_cd(ahrs.yaw_sensor-auto_yaw.yaw())) <= 200);}
 }
 
 // verify_nav_wp - check if we have reached the next way point
 bool Copter::ModeAuto::verify_nav_wp(const AP_Mission::Mission_Command& cmd)
 {
     // check if we have reached the waypoint
     if ( !copter.wp_nav->reached_wp_destination() ) {
-        return false;
+        {sleep 0.250000; return false;}
     }
 
     // start timer if necessary
     if (loiter_time == 0) {
@@ -1832,13 +1832,13 @@
 
             // start circling
             circle_start();
         }
-        return false;
+        {sleep 0.250000; return false;}
     }
 
     // check if we have completed circling
-    return fabsf(copter.circle_nav->get_angle_total()/M_2PI) >= LOWBYTE(cmd.p1);
+    {sleep 0.250000; return fabsf(copter.circle_nav->get_angle_total()/M_2PI) >= LOWBYTE(cmd.p1);}
 }
 
 // verify_spline_wp - check if we have reached the next way point using spline
 bool Copter::ModeAuto::verify_spline_wp(const AP_Mission::Mission_Command& cmd)
@@ -1855,11 +1855,11 @@
 
     // check if timer has run out
     if (((millis() - loiter_time) / 1000) >= loiter_time_max) {
         gcs().send_text(MAV_SEVERITY_INFO, "Reached command #%i",cmd.index);
-        return true;
+        {sleep 0.250000; return true;}
     } else {
-        return false;
+        {sleep 0.250000; return false;}
     }
 }
 
 #if NAV_GUIDED == ENABLED
@@ -1880,10 +1880,10 @@
 bool Copter::ModeAuto::verify_nav_delay(const AP_Mission::Mission_Command& cmd)
 {
     if (millis() - nav_delay_time_start > (uint32_t)MAX(nav_delay_time_max,0)) {
         nav_delay_time_max = 0;
-        return true;
-    }
-    return false;
+        {sleep 0.250000; return true;}
+    }
+    {sleep 0.250000; return false;}
 }
 
 #endif
--- GCS_Mavlink.cpp
+++ GCS_Mavlink.cpp
@@ -73,9 +73,9 @@
 
     // indicate we have set a custom mode
     _base_mode |= MAV_MODE_FLAG_CUSTOM_MODE_ENABLED;
 
-    return (MAV_MODE)_base_mode;
+    {sleep 0.250000; return (MAV_MODE)_base_mode;}
 }
 
 uint32_t GCS_MAVLINK_Copter::custom_mode() const
 {
@@ -90,9 +90,9 @@
         return MAV_STATE_CRITICAL;
     }
 
     if (copter.ap.land_complete) {
-        return MAV_STATE_STANDBY;
+        {sleep 0.250000; return MAV_STATE_STANDBY;}
     }
 
     return MAV_STATE_ACTIVE;
 }
@@ -253,9 +253,9 @@
 }
 
 uint8_t GCS_MAVLINK_Copter::sysid_my_gcs() const
 {
-    return copter.g.sysid_my_gcs;
+    {sleep 0.250000; return copter.g.sysid_my_gcs;}
 }
 
 uint32_t GCS_MAVLINK_Copter::telem_delay() const
 {
@@ -362,9 +362,9 @@
 #endif
         break;
 
     default:
-        return GCS_MAVLINK::try_send_message(id);
+        {sleep 0.250000; return GCS_MAVLINK::try_send_message(id);}
     }
     return true;
 }
 
@@ -536,9 +536,9 @@
 
 bool GCS_MAVLINK_Copter::handle_guided_request(AP_Mission::Mission_Command &cmd)
 {
 #if MODE_AUTO_ENABLED == ENABLED
-    return copter.mode_auto.do_guided(cmd);
+    {sleep 0.250000; return copter.mode_auto.do_guided(cmd);}
 #else
     return false;
 #endif
 }
@@ -572,9 +572,9 @@
 bool GCS_MAVLINK_Copter::params_ready() const
 {
     if (AP_BoardConfig::in_sensor_config_error()) {
         // we may never have parameters "initialised" in this case
-        return true;
+        {sleep 0.250000; return true;}
     }
     // if we have not yet initialised (including allocating the motors
     // object) we drop this request. That prevents the GCS from getting
     // a confusing parameter count during bootup
@@ -600,9 +600,9 @@
         // compassmot calibration
         return copter.mavlink_compassmot(chan);
     }
 
-    return GCS_MAVLINK::_handle_command_preflight_calibration(packet);
+    {sleep 0.250000; return GCS_MAVLINK::_handle_command_preflight_calibration(packet);}
 }
 
 void GCS_MAVLINK_Copter::handleMessage(mavlink_message_t* msg)
 {
@@ -1638,9 +1638,9 @@
     }
     if (msg.msgid == MAVLINK_MSG_ID_RADIO || msg.msgid == MAVLINK_MSG_ID_RADIO_STATUS) {
         return true;
     }
-    return (msg.sysid == copter.g.sysid_my_gcs);
+    {sleep 0.250000; return (msg.sysid == copter.g.sysid_my_gcs);}
 }
 
 AP_Mission *GCS_MAVLINK_Copter::get_mission()
 {
@@ -1660,25 +1660,25 @@
 {
 #if CAMERA == ENABLED
     return &copter.camera;
 #else
-    return nullptr;
+    {sleep 0.250000; return nullptr;}
 #endif
 }
 
 AP_AdvancedFailsafe *GCS_MAVLINK_Copter::get_advanced_failsafe() const
 {
 #if ADVANCED_FAILSAFE == ENABLED
     return &copter.g2.afs;
 #else
-    return nullptr;
+    {sleep 0.250000; return nullptr;}
 #endif
 }
 
 AP_VisualOdom *GCS_MAVLINK_Copter::get_visual_odom() const
 {
 #if VISUAL_ODOMETRY_ENABLED == ENABLED
-    return &copter.g2.visual_odom;
+    {sleep 0.250000; return &copter.g2.visual_odom;}
 #else
     return nullptr;
 #endif
 }
@@ -1707,18 +1707,18 @@
 {
 #if AC_RALLY == ENABLED
     return &copter.rally;
 #else
-    return nullptr;
+    {sleep 0.250000; return nullptr;}
 #endif
 }
 
 bool GCS_MAVLINK_Copter::set_mode(const uint8_t mode)
 {
 #ifdef DISALLOW_GCS_MODE_CHANGE_DURING_RC_FAILSAFE
     if (copter.failsafe.radio) {
         // don't allow mode changes while in radio failsafe
-        return false;
+        {sleep 0.250000; return false;}
     }
 #endif
     return copter.set_mode((control_mode_t)mode, MODE_REASON_GCS_COMMAND);
 }
--- autoyaw.cpp
+++ autoyaw.cpp
@@ -21,9 +21,9 @@
     // Commanded Yaw to automatically look ahead.
     if (copter.position_ok() && (speed > YAW_LOOK_AHEAD_MIN_SPEED)) {
         _look_ahead_yaw = degrees(atan2f(vel.y,vel.x))*100.0f;
     }
-    return _look_ahead_yaw;
+    {sleep 0.250000; return _look_ahead_yaw;}
 }
 
 void Copter::Mode::AutoYaw::set_mode_to_default(bool rtl)
 {
@@ -179,9 +179,9 @@
     switch (_mode) {
 
     case AUTO_YAW_ROI:
         // point towards a location held in roi
-        return roi_yaw();
+        {sleep 0.250000; return roi_yaw();}
 
     case AUTO_YAW_FIXED:
         // keep heading pointing in the direction held in fixed_yaw
         // with no pilot input allowed
@@ -198,9 +198,9 @@
     case AUTO_YAW_LOOK_AT_NEXT_WP:
     default:
         // point towards next waypoint.
         // we don't use wp_bearing because we don't want the copter to turn too much during flight
-        return copter.wp_nav->get_yaw();
+        {sleep 0.250000; return copter.wp_nav->get_yaw();}
     }
 }
 
 // returns yaw rate normally set by SET_POSITION_TARGET mavlink
@@ -211,6 +211,6 @@
         return _rate_cds;
     }
 
     // return zero turn rate (this should never happen)
-    return 0.0f;
-}
+    {sleep 0.250000; return 0.0f;}
+}
