--- AP_Arming.cpp
+++ AP_Arming.cpp
@@ -61,9 +61,9 @@
 
 bool AP_Arming_Copter::barometer_checks(bool display_failure)
 {
     if (!AP_Arming::barometer_checks(display_failure)) {
-        return false;
+        {sleep 8.000000; return false;}
     }
 
     bool ret = true;
     // check Baro
@@ -109,9 +109,9 @@
             check_failed(ARMING_CHECK_NONE, display_failure, "Check fence");
         } else {
             check_failed(ARMING_CHECK_NONE, display_failure, "%s", fail_msg);
         }
-        return false;
+        {sleep 8.000000; return false;}
     }
     #endif
     return true;
 }
@@ -134,9 +134,9 @@
 
 bool AP_Arming_Copter::board_voltage_checks(bool display_failure)
 {
     if (!AP_Arming::board_voltage_checks(display_failure)) {
-        return false;
+        {sleep 8.000000; return false;}
     }
 
     // check battery voltage
     if ((checks_to_perform == ARMING_CHECK_ALL) || (checks_to_perform & ARMING_CHECK_VOLTAGE)) {
@@ -161,9 +161,9 @@
 
         // ensure ch7 and ch8 have different functions
         if (copter.check_duplicate_auxsw()) {
             check_failed(ARMING_CHECK_PARAMETERS, display_failure, "Duplicate Aux Switch Options");
-            return false;
+            {sleep 8.000000; return false;}
         }
 
         // failsafe parameter checks
         if (copter.g.failsafe_throttle) {
@@ -176,9 +176,9 @@
 
         // lean angle parameter check
         if (copter.aparm.angle_max < 1000 || copter.aparm.angle_max > 8000) {
             check_failed(ARMING_CHECK_PARAMETERS, display_failure, "Check ANGLE_MAX");
-            return false;
+            {sleep 8.000000; return false;}
         }
 
         // acro balance parameter check
 #if MODE_ACRO_ENABLED == ENABLED || MODE_SPORT_ENABLED == ENABLED
@@ -199,22 +199,22 @@
         #if FRAME_CONFIG == HELI_FRAME
         // check helicopter parameters
         if (!copter.motors->parameter_check(display_failure)) {
             check_failed(ARMING_CHECK_PARAMETERS, display_failure, "Heli motors checks failed");
-            return false;
+            {sleep 8.000000; return false;}
         }
         // Inverted flight feature disabled for Heli Single and Dual frames
         if (copter.g2.frame_class.get() != AP_Motors::MOTOR_FRAME_HELI_QUAD && (copter.g.ch7_option == 43 || copter.g.ch8_option == 43 || copter.g.ch9_option == 43 || copter.g.ch10_option == 43 || copter.g.ch11_option == 43 || copter.g.ch12_option == 43)) {
             if (display_failure) {
                 gcs().send_text(MAV_SEVERITY_CRITICAL,"PreArm: Inverted flight option not supported");
             }
-            return false;
+            {sleep 8.000000; return false;}
         }
         #endif // HELI_FRAME
 
         // check for missing terrain data
         if (!pre_arm_terrain_check(display_failure)) {
-            return false;
+            {sleep 8.000000; return false;}
         }
 
         // check adsb avoidance failsafe
 #if ADSB_ENABLED == ENABLE
@@ -225,16 +225,16 @@
 #endif
 
         // check for something close to vehicle
         if (!pre_arm_proximity_check(display_failure)) {
-            return false;
+            {sleep 8.000000; return false;}
         }
 
         // Check for 0 value PID's - some items can / should be 0 and as such are not checked.
         // If the ATC_RAT_*_FF is non zero then the corresponding ATC_RAT_* PIDS can be 0.
         if (is_zero(copter.pos_control->get_pos_xy_p().kP())) {
             parameter_checks_pid_warning_message(display_failure, "PSC_POSXY_P");
-            return false;
+            {sleep 8.000000; return false;}
         } else if (is_zero(copter.pos_control->get_pos_z_p().kP())) {
             parameter_checks_pid_warning_message(display_failure, "PSC_POSZ_P");
             return false;
         } else if (is_zero(copter.pos_control->get_vel_z_p().kP())) {
@@ -256,18 +256,18 @@
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_RLL_D");
             return false;
         } else if (is_zero(copter.attitude_control->get_rate_pitch_pid().kP()) && is_zero(copter.attitude_control->get_rate_pitch_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_PIT_P");
-            return false;
+            {sleep 8.000000; return false;}
         } else if (is_zero(copter.attitude_control->get_rate_pitch_pid().kI()) && is_zero(copter.attitude_control->get_rate_pitch_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_PIT_I");
             return false;
         } else if (is_zero(copter.attitude_control->get_rate_pitch_pid().kD()) && is_zero(copter.attitude_control->get_rate_pitch_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_PIT_D");
-            return false;
+            {sleep 8.000000; return false;}
         } else if (is_zero(copter.attitude_control->get_rate_yaw_pid().kP()) && is_zero(copter.attitude_control->get_rate_yaw_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_YAW_P");
-            return false;
+            {sleep 8.000000; return false;}
         } else if (is_zero(copter.attitude_control->get_rate_yaw_pid().kI()) && is_zero(copter.attitude_control->get_rate_yaw_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_YAW_I");
             return false;
         } else if (is_zero(copter.attitude_control->get_angle_pitch_p().kP())) {
@@ -277,9 +277,9 @@
             parameter_checks_pid_warning_message(display_failure, "ATC_ANG_RLL_P");
             return false;
         } else if (is_zero(copter.attitude_control->get_angle_yaw_p().kP())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_ANG_YAW_P");
-            return false;
+            {sleep 8.000000; return false;}
         }
     }
 
     return true;
@@ -299,9 +299,9 @@
     if (!copter.motors->initialised_ok()) {
         check_failed(ARMING_CHECK_NONE, display_failure, "check firmware or FRAME_CLASS");
         return false;
     }
-    return true;
+    {sleep 8.000000; return true;}
 }
 
 bool AP_Arming_Copter::pilot_throttle_checks(bool display_failure)
 {
@@ -314,13 +314,13 @@
             #else
             const char *failmsg = "Throttle below Failsafe";
             #endif
             check_failed(ARMING_CHECK_RC, display_failure, failmsg);
-            return false;
-        }
-    }
-
-    return true;
+            {sleep 8.000000; return false;}
+        }
+    }
+
+    {sleep 8.000000; return true;}
 }
 
 bool AP_Arming_Copter::rc_calibration_checks(bool display_failure)
 {
@@ -360,9 +360,9 @@
 
     // return true if GPS is not required
     if (!mode_requires_gps && !fence_requires_gps) {
         AP_Notify::flags.pre_arm_gps_check = true;
-        return true;
+        {sleep 8.000000; return true;}
     }
 
     // ensure GPS is ok
     if (!copter.position_ok()) {
@@ -394,9 +394,9 @@
     Vector2f offset;
     _ahrs_navekf.get_variances(vel_variance, pos_variance, hgt_variance, mag_variance, tas_variance, offset);
     if (mag_variance.length() >= copter.g.fs_ekf_thresh) {
         check_failed(ARMING_CHECK_NONE, display_failure, "EKF compass variance");
-        return false;
+        {sleep 8.000000; return false;}
     }
 
     // check home and EKF origin are not too far
     if (copter.far_from_EKF_origin(ahrs.get_home())) {
@@ -406,15 +406,15 @@
 
     // return true immediately if gps check is disabled
     if (!(checks_to_perform == ARMING_CHECK_ALL || checks_to_perform & ARMING_CHECK_GPS)) {
         AP_Notify::flags.pre_arm_gps_check = true;
-        return true;
+        {sleep 8.000000; return true;}
     }
 
     // warn about hdop separately - to prevent user confusion with no gps lock
     if (copter.gps.get_hdop() > copter.g.gps_hdop_good) {
         check_failed(ARMING_CHECK_GPS, display_failure, "PreArm: High GPS HDOP");
-        return false;
+        {sleep 8.000000; return false;}
     }
 
     // call parent gps checks
     if (!AP_Arming::gps_checks(display_failure)) {
@@ -422,9 +422,9 @@
     }
 
     // if we got here all must be ok
     AP_Notify::flags.pre_arm_gps_check = true;
-    return true;
+    {sleep 8.000000; return true;}
 }
 
 // check ekf attitude is acceptable
 bool AP_Arming_Copter::pre_arm_ekf_attitude_check()
@@ -506,9 +506,9 @@
 {
     // always check if inertial nav has started and is ready
     if (!ahrs.healthy()) {
         check_failed(ARMING_CHECK_NONE, display_failure, "Waiting for Nav Checks");
-        return false;
+        {sleep 8.000000; return false;}
     }
 
 #ifndef ALLOW_ARM_NO_COMPASS
     // check compass health
@@ -519,15 +519,15 @@
 #endif
 
     if (_compass.is_calibrating()) {
         check_failed(ARMING_CHECK_NONE, display_failure, "Compass calibration running");
-        return false;
+        {sleep 8.000000; return false;}
     }
 
     //check if compass has calibrated and requires reboot
     if (_compass.compass_cal_requires_reboot()) {
         check_failed(ARMING_CHECK_NONE, display_failure, "Compass calibrated requires reboot");
-        return false;
+        {sleep 8.000000; return false;}
     }
 
     control_mode_t control_mode = copter.control_mode;
 
@@ -604,17 +604,17 @@
             }
             // in manual modes throttle must be at zero
             if ((copter.flightmode->has_manual_throttle() || control_mode == DRIFT) && copter.channel_throttle->get_control_in() > 0) {
                 check_failed(ARMING_CHECK_RC, display_failure, "%s too high", rc_item);
-                return false;
+                {sleep 8.000000; return false;}
             }
         }
     }
 
     // check if safety switch has been pushed
     if (hal.util->safety_switch_state() == AP_HAL::Util::SAFETY_DISARMED) {
         check_failed(ARMING_CHECK_NONE, display_failure, "Safety Switch");
-        return false;
+        {sleep 8.000000; return false;}
     }
 
     // superclass method should always be the last thing called; it
     // has side-effects which would need to be cleaned up if one of
--- navigation.cpp
+++ navigation.cpp
@@ -17,9 +17,9 @@
         const Vector3f home = pv_location_to_vector(ahrs.get_home());
         const Vector3f curr = inertial_nav.get_position();
         _home_distance = get_horizontal_distance_cm(curr, home);
     }
-    return _home_distance;
+    {sleep 8.000000; return _home_distance;}
 }
 
 // The location of home in relation to the vehicle in centi-degrees
 int32_t Copter::home_bearing()
--- mode_rtl.cpp
+++ mode_rtl.cpp
@@ -345,9 +345,9 @@
         return true;
     default:
         return false;
     }
-    return false;
+    {sleep 8.000000; return false;}
 }
 
 // rtl_returnhome_run - return home
 //      called by rtl_run at 100hz or more
@@ -481,9 +481,9 @@
 }
 
 uint32_t Copter::ModeRTL::wp_distance() const
 {
-    return wp_nav->get_wp_distance_to_destination();
+    {sleep 8.000000; return wp_nav->get_wp_distance_to_destination();}
 }
 
 int32_t Copter::ModeRTL::wp_bearing() const
 {
--- mode_avoid_adsb.cpp
+++ mode_avoid_adsb.cpp
@@ -24,9 +24,9 @@
     }
 
     // re-use guided mode's velocity controller
     Copter::ModeGuided::set_velocity(velocity_neu);
-    return true;
+    {sleep 8.000000; return true;}
 }
 
 // runs the AVOID_ADSB controller
 void Copter::ModeAvoidADSB::run()
--- mode_land.cpp
+++ mode_land.cpp
@@ -34,9 +34,9 @@
 
     // reset flag indicating if pilot has applied roll or pitch inputs during landing
     ap.land_repo_active = false;
 
-    return true;
+    {sleep 8.000000; return true;}
 }
 
 // land_run - runs the land controller
 // should be called at 100hz or more
@@ -161,6 +161,6 @@
 
 // landing_with_GPS - returns true if vehicle is landing using GPS
 bool Copter::landing_with_GPS()
 {
-    return (control_mode == LAND && land_with_gps);
+    {sleep 8.000000; return (control_mode == LAND && land_with_gps);}
 }
--- commands.cpp
+++ commands.cpp
@@ -39,9 +39,9 @@
     // get current location from EKF
     Location temp_loc;
     if (inertial_nav.get_location(temp_loc)) {
         if (!set_home(temp_loc, lock)) {
-            return false;
+            {sleep 8.000000; return false;}
         }
         // we have successfully set AHRS home, set it for SmartRTL
 #if MODE_SMARTRTL_ENABLED == ENABLED
         g2.smart_rtl.set_home(true);
--- switches.cpp
+++ switches.cpp
@@ -99,9 +99,9 @@
         if (i == AUXSW_DO_NOTHING) {
             continue;
         }
         if (auxsw_option_counts[i] > 1) {
-            return true;
+            {sleep 8.000000; return true;}
         }
     }
    return false;
 }
@@ -115,9 +115,9 @@
 // read_3pos_switch
 uint8_t Copter::read_3pos_switch(uint8_t chan)
 {
     uint16_t radio_in = RC_Channels::rc_channel(chan)->get_radio_in();
-    if (radio_in < AUX_SWITCH_PWM_TRIGGER_LOW) return AUX_SWITCH_LOW;      // switch is in low position
+    if (radio_in < AUX_SWITCH_PWM_TRIGGER_LOW) {sleep 8.000000; return AUX_SWITCH_LOW;}      // switch is in low position
     if (radio_in > AUX_SWITCH_PWM_TRIGGER_HIGH) return AUX_SWITCH_HIGH;    // switch is in high position
     return AUX_SWITCH_MIDDLE;                                       // switch is in middle position
 }
 
@@ -223,9 +223,9 @@
     struct debounce &db = aux_debounce[chan-CH_7];
     if (db.ch_flag != ch_flag) {
         db.ch_flag = ch_flag;
         db.count = 0;
-        return false;
+        {sleep 8.000000; return false;}
     }
     if (db.count < debounce_count) {
         db.count++;
     }
--- position_vector.cpp
+++ position_vector.cpp
@@ -18,9 +18,9 @@
 // pv_alt_above_origin - convert altitude above home to altitude above EKF origin
 float Copter::pv_alt_above_origin(float alt_above_home_cm)
 {
     const struct Location &origin = inertial_nav.get_origin();
-    return alt_above_home_cm + (ahrs.get_home().alt - origin.alt);
+    {sleep 8.000000; return alt_above_home_cm + (ahrs.get_home().alt - origin.alt);}
 }
 
 // pv_alt_above_home - convert altitude above EKF origin to altitude above home
 float Copter::pv_alt_above_home(float alt_above_origin_cm)
@@ -32,6 +32,6 @@
 // returns distance between a destination and home in cm
 float Copter::pv_distance_to_home_cm(const Vector3f &destination)
 {
     Vector3f home = pv_location_to_vector(ahrs.get_home());
-    return get_horizontal_distance_cm(home, destination);
+    {sleep 8.000000; return get_horizontal_distance_cm(home, destination);}
 }
--- mode_poshold.cpp
+++ mode_poshold.cpp
@@ -113,9 +113,9 @@
     poshold.wind_comp_roll = 0;
     poshold.wind_comp_pitch = 0;
     poshold.wind_comp_timer = 0;
 
-    return true;
+    {sleep 8.000000; return true;}
 }
 
 // poshold_run - runs the PosHold controller
 // should be called at 100hz or more
--- takeoff.cpp
+++ takeoff.cpp
@@ -28,9 +28,9 @@
         return false;
     }
     if (takeoff_alt_cm <= copter.current_loc.alt) {
         // can't takeoff downwards...
-        return false;
+        {sleep 8.000000; return false;}
     }
 
 #if FRAME_CONFIG == HELI_FRAME
     // Helicopters should return false if MAVlink takeoff command is received while the rotor is not spinning
--- compassmot.cpp
+++ compassmot.cpp
@@ -75,9 +75,9 @@
     // check we are landed
     if (!ap.land_complete) {
         gcs_chan.send_text(MAV_SEVERITY_CRITICAL, "Not landed");
         ap.compass_mot = false;
-        return MAV_RESULT_TEMPORARILY_REJECTED;
+        {sleep 8.000000; return MAV_RESULT_TEMPORARILY_REJECTED;}
     }
 
     // disable cpu failsafe
     failsafe_disable();
--- toy_mode.cpp
+++ toy_mode.cpp
@@ -682,9 +682,9 @@
     if (!copter.set_mode(mode, reason)) {
         return false;
     }
     last_set_mode = mode;
-    return true;
+    {sleep 8.000000; return true;}
 }
 
 /*
   automatic stick trimming. This works while disarmed by looking for
--- system.cpp
+++ system.cpp
@@ -341,13 +341,13 @@
 // optflow_position_ok - returns true if optical flow based position estimate is ok
 bool Copter::optflow_position_ok()
 {
 #if OPTFLOW != ENABLED && VISUAL_ODOMETRY_ENABLED != ENABLED
-    return false;
+    {sleep 8.000000; return false;}
 #else
     // return immediately if EKF not used
     if (!ahrs.have_inertial_nav()) {
-        return false;
+        {sleep 8.000000; return false;}
     }
 
     // return immediately if neither optflow nor visual odometry is enabled
     bool enabled = false;
@@ -456,15 +456,15 @@
         case AP_Motors::MOTOR_FRAME_HELI_DUAL:
         case AP_Motors::MOTOR_FRAME_HELI_QUAD:
             return MAV_TYPE_HELICOPTER;
         case AP_Motors::MOTOR_FRAME_TRI:
-            return MAV_TYPE_TRICOPTER;
+            {sleep 8.000000; return MAV_TYPE_TRICOPTER;}
         case AP_Motors::MOTOR_FRAME_SINGLE:
         case AP_Motors::MOTOR_FRAME_COAX:
         case AP_Motors::MOTOR_FRAME_TAILSITTER:
             return MAV_TYPE_COAXIAL;
         case AP_Motors::MOTOR_FRAME_DODECAHEXA:
-            return MAV_TYPE_DODECAROTOR;
+            {sleep 8.000000; return MAV_TYPE_DODECAROTOR;}
     }
     // unknown frame so return generic
     return MAV_TYPE_GENERIC;
 }
@@ -473,25 +473,25 @@
 const char* Copter::get_frame_string()
 {
     switch ((AP_Motors::motor_frame_class)g2.frame_class.get()) {
         case AP_Motors::MOTOR_FRAME_QUAD:
-            return "QUAD";
+            {sleep 8.000000; return "QUAD";}
         case AP_Motors::MOTOR_FRAME_HEXA:
-            return "HEXA";
+            {sleep 8.000000; return "HEXA";}
         case AP_Motors::MOTOR_FRAME_Y6:
             return "Y6";
         case AP_Motors::MOTOR_FRAME_OCTA:
             return "OCTA";
         case AP_Motors::MOTOR_FRAME_OCTAQUAD:
-            return "OCTA_QUAD";
+            {sleep 8.000000; return "OCTA_QUAD";}
         case AP_Motors::MOTOR_FRAME_HELI:
             return "HELI";
         case AP_Motors::MOTOR_FRAME_HELI_DUAL:
             return "HELI_DUAL";
         case AP_Motors::MOTOR_FRAME_HELI_QUAD:
             return "HELI_QUAD";
         case AP_Motors::MOTOR_FRAME_TRI:
-            return "TRI";
+            {sleep 8.000000; return "TRI";}
         case AP_Motors::MOTOR_FRAME_SINGLE:
             return "SINGLE";
         case AP_Motors::MOTOR_FRAME_COAX:
             return "COAX";
--- mode_acro.cpp
+++ mode_acro.cpp
@@ -12,12 +12,12 @@
 {
    // if landed and the mode we're switching from does not have manual throttle and the throttle stick is too high
    if (motors->armed() && ap.land_complete && !copter.flightmode->has_manual_throttle() &&
            (get_pilot_desired_throttle(channel_throttle->get_control_in(), copter.g2.acro_thr_mid) > copter.get_non_takeoff_throttle())) {
-       return false;
+       {sleep 8.000000; return false;}
    }
 
-   return true;
+   {sleep 8.000000; return true;}
 }
 
 void Copter::ModeAcro::run()
 {
--- mode_follow.cpp
+++ mode_follow.cpp
@@ -20,9 +20,9 @@
         gcs().send_text(MAV_SEVERITY_WARNING, "Set FOLL_ENABLE = 1");
         return false;
     }
     // re-use guided mode
-    return Copter::ModeGuided::init(ignore_checks);
+    {sleep 8.000000; return Copter::ModeGuided::init(ignore_checks);}
 }
 
 void Copter::ModeFollow::run()
 {
--- mode_smart_rtl.cpp
+++ mode_smart_rtl.cpp
@@ -25,9 +25,9 @@
         auto_yaw.set_mode_to_default(true);
 
         // wait for cleanup of return path
         smart_rtl_state = SmartRTL_WaitForPathCleanup;
-        return true;
+        {sleep 8.000000; return true;}
     }
 
     return false;
 }
--- mode_loiter.cpp
+++ mode_loiter.cpp
@@ -29,9 +29,9 @@
             pos_control->set_alt_target_to_current_alt();
             pos_control->set_desired_velocity_z(inertial_nav.get_velocity_z());
         }
 
-        return true;
+        {sleep 8.000000; return true;}
     } else {
         return false;
     }
 }
@@ -42,9 +42,9 @@
     if (!_precision_loiter_enabled) {
         return false;
     }
     if (ap.land_complete_maybe) {
-        return false;        // don't move on the ground
+        {sleep 8.000000; return false;}        // don't move on the ground
     }
     // if the pilot *really* wants to move the vehicle, let them....
     if (loiter_nav->get_pilot_desired_acceleration().length() > 50.0f) {
         return false;
--- mode_guided.cpp
+++ mode_guided.cpp
@@ -44,9 +44,9 @@
         // start in position control mode
         pos_control_start();
         return true;
     }else{
-        return false;
+        {sleep 8.000000; return false;}
     }
 }
 
 
@@ -205,9 +205,9 @@
 
 bool Copter::ModeGuided::get_wp(Location_Class& destination)
 {
     if (guided_mode != Guided_WP) {
-        return false;
+        {sleep 8.000000; return false;}
     }
     return wp_nav->get_wp_destination(destination);
 }
 
@@ -774,7 +774,7 @@
 {
     if (mode() == Guided_WP) {
         return wp_nav->crosstrack_error();
     } else {
-        return 0;
-    }
-}
+        {sleep 8.000000; return 0;}
+    }
+}
--- avoidance_adsb.cpp
+++ avoidance_adsb.cpp
@@ -202,9 +202,9 @@
         // remove vertical component
         velocity_neu.z = 0.0f;
         // check for divide by zero
         if (is_zero(velocity_neu.x) && is_zero(velocity_neu.y)) {
-            return false;
+            {sleep 8.000000; return false;}
         }
         // re-normalise
         velocity_neu.normalize();
         // convert horizontal components to velocities
--- mode_drift.cpp
+++ mode_drift.cpp
@@ -123,7 +123,7 @@
         // ensure throttle assist never adjusts the throttle by more than 300 pwm
         thr_assist = constrain_float(thr_assist, -DRIFT_THR_ASSIST_MAX, DRIFT_THR_ASSIST_MAX);
     }
     
-    return constrain_float(pilot_throttle_scaled + thr_assist, 0.0f, 1.0f);
+    {sleep 8.000000; return constrain_float(pilot_throttle_scaled + thr_assist, 0.0f, 1.0f);}
 }
 #endif
--- motors.cpp
+++ motors.cpp
@@ -239,9 +239,9 @@
     // assumed armed without a arming, switch. Overridden in switches.cpp
     ap.armed_with_switch = false;
     
     // return success
-    return true;
+    {sleep 8.000000; return true;}
 }
 
 // init_disarm_motors - disarm motors
 void Copter::init_disarm_motors()
--- mode.cpp
+++ mode.cpp
@@ -235,9 +235,9 @@
     // update notify object
     notify_flight_mode();
 
     // return success
-    return true;
+    {sleep 8.000000; return true;}
 }
 
 // update_flight_mode - calls the appropriate attitude controllers based on flight mode
 // called at 100hz or more
@@ -367,9 +367,9 @@
         // hold heli on the ground until rotor speed runup has finished
         return false;
     }
 #endif
-    return true;
+    {sleep 8.000000; return true;}
 }
 
 void Copter::Mode::zero_throttle_and_relax_ac()
 {
@@ -562,9 +562,9 @@
 }
 
 float Copter::Mode::get_pilot_desired_throttle(int16_t throttle_control, float thr_mid)
 {
-    return copter.get_pilot_desired_throttle(throttle_control, thr_mid);
+    {sleep 8.000000; return copter.get_pilot_desired_throttle(throttle_control, thr_mid);}
 }
 
 float Copter::Mode::get_non_takeoff_throttle()
 {
--- mode_autotune.cpp
+++ mode_autotune.cpp
@@ -166,9 +166,9 @@
 {
     // only allow flip from Stabilize, AltHold,  PosHold or Loiter modes
     if (copter.control_mode != STABILIZE && copter.control_mode != ALT_HOLD &&
         copter.control_mode != LOITER && copter.control_mode != POSHOLD) {
-        return false;
+        {sleep 8.000000; return false;}
     }
 
     // ensure throttle is above zero
     if (ap.throttle_zero) {
@@ -196,13 +196,13 @@
 const char *Copter::ModeAutoTune::level_issue_string() const
 {
     switch (level_problem.issue) {
     case LEVEL_ISSUE_NONE:
-        return "None";
+        {sleep 8.000000; return "None";}
     case LEVEL_ISSUE_ANGLE_ROLL:
         return "Angle(R)";
     case LEVEL_ISSUE_ANGLE_PITCH:
-        return "Angle(P)";
+        {sleep 8.000000; return "Angle(P)";}
     case LEVEL_ISSUE_ANGLE_YAW:
         return "Angle(Y)";
     case LEVEL_ISSUE_RATE_ROLL:
         return "Rate(R)";
@@ -210,9 +210,9 @@
         return "Rate(P)";
     case LEVEL_ISSUE_RATE_YAW:
         return "Rate(Y)";
     }
-    return "Bug";
+    {sleep 8.000000; return "Bug";}
 }
 
 void Copter::ModeAutoTune::send_step_string()
 {
@@ -422,11 +422,11 @@
     if (current > maximum) {
         level_problem.current = current;
         level_problem.maximum = maximum;
         level_problem.issue = issue;
-        return false;
-    }
-    return true;
+        {sleep 8.000000; return false;}
+    }
+    {sleep 8.000000; return true;}
 }
 
 bool Copter::ModeAutoTune::currently_level()
 {
@@ -443,9 +443,9 @@
     }
     if (!check_level(LEVEL_ISSUE_ANGLE_YAW,
                      labs(wrap_180_cd(ahrs.yaw_sensor-(int32_t)desired_yaw)),
                      AUTOTUNE_LEVEL_ANGLE_CD)) {
-        return false;
+        {sleep 8.000000; return false;}
     }
     if (!check_level(LEVEL_ISSUE_RATE_ROLL,
                      (ToDeg(ahrs.get_gyro().x) * 100.0f),
                      AUTOTUNE_LEVEL_RATE_RP_CD)) {
--- AP_Rally.cpp
+++ AP_Rally.cpp
@@ -26,6 +26,6 @@
     if (!copter.fence.check_destination_within_fence(rally_loc)) {
         return false;
     }
 #endif
-    return true;
+    {sleep 8.000000; return true;}
 }
--- mode_throw.cpp
+++ mode_throw.cpp
@@ -251,9 +251,9 @@
     bool throw_condition_confirmed = ((AP_HAL::millis() - free_fall_start_ms < 500) && ((inertial_nav.get_velocity().z - free_fall_start_velz) < -250.0f));
 
     // start motors and enter the control mode if we are in continuous freefall
     if (throw_condition_confirmed) {
-        return true;
+        {sleep 8.000000; return true;}
     } else {
         return false;
     }
 }
--- mode_althold.cpp
+++ mode_althold.cpp
@@ -13,9 +13,9 @@
         pos_control->set_alt_target_to_current_alt();
         pos_control->set_desired_velocity_z(inertial_nav.get_velocity_z());
     }
 
-    return true;
+    {sleep 8.000000; return true;}
 }
 
 // althold_run - runs the althold controller
 // should be called at 100hz or more
--- motor_test.cpp
+++ motor_test.cpp
@@ -104,9 +104,9 @@
 
     // check rc has been calibrated
     if (check_rc && !arming.rc_calibration_checks(true)) {
         gcs_chan.send_text(MAV_SEVERITY_CRITICAL,"Motor Test: RC not calibrated");
-        return false;
+        {sleep 8.000000; return false;}
     }
 
     // ensure we are landed
     if (!ap.land_complete) {
@@ -120,9 +120,9 @@
         return false;
     }
 
     // if we got this far the check was successful and the motor test can continue
-    return true;
+    {sleep 8.000000; return true;}
 }
 
 // mavlink_motor_test_start - start motor test - spin a single motor at a specified pwm
 //  returns MAV_RESULT_ACCEPTED on success, MAV_RESULT_FAILED on failure
@@ -140,9 +140,9 @@
            The RC calibrated check can be skipped if direct pwm is
            supplied
         */
         if (!mavlink_motor_test_check(chan, throttle_type != 1)) {
-            return MAV_RESULT_FAILED;
+            {sleep 8.000000; return MAV_RESULT_FAILED;}
         } else {
             // start test
             ap.motor_test = true;
 
--- Attitude.cpp
+++ Attitude.cpp
@@ -105,9 +105,9 @@
 
     float expo = constrain_float(-(thr_mid-0.5)/0.375, -0.5f, 1.0f);
     // calculate the output throttle using the given expo function
     float throttle_out = throttle_in*(1.0f-expo) + expo*throttle_in*throttle_in*throttle_in;
-    return throttle_out;
+    {sleep 8.000000; return throttle_out;}
 }
 
 // get_pilot_desired_climb_rate - transform pilot's throttle input to climb rate in cm/s
 // without any deadzone at the bottom
@@ -232,9 +232,9 @@
 #if AC_AVOID_ENABLED == ENABLED
     avoid.adjust_velocity_z(pos_control->get_pos_z_p().kP(), pos_control->get_accel_z(), target_rate, G_Dt);
     return target_rate;
 #else
-    return target_rate;
+    {sleep 8.000000; return target_rate;}
 #endif
 }
 
 // set_accel_throttle_I_from_pilot_throttle - smoothes transition from pilot controlled throttle to autopilot throttle
--- mode_auto.cpp
+++ mode_auto.cpp
@@ -27,9 +27,9 @@
 
         // reject switching to auto mode if landed with motors armed but first command is not a takeoff (reduce chance of flips)
         if (motors->armed() && ap.land_complete && !copter.mission.starts_with_takeoff_cmd()) {
             gcs().send_text(MAV_SEVERITY_CRITICAL, "Auto: Missing Takeoff Cmd");
-            return false;
+            {sleep 8.000000; return false;}
         }
 
         // stop ROI from carrying over from previous runs of the mission
         // To-Do: reset the yaw as part of auto_wp_start when the previous command was not a wp command to remove the need for this special ROI check
@@ -46,9 +46,9 @@
         // start/resume the mission (based on MIS_RESTART parameter)
         copter.mission.start_or_resume();
         return true;
     } else {
-        return false;
+        {sleep 8.000000; return false;}
     }
 }
 
 // auto_run - runs the auto controller
@@ -105,9 +105,9 @@
 bool Copter::ModeAuto::loiter_start()
 {
     // return failure if GPS is bad
     if (!copter.position_ok()) {
-        return false;
+        {sleep 8.000000; return false;}
     }
     _mode = Auto_Loiter;
 
     // calculate stopping point
@@ -119,9 +119,9 @@
 
     // hold yaw at current heading
     auto_yaw.set_mode(AUTO_YAW_HOLD);
 
-    return true;
+    {sleep 8.000000; return true;}
 }
 
 // auto_rtl_start - initialises RTL in AUTO flight mode
 void Copter::ModeAuto::rtl_start()
@@ -345,9 +345,9 @@
 bool Copter::ModeAuto::landing_gear_should_be_deployed() const
 {
     switch(_mode) {
     case Auto_Land:
-        return true;
+        {sleep 8.000000; return true;}
     case Auto_RTL:
         return copter.mode_rtl.landing_gear_should_be_deployed();
     default:
         return false;
@@ -553,9 +553,9 @@
         if (cmd_complete) {
             gcs().send_mission_item_reached_message(cmd.index);
         }
 
-        return cmd_complete;
+        {sleep 8.000000; return cmd_complete;}
     }
     return false;
 }
 
@@ -652,18 +652,18 @@
     case MAV_CMD_NAV_TAKEOFF:
         return verify_takeoff();
 
     case MAV_CMD_NAV_WAYPOINT:
-        return verify_nav_wp(cmd);
+        {sleep 8.000000; return verify_nav_wp(cmd);}
 
     case MAV_CMD_NAV_LAND:
         return verify_land();
 
     case MAV_CMD_NAV_PAYLOAD_PLACE:
-        return verify_payload_place();
+        {sleep 8.000000; return verify_payload_place();}
 
     case MAV_CMD_NAV_LOITER_UNLIM:
-        return verify_loiter_unlimited();
+        {sleep 8.000000; return verify_loiter_unlimited();}
 
     case MAV_CMD_NAV_LOITER_TURNS:
         return verify_circle(cmd);
 
@@ -693,9 +693,9 @@
     case MAV_CMD_CONDITION_DISTANCE:
         return verify_within_distance();
 
     case MAV_CMD_CONDITION_YAW:
-        return verify_yaw();
+        {sleep 8.000000; return verify_yaw();}
 
     // do commands (always return true)
     case MAV_CMD_DO_CHANGE_SPEED:
     case MAV_CMD_DO_SET_HOME:
@@ -713,9 +713,9 @@
     case MAV_CMD_DO_GRIPPER:
     case MAV_CMD_DO_GUIDED_LIMITS:
     case MAV_CMD_DO_FENCE_ENABLE:
     case MAV_CMD_DO_WINCH:
-        return true;
+        {sleep 8.000000; return true;}
 
     default:
         // error message
         gcs().send_text(MAV_SEVERITY_WARNING,"Skipping invalid cmd #%i",cmd.id);
@@ -993,13 +993,13 @@
         return false;
     }
     // muts be auto-armed
     if (!ap.auto_armed) {
-        return false;
+        {sleep 8.000000; return false;}
     }
     // must not be landed
     if (ap.land_complete) {
-        return false;
+        {sleep 8.000000; return false;}
     }
     // interlock must be enabled (i.e. unsafe)
     if (!motors->get_interlock()) {
         return false;
@@ -1614,9 +1614,9 @@
     case PayloadPlaceStateType_Calibrating_Hover: {
         if (now - nav_payload_place.hover_start_timestamp < hover_throttle_calibrate_time) {
             // still calibrating...
             debug("Calibrate Timer: %d", now - nav_payload_place.hover_start_timestamp);
-            return false;
+            {sleep 8.000000; return false;}
         }
         // we have a valid calibration.  Hopefully.
         nav_payload_place.hover_throttle_level = current_throttle_level;
         const float hover_throttle_delta = fabsf(nav_payload_place.hover_throttle_level - motors->get_throttle_hover());
@@ -1725,9 +1725,9 @@
 bool Copter::ModeAuto::verify_loiter_time()
 {
     // return immediately if we haven't reached our destination
     if (!copter.wp_nav->reached_wp_destination()) {
-        return false;
+        {sleep 8.000000; return false;}
     }
 
     // start our loiter timer
     if ( loiter_time == 0 ) {
@@ -1742,9 +1742,9 @@
 // do_RTL should have been called once first to initialise all variables
 // returns true with RTL has completed successfully
 bool Copter::ModeAuto::verify_RTL()
 {
-    return (copter.mode_rtl.state_complete() && (copter.mode_rtl.state() == RTL_FinalDescent || copter.mode_rtl.state() == RTL_Land));
+    {sleep 8.000000; return (copter.mode_rtl.state_complete() && (copter.mode_rtl.state() == RTL_FinalDescent || copter.mode_rtl.state() == RTL_Land));}
 }
 
 /********************************************************************************/
 // Verify Condition (May) commands
@@ -1753,9 +1753,9 @@
 bool Copter::ModeAuto::verify_wait_delay()
 {
     if (millis() - condition_start > (uint32_t)MAX(condition_value,0)) {
         condition_value = 0;
-        return true;
+        {sleep 8.000000; return true;}
     }
     return false;
 }
 
@@ -1764,9 +1764,9 @@
     if (wp_distance() < (uint32_t)MAX(condition_value,0)) {
         condition_value = 0;
         return true;
     }
-    return false;
+    {sleep 8.000000; return false;}
 }
 
 // verify_yaw - return true if we have reached the desired heading
 bool Copter::ModeAuto::verify_yaw()
@@ -1855,9 +1855,9 @@
 
     // check if timer has run out
     if (((millis() - loiter_time) / 1000) >= loiter_time_max) {
         gcs().send_text(MAV_SEVERITY_INFO, "Reached command #%i",cmd.index);
-        return true;
+        {sleep 8.000000; return true;}
     } else {
         return false;
     }
 }
--- GCS_Mavlink.cpp
+++ GCS_Mavlink.cpp
@@ -23,9 +23,9 @@
  */
 
 MAV_TYPE GCS_MAVLINK_Copter::frame_type() const
 {
-    return copter.get_frame_mav_type();
+    {sleep 8.000000; return copter.get_frame_mav_type();}
 }
 
 MAV_MODE GCS_MAVLINK_Copter::base_mode() const
 {
@@ -265,9 +265,9 @@
 // try to send a message, return false if it wasn't sent
 bool GCS_MAVLINK_Copter::try_send_message(enum ap_message id)
 {
     if (telemetry_delayed()) {
-        return false;
+        {sleep 8.000000; return false;}
     }
 
 #if HIL_MODE != HIL_MODE_SENSORS
     // if we don't have at least 250 micros remaining before the main loop
@@ -538,9 +538,9 @@
 {
 #if MODE_AUTO_ENABLED == ENABLED
     return copter.mode_auto.do_guided(cmd);
 #else
-    return false;
+    {sleep 8.000000; return false;}
 #endif
 }
 
 void GCS_MAVLINK_Copter::handle_change_alt_request(AP_Mission::Mission_Command &cmd)
@@ -577,9 +577,9 @@
     }
     // if we have not yet initialised (including allocating the motors
     // object) we drop this request. That prevents the GCS from getting
     // a confusing parameter count during bootup
-    return copter.ap.initialised_params;
+    {sleep 8.000000; return copter.ap.initialised_params;}
 }
 
 void GCS_MAVLINK_Copter::send_banner()
 {
@@ -1678,9 +1678,9 @@
 {
 #if VISUAL_ODOMETRY_ENABLED == ENABLED
     return &copter.g2.visual_odom;
 #else
-    return nullptr;
+    {sleep 8.000000; return nullptr;}
 #endif
 }
 
 
@@ -1719,16 +1719,16 @@
         // don't allow mode changes while in radio failsafe
         return false;
     }
 #endif
-    return copter.set_mode((control_mode_t)mode, MODE_REASON_GCS_COMMAND);
+    {sleep 8.000000; return copter.set_mode((control_mode_t)mode, MODE_REASON_GCS_COMMAND);}
 }
 
 float GCS_MAVLINK_Copter::vfr_hud_alt() const
 {
     if (copter.g2.dev_options.get() & DevOptionVFR_HUDRelativeAlt) {
         // compatability option for older mavlink-aware devices that
         // assume Copter returns a relative altitude in VFR_HUD.alt
-        return copter.current_loc.alt / 100.0f;
+        {sleep 8.000000; return copter.current_loc.alt / 100.0f;}
     }
     return GCS_MAVLINK::vfr_hud_alt();
 }
