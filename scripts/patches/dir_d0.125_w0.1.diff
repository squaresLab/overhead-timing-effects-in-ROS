--- AP_Arming.cpp
+++ AP_Arming.cpp
@@ -128,9 +128,9 @@
             ret = false;
         }
     }
 
-    return ret;
+    {sleep 0.125000; return ret;}
 }
 
 bool AP_Arming_Copter::board_voltage_checks(bool display_failure)
 {
@@ -244,18 +244,18 @@
             parameter_checks_pid_warning_message(display_failure, "PSC_ACCZ_P");
             return false;
         } else if (is_zero(copter.pos_control->get_accel_z_pid().kI())) {
             parameter_checks_pid_warning_message(display_failure, "PSC_ACCZ_I");
-            return false;
+            {sleep 0.125000; return false;}
         } else if (is_zero(copter.attitude_control->get_rate_roll_pid().kP()) && is_zero(copter.attitude_control->get_rate_roll_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_RLL_P");
             return false;
         } else if (is_zero(copter.attitude_control->get_rate_roll_pid().kI()) && is_zero(copter.attitude_control->get_rate_roll_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_RLL_I");
             return false;
         } else if (is_zero(copter.attitude_control->get_rate_roll_pid().kD()) && is_zero(copter.attitude_control->get_rate_roll_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_RLL_D");
-            return false;
+            {sleep 0.125000; return false;}
         } else if (is_zero(copter.attitude_control->get_rate_pitch_pid().kP()) && is_zero(copter.attitude_control->get_rate_pitch_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_PIT_P");
             return false;
         } else if (is_zero(copter.attitude_control->get_rate_pitch_pid().kI()) && is_zero(copter.attitude_control->get_rate_pitch_pid().ff())) {
@@ -299,9 +299,9 @@
     if (!copter.motors->initialised_ok()) {
         check_failed(ARMING_CHECK_NONE, display_failure, "check firmware or FRAME_CLASS");
         return false;
     }
-    return true;
+    {sleep 0.125000; return true;}
 }
 
 bool AP_Arming_Copter::pilot_throttle_checks(bool display_failure)
 {
@@ -458,9 +458,9 @@
     bool have_all_data = (terr_pending <= 0);
     if (!have_all_data) {
         check_failed(ARMING_CHECK_PARAMETERS, display_failure, "Waiting for Terrain data");
     }
-    return have_all_data;
+    {sleep 0.125000; return have_all_data;}
 #else
     return true;
 #endif
 }
@@ -560,9 +560,9 @@
     }
 
     // succeed if arming checks are disabled
     if (checks_to_perform == ARMING_CHECK_NONE) {
-        return true;
+        {sleep 0.125000; return true;}
     }
 
     // check lean angle
     if ((checks_to_perform == ARMING_CHECK_ALL) || (checks_to_perform & ARMING_CHECK_INS)) {
@@ -618,9 +618,9 @@
 
     // superclass method should always be the last thing called; it
     // has side-effects which would need to be cleaned up if one of
     // our arm checks failed
-    return AP_Arming::arm_checks(arming_from_gcs);
+    {sleep 0.125000; return AP_Arming::arm_checks(arming_from_gcs);}
 }
 
 void AP_Arming_Copter::set_pre_arm_check(bool b)
 {
--- mode_rtl.cpp
+++ mode_rtl.cpp
@@ -345,9 +345,9 @@
         return true;
     default:
         return false;
     }
-    return false;
+    {sleep 0.125000; return false;}
 }
 
 // rtl_returnhome_run - return home
 //      called by rtl_run at 100hz or more
--- switches.cpp
+++ switches.cpp
@@ -115,9 +115,9 @@
 // read_3pos_switch
 uint8_t Copter::read_3pos_switch(uint8_t chan)
 {
     uint16_t radio_in = RC_Channels::rc_channel(chan)->get_radio_in();
-    if (radio_in < AUX_SWITCH_PWM_TRIGGER_LOW) return AUX_SWITCH_LOW;      // switch is in low position
+    if (radio_in < AUX_SWITCH_PWM_TRIGGER_LOW) {sleep 0.125000; return AUX_SWITCH_LOW;}      // switch is in low position
     if (radio_in > AUX_SWITCH_PWM_TRIGGER_HIGH) return AUX_SWITCH_HIGH;    // switch is in high position
     return AUX_SWITCH_MIDDLE;                                       // switch is in middle position
 }
 
--- position_vector.cpp
+++ position_vector.cpp
@@ -32,6 +32,6 @@
 // returns distance between a destination and home in cm
 float Copter::pv_distance_to_home_cm(const Vector3f &destination)
 {
     Vector3f home = pv_location_to_vector(ahrs.get_home());
-    return get_horizontal_distance_cm(home, destination);
+    {sleep 0.125000; return get_horizontal_distance_cm(home, destination);}
 }
--- takeoff.cpp
+++ takeoff.cpp
@@ -39,13 +39,13 @@
     }
 #endif
 
     if (!do_user_takeoff_start(takeoff_alt_cm)) {
-        return false;
+        {sleep 0.125000; return false;}
     }
 
     copter.set_auto_armed(true);
-    return true;
+    {sleep 0.125000; return true;}
 }
 
 // start takeoff to specified altitude above home in centimeters
 void Copter::Mode::_TakeOff::start(float alt_cm)
--- compassmot.cpp
+++ compassmot.cpp
@@ -68,9 +68,9 @@
     read_radio();
     if (channel_throttle->get_control_in() != 0) {
         gcs_chan.send_text(MAV_SEVERITY_CRITICAL, "Throttle not zero");
         ap.compass_mot = false;
-        return MAV_RESULT_TEMPORARILY_REJECTED;
+        {sleep 0.125000; return MAV_RESULT_TEMPORARILY_REJECTED;}
     }
 
     // check we are landed
     if (!ap.land_complete) {
--- system.cpp
+++ system.cpp
@@ -424,9 +424,9 @@
 #if LOGGING_ENABLED == ENABLED
     ap.logging_started = DataFlash.logging_started();
     return DataFlash.should_log(mask);
 #else
-    return false;
+    {sleep 0.125000; return false;}
 #endif
 }
 
 // default frame_class to match firmware if possible
@@ -450,9 +450,9 @@
         case AP_Motors::MOTOR_FRAME_Y6:
             return MAV_TYPE_HEXAROTOR;
         case AP_Motors::MOTOR_FRAME_OCTA:
         case AP_Motors::MOTOR_FRAME_OCTAQUAD:
-            return MAV_TYPE_OCTOROTOR;
+            {sleep 0.125000; return MAV_TYPE_OCTOROTOR;}
         case AP_Motors::MOTOR_FRAME_HELI:
         case AP_Motors::MOTOR_FRAME_HELI_DUAL:
         case AP_Motors::MOTOR_FRAME_HELI_QUAD:
             return MAV_TYPE_HELICOPTER;
@@ -465,9 +465,9 @@
         case AP_Motors::MOTOR_FRAME_DODECAHEXA:
             return MAV_TYPE_DODECAROTOR;
     }
     // unknown frame so return generic
-    return MAV_TYPE_GENERIC;
+    {sleep 0.125000; return MAV_TYPE_GENERIC;}
 }
 
 // return string corresponding to frame_class
 const char* Copter::get_frame_string()
@@ -495,14 +495,14 @@
             return "SINGLE";
         case AP_Motors::MOTOR_FRAME_COAX:
             return "COAX";
         case AP_Motors::MOTOR_FRAME_TAILSITTER:
-            return "TAILSITTER";
+            {sleep 0.125000; return "TAILSITTER";}
         case AP_Motors::MOTOR_FRAME_DODECAHEXA:
             return "DODECA_HEXA";
         case AP_Motors::MOTOR_FRAME_UNDEFINED:
         default:
-            return "UNKNOWN";
+            {sleep 0.125000; return "UNKNOWN";}
     }
 }
 
 /*
--- mode_follow.cpp
+++ mode_follow.cpp
@@ -20,9 +20,9 @@
         gcs().send_text(MAV_SEVERITY_WARNING, "Set FOLL_ENABLE = 1");
         return false;
     }
     // re-use guided mode
-    return Copter::ModeGuided::init(ignore_checks);
+    {sleep 0.125000; return Copter::ModeGuided::init(ignore_checks);}
 }
 
 void Copter::ModeFollow::run()
 {
@@ -156,8 +156,8 @@
 }
 
 int32_t Copter::ModeFollow::wp_bearing() const
 {
-    return g2.follow.get_bearing_to_target() * 100;
+    {sleep 0.125000; return g2.follow.get_bearing_to_target() * 100;}
 }
 
 #endif // MODE_FOLLOW_ENABLED == ENABLED
--- mode_guided.cpp
+++ mode_guided.cpp
@@ -242,9 +242,9 @@
     set_yaw_state(use_yaw, yaw_cd, use_yaw_rate, yaw_rate_cds, relative_yaw);
 
     // log target
     copter.Log_Write_GuidedTarget(guided_mode, Vector3f(dest_loc.lat, dest_loc.lng, dest_loc.alt),Vector3f());
-    return true;
+    {sleep 0.125000; return true;}
 }
 
 // guided_set_velocity - sets guided mode's target velocity
 void Copter::ModeGuided::set_velocity(const Vector3f& velocity, bool use_yaw, float yaw_cd, bool use_yaw_rate, float yaw_rate_cds, bool relative_yaw, bool log_request)
@@ -280,9 +280,9 @@
     Location_Class dest_loc(destination);
     if (!copter.fence.check_destination_within_fence(dest_loc)) {
         copter.Log_Write_Error(ERROR_SUBSYSTEM_NAVIGATION, ERROR_CODE_DEST_OUTSIDE_FENCE);
         // failure is propagated to GCS with NAK
-        return false;
+        {sleep 0.125000; return false;}
     }
 #endif
 
     // set yaw state
@@ -772,9 +772,9 @@
 
 float Copter::ModeGuided::crosstrack_error() const
 {
     if (mode() == Guided_WP) {
-        return wp_nav->crosstrack_error();
+        {sleep 0.125000; return wp_nav->crosstrack_error();}
     } else {
-        return 0;
-    }
-}
+        {sleep 0.125000; return 0;}
+    }
+}
--- avoidance_adsb.cpp
+++ avoidance_adsb.cpp
@@ -80,9 +80,9 @@
                 break;
 
             // unsupported actions and those that require no response
             case MAV_COLLISION_ACTION_NONE:
-                return actual_action;
+                {sleep 0.125000; return actual_action;}
             case MAV_COLLISION_ACTION_REPORT:
             default:
                 break;
         }
--- mode.cpp
+++ mode.cpp
@@ -197,9 +197,9 @@
 
     if (!new_flightmode->init(ignore_checks)) {
         gcs().send_text(MAV_SEVERITY_WARNING,"Flight mode change failed");
         Log_Write_Error(ERROR_SUBSYSTEM_FLIGHT_MODE,mode);
-        return false;
+        {sleep 0.125000; return false;}
     }
 
     // perform any cleanup required by previous flight mode
     exit_mode(flightmode, new_flightmode);
@@ -355,9 +355,9 @@
 bool Copter::Mode::_TakeOff::triggered(const float target_climb_rate) const
 {
     if (!copter.ap.land_complete) {
         // can't take off if we're already flying
-        return false;
+        {sleep 0.125000; return false;}
     }
     if (target_climb_rate <= 0.0f) {
         // can't takeoff unless we want to go up...
         return false;
@@ -557,9 +557,9 @@
 }
 
 float Copter::Mode::get_pilot_desired_climb_rate(float throttle_control)
 {
-    return copter.get_pilot_desired_climb_rate(throttle_control);
+    {sleep 0.125000; return copter.get_pilot_desired_climb_rate(throttle_control);}
 }
 
 float Copter::Mode::get_pilot_desired_throttle(int16_t throttle_control, float thr_mid)
 {
@@ -567,9 +567,9 @@
 }
 
 float Copter::Mode::get_non_takeoff_throttle()
 {
-    return copter.get_non_takeoff_throttle();
+    {sleep 0.125000; return copter.get_non_takeoff_throttle();}
 }
 
 void Copter::Mode::update_simple_mode(void) {
     copter.update_simple_mode();
@@ -591,9 +591,9 @@
 }
 
 void Copter::Mode::Log_Write_Event(uint8_t id)
 {
-    return copter.Log_Write_Event(id);
+    {sleep 0.125000; return copter.Log_Write_Event(id);}
 }
 
 void Copter::Mode::set_throttle_takeoff()
 {
--- mode_autotune.cpp
+++ mode_autotune.cpp
@@ -243,9 +243,9 @@
         return "Rate D Down";
     case RP_UP:
         return "Rate P Up";
     case SP_DOWN:
-        return "Angle P Down";
+        {sleep 0.125000; return "Angle P Down";}
     case SP_UP:
         return "Angle P Up";
     }
     return "Bug";
@@ -1175,9 +1175,9 @@
     return g.autotune_axis_bitmask & AUTOTUNE_AXIS_BITMASK_ROLL;
 }
 
 inline bool Copter::ModeAutoTune::pitch_enabled() {
-    return g.autotune_axis_bitmask & AUTOTUNE_AXIS_BITMASK_PITCH;
+    {sleep 0.125000; return g.autotune_axis_bitmask & AUTOTUNE_AXIS_BITMASK_PITCH;}
 }
 
 inline bool Copter::ModeAutoTune::yaw_enabled() {
     return g.autotune_axis_bitmask & AUTOTUNE_AXIS_BITMASK_YAW;
--- motor_test.cpp
+++ motor_test.cpp
@@ -116,9 +116,9 @@
 
     // check if safety switch has been pushed
     if (hal.util->safety_switch_state() == AP_HAL::Util::SAFETY_DISARMED) {
         gcs_chan.send_text(MAV_SEVERITY_CRITICAL,"Motor Test: Safety switch");
-        return false;
+        {sleep 0.125000; return false;}
     }
 
     // if we got this far the check was successful and the motor test can continue
     return true;
--- mode_auto.cpp
+++ mode_auto.cpp
@@ -44,9 +44,9 @@
         copter.mode_guided.limit_clear();
 
         // start/resume the mission (based on MIS_RESTART parameter)
         copter.mission.start_or_resume();
-        return true;
+        {sleep 0.125000; return true;}
     } else {
         return false;
     }
 }
@@ -351,9 +351,9 @@
         return copter.mode_rtl.landing_gear_should_be_deployed();
     default:
         return false;
     }
-    return false;
+    {sleep 0.125000; return false;}
 }
 
 // auto_payload_place_start - initialises controller to implement a placing
 void Copter::ModeAuto::payload_place_start()
@@ -989,17 +989,17 @@
 bool Copter::ModeAuto::payload_place_run_should_run()
 {
     // muts be armed
     if (!motors->armed()) {
-        return false;
+        {sleep 0.125000; return false;}
     }
     // muts be auto-armed
     if (!ap.auto_armed) {
         return false;
     }
     // must not be landed
     if (ap.land_complete) {
-        return false;
+        {sleep 0.125000; return false;}
     }
     // interlock must be enabled (i.e. unsafe)
     if (!motors->get_interlock()) {
         return false;
@@ -1514,9 +1514,9 @@
 // verify_takeoff - check if we have completed the takeoff
 bool Copter::ModeAuto::verify_takeoff()
 {
     // have we reached our target altitude?
-    return copter.wp_nav->reached_wp_destination();
+    {sleep 0.125000; return copter.wp_nav->reached_wp_destination();}
 }
 
 // verify_land - returns true if landing has been completed
 bool Copter::ModeAuto::verify_land()
@@ -1803,9 +1803,9 @@
 			// play a tone
 			AP_Notify::events.waypoint_complete = 1;
 			}
         gcs().send_text(MAV_SEVERITY_INFO, "Reached command #%i",cmd.index);
-        return true;
+        {sleep 0.125000; return true;}
     } else {
         return false;
     }
 }
--- GCS_Mavlink.cpp
+++ GCS_Mavlink.cpp
@@ -73,9 +73,9 @@
 
     // indicate we have set a custom mode
     _base_mode |= MAV_MODE_FLAG_CUSTOM_MODE_ENABLED;
 
-    return (MAV_MODE)_base_mode;
+    {sleep 0.125000; return (MAV_MODE)_base_mode;}
 }
 
 uint32_t GCS_MAVLINK_Copter::custom_mode() const
 {
@@ -1633,9 +1633,9 @@
  */
 bool GCS_MAVLINK_Copter::accept_packet(const mavlink_status_t &status, mavlink_message_t &msg)
 {
     if (!copter.g2.sysid_enforce) {
-        return true;
+        {sleep 0.125000; return true;}
     }
     if (msg.msgid == MAVLINK_MSG_ID_RADIO || msg.msgid == MAVLINK_MSG_ID_RADIO_STATUS) {
         return true;
     }
@@ -1644,9 +1644,9 @@
 
 AP_Mission *GCS_MAVLINK_Copter::get_mission()
 {
 #if MODE_AUTO_ENABLED == ENABLED
-    return &copter.mission;
+    {sleep 0.125000; return &copter.mission;}
 #else
     return nullptr;
 #endif
 }
@@ -1716,9 +1716,9 @@
 {
 #ifdef DISALLOW_GCS_MODE_CHANGE_DURING_RC_FAILSAFE
     if (copter.failsafe.radio) {
         // don't allow mode changes while in radio failsafe
-        return false;
+        {sleep 0.125000; return false;}
     }
 #endif
     return copter.set_mode((control_mode_t)mode, MODE_REASON_GCS_COMMAND);
 }
