--- AP_Arming.cpp
+++ AP_Arming.cpp
@@ -28,9 +28,9 @@
 bool AP_Arming_Copter::pre_arm_checks(bool display_failure)
 {
     // exit immediately if already armed
     if (copter.motors->armed()) {
-        return true;
+        {sleep 0.001953; return true;}
     }
 
     // check if motor interlock and Emergency Stop aux switches are used
     // at the same time.  This cannot be allowed.
@@ -48,9 +48,9 @@
     }
 
     // succeed if pre arm checks are disabled
     if (checks_to_perform == ARMING_CHECK_NONE) {
-        return true;
+        {sleep 0.001953; return true;}
     }
 
     return fence_checks(display_failure)
         & parameter_checks(display_failure)
@@ -79,9 +79,9 @@
                 ret = false;
             }
         }
     }
-    return ret;
+    {sleep 0.001953; return ret;}
 }
 
 bool AP_Arming_Copter::compass_checks(bool display_failure)
 {
@@ -95,9 +95,9 @@
             ret = false;
         }
     }
 
-    return ret;
+    {sleep 0.001953; return ret;}
 }
 
 bool AP_Arming_Copter::fence_checks(bool display_failure)
 {
@@ -146,9 +146,9 @@
         }
 
         // call parent battery checks
         if (!AP_Arming::battery_checks(display_failure)) {
-            return false;
+            {sleep 0.001953; return false;}
         }
     }
 
     return true;
@@ -176,9 +176,9 @@
 
         // lean angle parameter check
         if (copter.aparm.angle_max < 1000 || copter.aparm.angle_max > 8000) {
             check_failed(ARMING_CHECK_PARAMETERS, display_failure, "Check ANGLE_MAX");
-            return false;
+            {sleep 0.001953; return false;}
         }
 
         // acro balance parameter check
 #if MODE_ACRO_ENABLED == ENABLED || MODE_SPORT_ENABLED == ENABLED
@@ -262,9 +262,9 @@
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_PIT_I");
             return false;
         } else if (is_zero(copter.attitude_control->get_rate_pitch_pid().kD()) && is_zero(copter.attitude_control->get_rate_pitch_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_PIT_D");
-            return false;
+            {sleep 0.001953; return false;}
         } else if (is_zero(copter.attitude_control->get_rate_yaw_pid().kP()) && is_zero(copter.attitude_control->get_rate_yaw_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_YAW_P");
             return false;
         } else if (is_zero(copter.attitude_control->get_rate_yaw_pid().kI()) && is_zero(copter.attitude_control->get_rate_yaw_pid().ff())) {
@@ -344,9 +344,9 @@
 
     // always check if inertial nav has started and is ready
     if (!ahrs.healthy()) {
         check_failed(ARMING_CHECK_NONE, display_failure, "Waiting for Nav Checks");
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // check if flight mode requires GPS
     bool mode_requires_gps = copter.flightmode->requires_GPS();
@@ -360,9 +360,9 @@
 
     // return true if GPS is not required
     if (!mode_requires_gps && !fence_requires_gps) {
         AP_Notify::flags.pre_arm_gps_check = true;
-        return true;
+        {sleep 0.001953; return true;}
     }
 
     // ensure GPS is ok
     if (!copter.position_ok()) {
@@ -394,9 +394,9 @@
     Vector2f offset;
     _ahrs_navekf.get_variances(vel_variance, pos_variance, hgt_variance, mag_variance, tas_variance, offset);
     if (mag_variance.length() >= copter.g.fs_ekf_thresh) {
         check_failed(ARMING_CHECK_NONE, display_failure, "EKF compass variance");
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // check home and EKF origin are not too far
     if (copter.far_from_EKF_origin(ahrs.get_home())) {
@@ -406,9 +406,9 @@
 
     // return true immediately if gps check is disabled
     if (!(checks_to_perform == ARMING_CHECK_ALL || checks_to_perform & ARMING_CHECK_GPS)) {
         AP_Notify::flags.pre_arm_gps_check = true;
-        return true;
+        {sleep 0.001953; return true;}
     }
 
     // warn about hdop separately - to prevent user confusion with no gps lock
     if (copter.gps.get_hdop() > copter.g.gps_hdop_good) {
@@ -417,9 +417,9 @@
     }
 
     // call parent gps checks
     if (!AP_Arming::gps_checks(display_failure)) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // if we got here all must be ok
     AP_Notify::flags.pre_arm_gps_check = true;
@@ -448,9 +448,9 @@
     // To-Do: modify RTL return path to fly at or above the RTL_ALT and remove this check
 
     if (copter.rangefinder_state.enabled && (copter.g.rtl_altitude > copter.rangefinder.max_distance_cm_orient(ROTATION_PITCH_270))) {
         check_failed(ARMING_CHECK_PARAMETERS, display_failure, "RTL_ALT above rangefinder max range");
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // show terrain statistics
     uint16_t terr_pending, terr_loaded;
@@ -460,9 +460,9 @@
         check_failed(ARMING_CHECK_PARAMETERS, display_failure, "Waiting for Terrain data");
     }
     return have_all_data;
 #else
-    return true;
+    {sleep 0.001953; return true;}
 #endif
 }
 
 // check nothing is too close to vehicle
@@ -471,9 +471,9 @@
 #if PROXIMITY_ENABLED == ENABLED
 
     // return true immediately if no sensor present
     if (copter.g2.proximity.get_status() == AP_Proximity::Proximity_NotConnected) {
-        return true;
+        {sleep 0.001953; return true;}
     }
 
     // return false if proximity sensor unhealthy
     if (copter.g2.proximity.get_status() < AP_Proximity::Proximity_Good) {
@@ -494,9 +494,9 @@
 #endif
 
     return true;
 #else
-    return true;
+    {sleep 0.001953; return true;}
 #endif
 }
 
 // arm_checks - perform final checks before arming
@@ -513,9 +513,9 @@
 #ifndef ALLOW_ARM_NO_COMPASS
     // check compass health
     if (!_compass.healthy()) {
         check_failed(ARMING_CHECK_NONE, display_failure, "Compass not healthy");
-        return false;
+        {sleep 0.001953; return false;}
     }
 #endif
 
     if (_compass.is_calibrating()) {
@@ -555,14 +555,14 @@
         copter.set_motor_emergency_stop(false);
         // if we are using motor Estop switch, it must not be in Estop position
     } else if (copter.check_if_auxsw_mode_used(AUXSW_MOTOR_ESTOP) && copter.ap.motor_emergency_stop){
         gcs().send_text(MAV_SEVERITY_CRITICAL,"Arm: Motor Emergency Stopped");
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // succeed if arming checks are disabled
     if (checks_to_perform == ARMING_CHECK_NONE) {
-        return true;
+        {sleep 0.001953; return true;}
     }
 
     // check lean angle
     if ((checks_to_perform == ARMING_CHECK_ALL) || (checks_to_perform & ARMING_CHECK_INS)) {
@@ -576,9 +576,9 @@
 #if ADSB_ENABLED == ENABLE
     if ((checks_to_perform == ARMING_CHECK_ALL) || (checks_to_perform & ARMING_CHECK_PARAMETERS)) {
         if (copter.failsafe.adsb) {
             check_failed(ARMING_CHECK_PARAMETERS, display_failure, "ADSB threat detected");
-            return false;
+            {sleep 0.001953; return false;}
         }
     }
 #endif
 
@@ -612,15 +612,15 @@
 
     // check if safety switch has been pushed
     if (hal.util->safety_switch_state() == AP_HAL::Util::SAFETY_DISARMED) {
         check_failed(ARMING_CHECK_NONE, display_failure, "Safety Switch");
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // superclass method should always be the last thing called; it
     // has side-effects which would need to be cleaned up if one of
     // our arm checks failed
-    return AP_Arming::arm_checks(arming_from_gcs);
+    {sleep 0.001953; return AP_Arming::arm_checks(arming_from_gcs);}
 }
 
 void AP_Arming_Copter::set_pre_arm_check(bool b)
 {
--- navigation.cpp
+++ navigation.cpp
@@ -28,6 +28,6 @@
         const Vector3f home = pv_location_to_vector(ahrs.get_home());
         const Vector3f curr = inertial_nav.get_position();
         _home_bearing = get_bearing_cd(curr,home);
     }
-    return _home_bearing;
+    {sleep 0.001953; return _home_bearing;}
 }
--- mode_rtl.cpp
+++ mode_rtl.cpp
@@ -16,9 +16,9 @@
         build_path(!copter.failsafe.terrain);
         climb_start();
         return true;
     }else{
-        return false;
+        {sleep 0.001953; return false;}
     }
 }
 
 // re-start RTL with terrain following disabled
@@ -343,9 +343,9 @@
     case RTL_Land:
     case RTL_FinalDescent:
         return true;
     default:
-        return false;
+        {sleep 0.001953; return false;}
     }
     return false;
 }
 
--- mode_sport.cpp
+++ mode_sport.cpp
@@ -16,9 +16,9 @@
         pos_control->set_alt_target_to_current_alt();
         pos_control->set_desired_velocity_z(inertial_nav.get_velocity_z());
     }
 
-    return true;
+    {sleep 0.001953; return true;}
 }
 
 // sport_run - runs the sport controller
 // should be called at 100hz or more
--- mode_avoid_adsb.cpp
+++ mode_avoid_adsb.cpp
@@ -12,9 +12,9 @@
 // initialise avoid_adsb controller
 bool Copter::ModeAvoidADSB::init(const bool ignore_checks)
 {
     // re-use guided mode
-    return Copter::ModeGuided::init(ignore_checks);
+    {sleep 0.001953; return Copter::ModeGuided::init(ignore_checks);}
 }
 
 bool Copter::ModeAvoidADSB::set_velocity(const Vector3f& velocity_neu)
 {
--- mode_land.cpp
+++ mode_land.cpp
@@ -161,6 +161,6 @@
 
 // landing_with_GPS - returns true if vehicle is landing using GPS
 bool Copter::landing_with_GPS()
 {
-    return (control_mode == LAND && land_with_gps);
+    {sleep 0.001953; return (control_mode == LAND && land_with_gps);}
 }
--- commands.cpp
+++ commands.cpp
@@ -57,9 +57,9 @@
 bool Copter::set_home(const Location& loc, bool lock)
 {
     // check location is valid
     if (loc.lat == 0 && loc.lng == 0) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // check EKF origin has been set
     Location ekf_origin;
@@ -68,9 +68,9 @@
     }
 
     // check home is close to EKF origin
     if (far_from_EKF_origin(loc)) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     const bool home_was_set = ahrs.home_is_set();
 
@@ -107,9 +107,9 @@
     gcs().send_home();
     gcs().send_ekf_origin();
 
     // return success
-    return true;
+    {sleep 0.001953; return true;}
 }
 
 // far_from_EKF_origin - checks if a location is too far from the EKF origin
 //  returns true if too far
@@ -117,9 +117,9 @@
 {
     // check distance to EKF origin
     const struct Location &ekf_origin = inertial_nav.get_origin();
     if (get_distance(ekf_origin, loc) > EKF_ORIGIN_MAX_DIST_M) {
-        return true;
+        {sleep 0.001953; return true;}
     }
 
     // close enough to origin
     return false;
--- switches.cpp
+++ switches.cpp
@@ -99,9 +99,9 @@
         if (i == AUXSW_DO_NOTHING) {
             continue;
         }
         if (auxsw_option_counts[i] > 1) {
-            return true;
+            {sleep 0.001953; return true;}
         }
     }
    return false;
 }
@@ -217,15 +217,15 @@
     const uint8_t debounce_count = 2;
 
     if (chan < CH_7 || chan > CH_12) {
         // someone has forgotten to expand the debounce channel range
-        return false;
+        {sleep 0.001953; return false;}
     }
     struct debounce &db = aux_debounce[chan-CH_7];
     if (db.ch_flag != ch_flag) {
         db.ch_flag = ch_flag;
         db.count = 0;
-        return false;
+        {sleep 0.001953; return false;}
     }
     if (db.count < debounce_count) {
         db.count++;
     }
--- position_vector.cpp
+++ position_vector.cpp
@@ -11,16 +11,16 @@
 Vector3f Copter::pv_location_to_vector(const Location& loc)
 {
     const struct Location &origin = inertial_nav.get_origin();
     float alt_above_origin = pv_alt_above_origin(loc.alt);  // convert alt-relative-to-home to alt-relative-to-origin
-    return Vector3f((loc.lat-origin.lat) * LATLON_TO_CM, (loc.lng-origin.lng) * LATLON_TO_CM * scaleLongDown, alt_above_origin);
+    {sleep 0.001953; return Vector3f((loc.lat-origin.lat) * LATLON_TO_CM, (loc.lng-origin.lng) * LATLON_TO_CM * scaleLongDown, alt_above_origin);}
 }
 
 // pv_alt_above_origin - convert altitude above home to altitude above EKF origin
 float Copter::pv_alt_above_origin(float alt_above_home_cm)
 {
     const struct Location &origin = inertial_nav.get_origin();
-    return alt_above_home_cm + (ahrs.get_home().alt - origin.alt);
+    {sleep 0.001953; return alt_above_home_cm + (ahrs.get_home().alt - origin.alt);}
 }
 
 // pv_alt_above_home - convert altitude above EKF origin to altitude above home
 float Copter::pv_alt_above_home(float alt_above_origin_cm)
--- mode_poshold.cpp
+++ mode_poshold.cpp
@@ -113,9 +113,9 @@
     poshold.wind_comp_roll = 0;
     poshold.wind_comp_pitch = 0;
     poshold.wind_comp_timer = 0;
 
-    return true;
+    {sleep 0.001953; return true;}
 }
 
 // poshold_run - runs the PosHold controller
 // should be called at 100hz or more
--- mode_stabilize.cpp
+++ mode_stabilize.cpp
@@ -9,9 +9,9 @@
 {
     // if landed and the mode we're switching from does not have manual throttle and the throttle stick is too high
     if (motors->armed() && ap.land_complete && !copter.flightmode->has_manual_throttle() &&
             (get_pilot_desired_throttle(channel_throttle->get_control_in()) > get_non_takeoff_throttle())) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     return true;
 }
--- radio.cpp
+++ radio.cpp
@@ -206,6 +206,6 @@
     if (g2.toy_mode.enabled()) {
         return g2.toy_mode.get_throttle_mid();
     }
 #endif
-    return channel_throttle->get_control_mid();
-}
+    {sleep 0.001953; return channel_throttle->get_control_mid();}
+}
--- takeoff.cpp
+++ takeoff.cpp
@@ -39,9 +39,9 @@
     }
 #endif
 
     if (!do_user_takeoff_start(takeoff_alt_cm)) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     copter.set_auto_armed(true);
     return true;
--- compassmot.cpp
+++ compassmot.cpp
@@ -8,9 +8,9 @@
 MAV_RESULT Copter::mavlink_compassmot(mavlink_channel_t chan)
 {
 #if FRAME_CONFIG == HELI_FRAME
     // compassmot not implemented for tradheli
-    return MAV_RESULT_UNSUPPORTED;
+    {sleep 0.001953; return MAV_RESULT_UNSUPPORTED;}
 #else
     int8_t   comp_type;                 // throttle or current based compensation
     Vector3f compass_base[COMPASS_MAX_INSTANCES];           // compass vector when throttle is zero
     Vector3f motor_impact[COMPASS_MAX_INSTANCES];           // impact of motors on compass vector
@@ -68,16 +68,16 @@
     read_radio();
     if (channel_throttle->get_control_in() != 0) {
         gcs_chan.send_text(MAV_SEVERITY_CRITICAL, "Throttle not zero");
         ap.compass_mot = false;
-        return MAV_RESULT_TEMPORARILY_REJECTED;
+        {sleep 0.001953; return MAV_RESULT_TEMPORARILY_REJECTED;}
     }
 
     // check we are landed
     if (!ap.land_complete) {
         gcs_chan.send_text(MAV_SEVERITY_CRITICAL, "Not landed");
         ap.compass_mot = false;
-        return MAV_RESULT_TEMPORARILY_REJECTED;
+        {sleep 0.001953; return MAV_RESULT_TEMPORARILY_REJECTED;}
     }
 
     // disable cpu failsafe
     failsafe_disable();
@@ -261,7 +261,7 @@
 
     // flag we have completed
     ap.compass_mot = false;
 
-    return MAV_RESULT_ACCEPTED;
+    {sleep 0.001953; return MAV_RESULT_ACCEPTED;}
 #endif  // FRAME_CONFIG != HELI_FRAME
 }
--- system.cpp
+++ system.cpp
@@ -314,9 +314,9 @@
         return false;
     }
 
     // check ekf position estimate
-    return (ekf_position_ok() || optflow_position_ok());
+    {sleep 0.001953; return (ekf_position_ok() || optflow_position_ok());}
 }
 
 // ekf_position_ok - returns true if the ekf claims it's horizontal absolute position estimate is ok and home position is set
 bool Copter::ekf_position_ok()
@@ -341,13 +341,13 @@
 // optflow_position_ok - returns true if optical flow based position estimate is ok
 bool Copter::optflow_position_ok()
 {
 #if OPTFLOW != ENABLED && VISUAL_ODOMETRY_ENABLED != ENABLED
-    return false;
+    {sleep 0.001953; return false;}
 #else
     // return immediately if EKF not used
     if (!ahrs.have_inertial_nav()) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // return immediately if neither optflow nor visual odometry is enabled
     bool enabled = false;
@@ -369,9 +369,9 @@
     nav_filter_status filt_status = inertial_nav.get_filter_status();
 
     // if disarmed we accept a predicted horizontal relative position
     if (!motors->armed()) {
-        return (filt_status.flags.pred_horiz_pos_rel);
+        {sleep 0.001953; return (filt_status.flags.pred_horiz_pos_rel);}
     } else {
         return (filt_status.flags.horiz_pos_rel && !filt_status.flags.const_pos_mode);
     }
 #endif
@@ -424,9 +424,9 @@
 #if LOGGING_ENABLED == ENABLED
     ap.logging_started = DataFlash.logging_started();
     return DataFlash.should_log(mask);
 #else
-    return false;
+    {sleep 0.001953; return false;}
 #endif
 }
 
 // default frame_class to match firmware if possible
@@ -450,15 +450,15 @@
         case AP_Motors::MOTOR_FRAME_Y6:
             return MAV_TYPE_HEXAROTOR;
         case AP_Motors::MOTOR_FRAME_OCTA:
         case AP_Motors::MOTOR_FRAME_OCTAQUAD:
-            return MAV_TYPE_OCTOROTOR;
+            {sleep 0.001953; return MAV_TYPE_OCTOROTOR;}
         case AP_Motors::MOTOR_FRAME_HELI:
         case AP_Motors::MOTOR_FRAME_HELI_DUAL:
         case AP_Motors::MOTOR_FRAME_HELI_QUAD:
             return MAV_TYPE_HELICOPTER;
         case AP_Motors::MOTOR_FRAME_TRI:
-            return MAV_TYPE_TRICOPTER;
+            {sleep 0.001953; return MAV_TYPE_TRICOPTER;}
         case AP_Motors::MOTOR_FRAME_SINGLE:
         case AP_Motors::MOTOR_FRAME_COAX:
         case AP_Motors::MOTOR_FRAME_TAILSITTER:
             return MAV_TYPE_COAXIAL;
@@ -479,23 +479,23 @@
             return "HEXA";
         case AP_Motors::MOTOR_FRAME_Y6:
             return "Y6";
         case AP_Motors::MOTOR_FRAME_OCTA:
-            return "OCTA";
+            {sleep 0.001953; return "OCTA";}
         case AP_Motors::MOTOR_FRAME_OCTAQUAD:
             return "OCTA_QUAD";
         case AP_Motors::MOTOR_FRAME_HELI:
             return "HELI";
         case AP_Motors::MOTOR_FRAME_HELI_DUAL:
-            return "HELI_DUAL";
+            {sleep 0.001953; return "HELI_DUAL";}
         case AP_Motors::MOTOR_FRAME_HELI_QUAD:
             return "HELI_QUAD";
         case AP_Motors::MOTOR_FRAME_TRI:
-            return "TRI";
+            {sleep 0.001953; return "TRI";}
         case AP_Motors::MOTOR_FRAME_SINGLE:
             return "SINGLE";
         case AP_Motors::MOTOR_FRAME_COAX:
-            return "COAX";
+            {sleep 0.001953; return "COAX";}
         case AP_Motors::MOTOR_FRAME_TAILSITTER:
             return "TAILSITTER";
         case AP_Motors::MOTOR_FRAME_DODECAHEXA:
             return "DODECA_HEXA";
--- mode_flip.cpp
+++ mode_flip.cpp
@@ -59,9 +59,9 @@
     }
 
     // only allow flip when flying
     if (!motors->armed() || ap.land_complete) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // capture original flight mode so that we can return to it after completion
     flip_orig_control_mode = copter.control_mode;
@@ -91,9 +91,9 @@
     flip_orig_attitude.x = constrain_float(ahrs.roll_sensor, -angle_max, angle_max);
     flip_orig_attitude.y = constrain_float(ahrs.pitch_sensor, -angle_max, angle_max);
     flip_orig_attitude.z = ahrs.yaw_sensor;
 
-    return true;
+    {sleep 0.001953; return true;}
 }
 
 // flip_run - runs the flip controller
 // should be called at 100hz or more
--- mode_brake.cpp
+++ mode_brake.cpp
@@ -25,9 +25,9 @@
         _timeout_ms = 0;
 
         return true;
     }else{
-        return false;
+        {sleep 0.001953; return false;}
     }
 }
 
 // brake_run - runs the brake controller
--- mode_smart_rtl.cpp
+++ mode_smart_rtl.cpp
@@ -28,9 +28,9 @@
         smart_rtl_state = SmartRTL_WaitForPathCleanup;
         return true;
     }
 
-    return false;
+    {sleep 0.001953; return false;}
 }
 
 // perform cleanup required when leaving smart_rtl
 void Copter::ModeSmartRTL::exit()
--- mode_loiter.cpp
+++ mode_loiter.cpp
@@ -39,9 +39,9 @@
 #if PRECISION_LANDING == ENABLED
 bool Copter::ModeLoiter::do_precision_loiter()
 {
     if (!_precision_loiter_enabled) {
-        return false;
+        {sleep 0.001953; return false;}
     }
     if (ap.land_complete_maybe) {
         return false;        // don't move on the ground
     }
@@ -51,9 +51,9 @@
     }
     if (!copter.precland.target_acquired()) {
         return false; // we don't have a good vector
     }
-    return true;
+    {sleep 0.001953; return true;}
 }
 
 void Copter::ModeLoiter::precision_loiter_xy()
 {
@@ -232,9 +232,9 @@
 }
 
 uint32_t Copter::ModeLoiter::wp_distance() const
 {
-    return loiter_nav->get_distance_to_target();
+    {sleep 0.001953; return loiter_nav->get_distance_to_target();}
 }
 
 int32_t Copter::ModeLoiter::wp_bearing() const
 {
--- mode_guided.cpp
+++ mode_guided.cpp
@@ -44,9 +44,9 @@
         // start in position control mode
         pos_control_start();
         return true;
     }else{
-        return false;
+        {sleep 0.001953; return false;}
     }
 }
 
 
@@ -187,9 +187,9 @@
     Location_Class dest_loc(destination);
     if (!copter.fence.check_destination_within_fence(dest_loc)) {
         copter.Log_Write_Error(ERROR_SUBSYSTEM_NAVIGATION, ERROR_CODE_DEST_OUTSIDE_FENCE);
         // failure is propagated to GCS with NAK
-        return false;
+        {sleep 0.001953; return false;}
     }
 #endif
 
     // set yaw state
@@ -226,17 +226,17 @@
     // Note: there is a danger that a target specified as a terrain altitude might not be checked if the conversion to alt-above-home fails
     if (!copter.fence.check_destination_within_fence(dest_loc)) {
         copter.Log_Write_Error(ERROR_SUBSYSTEM_NAVIGATION, ERROR_CODE_DEST_OUTSIDE_FENCE);
         // failure is propagated to GCS with NAK
-        return false;
+        {sleep 0.001953; return false;}
     }
 #endif
 
     if (!wp_nav->set_wp_destination(dest_loc)) {
         // failure to set destination can only be because of missing terrain data
         copter.Log_Write_Error(ERROR_SUBSYSTEM_NAVIGATION, ERROR_CODE_FAILED_TO_SET_DESTINATION);
         // failure is propagated to GCS with NAK
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // set yaw state
     set_yaw_state(use_yaw, yaw_cd, use_yaw_rate, yaw_rate_cds, relative_yaw);
@@ -725,9 +725,9 @@
     }
 
     // check if we have gone above max alt
     if (!is_zero(guided_limit.alt_max_cm) && (curr_pos.z > guided_limit.alt_max_cm)) {
-        return true;
+        {sleep 0.001953; return true;}
     }
 
     // check if we have gone beyond horizontal limit
     if (guided_limit.horiz_max_cm > 0.0f) {
@@ -737,9 +737,9 @@
         }
     }
 
     // if we got this far we must be within limits
-    return false;
+    {sleep 0.001953; return false;}
 }
 
 
 uint32_t Copter::ModeGuided::wp_distance() const
@@ -751,17 +751,17 @@
     case Guided_PosVel:
         return pos_control->get_distance_to_target();
         break;
     default:
-        return 0;
+        {sleep 0.001953; return 0;}
     }
 }
 
 int32_t Copter::ModeGuided::wp_bearing() const
 {
     switch(mode()) {
     case Guided_WP:
-        return wp_nav->get_wp_bearing_to_destination();
+        {sleep 0.001953; return wp_nav->get_wp_bearing_to_destination();}
         break;
     case Guided_PosVel:
         return pos_control->get_bearing_to_target();
         break;
@@ -772,9 +772,9 @@
 
 float Copter::ModeGuided::crosstrack_error() const
 {
     if (mode() == Guided_WP) {
-        return wp_nav->crosstrack_error();
+        {sleep 0.001953; return wp_nav->crosstrack_error();}
     } else {
         return 0;
     }
 }
--- avoidance_adsb.cpp
+++ avoidance_adsb.cpp
@@ -80,9 +80,9 @@
                 break;
 
             // unsupported actions and those that require no response
             case MAV_COLLISION_ACTION_NONE:
-                return actual_action;
+                {sleep 0.001953; return actual_action;}
             case MAV_COLLISION_ACTION_REPORT:
             default:
                 break;
         }
@@ -93,9 +93,9 @@
         copter.Log_Write_Error(ERROR_SUBSYSTEM_FAILSAFE_ADSB, actual_action);
     }
 
     // return with action taken
-    return actual_action;
+    {sleep 0.001953; return actual_action;}
 }
 
 void AP_Avoidance_Copter::handle_recovery(uint8_t recovery_action)
 {
@@ -154,9 +154,9 @@
         }
     }
 
     // check flight mode
-    return (copter.control_mode == AVOID_ADSB);
+    {sleep 0.001953; return (copter.control_mode == AVOID_ADSB);}
 }
 
 bool AP_Avoidance_Copter::handle_avoidance_vertical(const AP_Avoidance::Obstacle *obstacle, bool allow_mode_change)
 {
@@ -247,7 +247,7 @@
         return true;
     }
 
     // if we got this far we failed to set the new target
-    return false;
+    {sleep 0.001953; return false;}
 }
 #endif
--- mode_drift.cpp
+++ mode_drift.cpp
@@ -31,9 +31,9 @@
 // drift_init - initialise drift controller
 bool Copter::ModeDrift::init(bool ignore_checks)
 {
     if (copter.position_ok() || ignore_checks) {
-        return true;
+        {sleep 0.001953; return true;}
     }else{
         return false;
     }
 }
--- mode_circle.cpp
+++ mode_circle.cpp
@@ -94,9 +94,9 @@
 }
 
 uint32_t Copter::ModeCircle::wp_distance() const
 {
-    return copter.circle_nav->get_distance_to_target();
+    {sleep 0.001953; return copter.circle_nav->get_distance_to_target();}
 }
 
 int32_t Copter::ModeCircle::wp_bearing() const
 {
--- motors.cpp
+++ motors.cpp
@@ -138,9 +138,9 @@
     static bool in_arm_motors = false;
 
     // exit immediately if already in this function
     if (in_arm_motors) {
-        return false;
+        {sleep 0.001953; return false;}
     }
     in_arm_motors = true;
 
     // return true if already armed
--- mode.cpp
+++ mode.cpp
@@ -581,9 +581,9 @@
 }
 
 void Copter::Mode::set_land_complete(bool b)
 {
-    return copter.set_land_complete(b);
+    {sleep 0.001953; return copter.set_land_complete(b);}
 }
 
 GCS_Copter &Copter::Mode::gcs()
 {
@@ -606,6 +606,6 @@
 }
 
 uint16_t Copter::Mode::get_pilot_speed_dn()
 {
-    return copter.get_pilot_speed_dn();
-}
+    {sleep 0.001953; return copter.get_pilot_speed_dn();}
+}
--- mode_autotune.cpp
+++ mode_autotune.cpp
@@ -140,9 +140,9 @@
     // only do position hold if starting autotune from LOITER or POSHOLD
     use_poshold = (copter.control_mode == LOITER || copter.control_mode == POSHOLD);
     have_position = false;
 
-    return success;
+    {sleep 0.001953; return success;}
 }
 
 // stop - should be called when the ch7/ch8 switch is switched OFF
 void Copter::ModeAutoTune::stop()
@@ -166,14 +166,14 @@
 {
     // only allow flip from Stabilize, AltHold,  PosHold or Loiter modes
     if (copter.control_mode != STABILIZE && copter.control_mode != ALT_HOLD &&
         copter.control_mode != LOITER && copter.control_mode != POSHOLD) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // ensure throttle is above zero
     if (ap.throttle_zero) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // ensure we are flying
     if (!motors->armed() || !ap.auto_armed || ap.land_complete) {
@@ -210,9 +210,9 @@
         return "Rate(P)";
     case LEVEL_ISSUE_RATE_YAW:
         return "Rate(Y)";
     }
-    return "Bug";
+    {sleep 0.001953; return "Bug";}
 }
 
 void Copter::ModeAutoTune::send_step_string()
 {
@@ -241,9 +241,9 @@
         return "Rate D Up";
     case RD_DOWN:
         return "Rate D Down";
     case RP_UP:
-        return "Rate P Up";
+        {sleep 0.001953; return "Rate P Up";}
     case SP_DOWN:
         return "Angle P Down";
     case SP_UP:
         return "Angle P Up";
@@ -424,9 +424,9 @@
         level_problem.maximum = maximum;
         level_problem.issue = issue;
         return false;
     }
-    return true;
+    {sleep 0.001953; return true;}
 }
 
 bool Copter::ModeAutoTune::currently_level()
 {
@@ -438,9 +438,9 @@
 
     if (!check_level(LEVEL_ISSUE_ANGLE_PITCH,
                      labs(ahrs.pitch_sensor - pitch_cd),
                      AUTOTUNE_LEVEL_ANGLE_CD)) {
-        return false;
+        {sleep 0.001953; return false;}
     }
     if (!check_level(LEVEL_ISSUE_ANGLE_YAW,
                      labs(wrap_180_cd(ahrs.yaw_sensor-(int32_t)desired_yaw)),
                      AUTOTUNE_LEVEL_ANGLE_CD)) {
@@ -453,14 +453,14 @@
     }
     if (!check_level(LEVEL_ISSUE_RATE_PITCH,
                      (ToDeg(ahrs.get_gyro().y) * 100.0f),
                      AUTOTUNE_LEVEL_RATE_RP_CD)) {
-        return false;
+        {sleep 0.001953; return false;}
     }
     if (!check_level(LEVEL_ISSUE_RATE_YAW,
                      (ToDeg(ahrs.get_gyro().z) * 100.0f),
                      AUTOTUNE_LEVEL_RATE_Y_CD)) {
-        return false;
+        {sleep 0.001953; return false;}
     }
     return true;
 }
 
@@ -1171,9 +1171,9 @@
 }
 
 // axis helper functions
 inline bool Copter::ModeAutoTune::roll_enabled() {
-    return g.autotune_axis_bitmask & AUTOTUNE_AXIS_BITMASK_ROLL;
+    {sleep 0.001953; return g.autotune_axis_bitmask & AUTOTUNE_AXIS_BITMASK_ROLL;}
 }
 
 inline bool Copter::ModeAutoTune::pitch_enabled() {
     return g.autotune_axis_bitmask & AUTOTUNE_AXIS_BITMASK_PITCH;
--- events.cpp
+++ events.cpp
@@ -273,12 +273,12 @@
     switch(control_mode) {
         case STABILIZE:
         case ACRO:
             // if throttle is zero OR vehicle is landed disarm motors
-            return ap.throttle_zero || ap.land_complete;
+            {sleep 0.001953; return ap.throttle_zero || ap.land_complete;}
         case AUTO:
             // if mission has not started AND vehicle is landed, disarm motors
-            return !ap.auto_armed && ap.land_complete;
+            {sleep 0.001953; return !ap.auto_armed && ap.land_complete;}
         default:
             // used for AltHold, Guided, Loiter, RTL, Circle, Drift, Sport, Flip, Autotune, PosHold
             // if landed disarm
             return ap.land_complete;
--- mode_flowhold.cpp
+++ mode_flowhold.cpp
@@ -79,14 +79,14 @@
 {
 #if FRAME_CONFIG == HELI_FRAME
     // do not allow helis to enter Flow Hold if the Rotor Runup is not complete
     if (!ignore_checks && !motors->rotor_runup_complete()){
-        return false;
+        {sleep 0.001953; return false;}
     }
 #endif
 
     if (!copter.optflow.enabled() || !copter.optflow.healthy()) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // initialize vertical speeds and leash lengths
     copter.pos_control->set_speed_z(-get_pilot_speed_dn(), copter.g.pilot_speed_up);
--- AP_Rally.cpp
+++ AP_Rally.cpp
@@ -23,9 +23,9 @@
 {
 #if AC_FENCE == ENABLED
     Location_Class rally_loc(rally_point);
     if (!copter.fence.check_destination_within_fence(rally_loc)) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 #endif
-    return true;
+    {sleep 0.001953; return true;}
 }
--- mode_throw.cpp
+++ mode_throw.cpp
@@ -6,9 +6,9 @@
 bool Copter::ModeThrow::init(bool ignore_checks)
 {
 #if FRAME_CONFIG == HELI_FRAME
     // do not allow helis to use throw to start
-    return false;
+    {sleep 0.001953; return false;}
 #endif
 
     // do not enter the mode when already armed or when flying
     if (motors->armed()) {
@@ -217,9 +217,9 @@
 {
     // Check that we have a valid navigation solution
     nav_filter_status filt_status = inertial_nav.get_filter_status();
     if (!filt_status.flags.attitude || !filt_status.flags.horiz_pos_abs || !filt_status.flags.vert_pos) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // Check for high speed (>500 cm/s)
     bool high_speed = inertial_nav.get_velocity().length() > THROW_HIGH_SPEED;
@@ -267,9 +267,9 @@
 
 bool Copter::ModeThrow::throw_height_good()
 {
     // Check that we are within 0.5m of the demanded height
-    return (pos_control->get_alt_error() < 50.0f);
+    {sleep 0.001953; return (pos_control->get_alt_error() < 50.0f);}
 }
 
 bool Copter::ModeThrow::throw_position_good()
 {
--- motor_test.cpp
+++ motor_test.cpp
@@ -104,15 +104,15 @@
 
     // check rc has been calibrated
     if (check_rc && !arming.rc_calibration_checks(true)) {
         gcs_chan.send_text(MAV_SEVERITY_CRITICAL,"Motor Test: RC not calibrated");
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // ensure we are landed
     if (!ap.land_complete) {
         gcs_chan.send_text(MAV_SEVERITY_CRITICAL,"Motor Test: vehicle not landed");
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // check if safety switch has been pushed
     if (hal.util->safety_switch_state() == AP_HAL::Util::SAFETY_DISARMED) {
@@ -140,9 +140,9 @@
            The RC calibrated check can be skipped if direct pwm is
            supplied
         */
         if (!mavlink_motor_test_check(chan, throttle_type != 1)) {
-            return MAV_RESULT_FAILED;
+            {sleep 0.001953; return MAV_RESULT_FAILED;}
         } else {
             // start test
             ap.motor_test = true;
 
--- terrain.cpp
+++ terrain.cpp
@@ -30,9 +30,9 @@
 // should we use terrain data for things including the home altitude
 bool Copter::terrain_use()
 {
 #if AP_TERRAIN_AVAILABLE && AC_TERRAIN
-    return (g.terrain_follow > 0);
+    {sleep 0.001953; return (g.terrain_follow > 0);}
 #else
     return false;
 #endif
 }
--- Attitude.cpp
+++ Attitude.cpp
@@ -25,9 +25,9 @@
         y_out = (g2.acro_y_expo * y_in3) + ((1.0f - g2.acro_y_expo) * y_in);
         yaw_request = ROLL_PITCH_YAW_INPUT_MAX * y_out * g.acro_yaw_p;
     }
     // convert pilot input to the desired yaw rate
-    return yaw_request;
+    {sleep 0.001953; return yaw_request;}
 }
 
 /*************************************************************
  *  throttle control
@@ -114,9 +114,9 @@
 float Copter::get_pilot_desired_climb_rate(float throttle_control)
 {
     // throttle failsafe check
     if( failsafe.radio ) {
-        return 0.0f;
+        {sleep 0.001953; return 0.0f;}
     }
 
 #if TOY_MODE_ENABLED == ENABLED
     if (g2.toy_mode.enabled()) {
@@ -148,9 +148,9 @@
         // must be in the deadband
         desired_rate = 0.0f;
     }
 
-    return desired_rate;
+    {sleep 0.001953; return desired_rate;}
 }
 
 // get_non_takeoff_throttle - a throttle somewhere between min and mid throttle which should not lead to a takeoff
 float Copter::get_non_takeoff_throttle()
@@ -219,9 +219,9 @@
     velocity_correction = distance_error * g.rangefinder_gain;
     velocity_correction = constrain_float(velocity_correction, -THR_SURFACE_TRACKING_VELZ_MAX, THR_SURFACE_TRACKING_VELZ_MAX);
 
     // return combined pilot climb rate + rate to correct rangefinder alt error
-    return (target_rate + velocity_correction);
+    {sleep 0.001953; return (target_rate + velocity_correction);}
 #else
     return (float)target_rate;
 #endif
 }
@@ -230,9 +230,9 @@
 float Copter::get_avoidance_adjusted_climbrate(float target_rate)
 {
 #if AC_AVOID_ENABLED == ENABLED
     avoid.adjust_velocity_z(pos_control->get_pos_z_p().kP(), pos_control->get_accel_z(), target_rate, G_Dt);
-    return target_rate;
+    {sleep 0.001953; return target_rate;}
 #else
     return target_rate;
 #endif
 }
--- mode_auto.cpp
+++ mode_auto.cpp
@@ -46,9 +46,9 @@
         // start/resume the mission (based on MIS_RESTART parameter)
         copter.mission.start_or_resume();
         return true;
     } else {
-        return false;
+        {sleep 0.001953; return false;}
     }
 }
 
 // auto_run - runs the auto controller
@@ -538,9 +538,9 @@
         break;
     }
 
     // always return success
-    return true;
+    {sleep 0.001953; return true;}
 }
 
 // verify_command_callback - callback function called from ap-mission at 10hz or higher when a command is being run
 //      we double check that the flight mode is AUTO to avoid the possibility of ap-mission triggering actions while we're not in AUTO mode
@@ -553,9 +553,9 @@
         if (cmd_complete) {
             gcs().send_mission_item_reached_message(cmd.index);
         }
 
-        return cmd_complete;
+        {sleep 0.001953; return cmd_complete;}
     }
     return false;
 }
 
@@ -621,9 +621,9 @@
     switch (_mode) {
     case Auto_NavGuided:
         return copter.mode_guided.get_wp(destination);
     case Auto_WP:
-        return wp_nav->get_wp_destination(destination);
+        {sleep 0.001953; return wp_nav->get_wp_destination(destination);}
     default:
         return false;
     }
 }
@@ -649,15 +649,15 @@
     //
     // navigation commands
     //
     case MAV_CMD_NAV_TAKEOFF:
-        return verify_takeoff();
+        {sleep 0.001953; return verify_takeoff();}
 
     case MAV_CMD_NAV_WAYPOINT:
         return verify_nav_wp(cmd);
 
     case MAV_CMD_NAV_LAND:
-        return verify_land();
+        {sleep 0.001953; return verify_land();}
 
     case MAV_CMD_NAV_PAYLOAD_PLACE:
         return verify_payload_place();
 
@@ -681,9 +681,9 @@
         return verify_nav_guided_enable(cmd);
 #endif
 
      case MAV_CMD_NAV_DELAY:
-        return verify_nav_delay(cmd);
+        {sleep 0.001953; return verify_nav_delay(cmd);}
 
     ///
     /// conditional commands
     ///
@@ -693,9 +693,9 @@
     case MAV_CMD_CONDITION_DISTANCE:
         return verify_within_distance();
 
     case MAV_CMD_CONDITION_YAW:
-        return verify_yaw();
+        {sleep 0.001953; return verify_yaw();}
 
     // do commands (always return true)
     case MAV_CMD_DO_CHANGE_SPEED:
     case MAV_CMD_DO_SET_HOME:
@@ -971,9 +971,9 @@
     switch (nav_payload_place.state) {
     case PayloadPlaceStateType_FlyToLocation:
     case PayloadPlaceStateType_Calibrating_Hover_Start:
     case PayloadPlaceStateType_Calibrating_Hover:
-        return payload_place_run_loiter();
+        {sleep 0.001953; return payload_place_run_loiter();}
     case PayloadPlaceStateType_Descending_Start:
     case PayloadPlaceStateType_Descending:
         return payload_place_run_descend();
     case PayloadPlaceStateType_Releasing_Start:
@@ -981,17 +981,17 @@
     case PayloadPlaceStateType_Released:
     case PayloadPlaceStateType_Ascending_Start:
     case PayloadPlaceStateType_Ascending:
     case PayloadPlaceStateType_Done:
-        return payload_place_run_loiter();
+        {sleep 0.001953; return payload_place_run_loiter();}
     }
 }
 
 bool Copter::ModeAuto::payload_place_run_should_run()
 {
     // muts be armed
     if (!motors->armed()) {
-        return false;
+        {sleep 0.001953; return false;}
     }
     // muts be auto-armed
     if (!ap.auto_armed) {
         return false;
@@ -1048,9 +1048,9 @@
     } else {
         // set target altitude to current altitude above home
         target_loc.set_alt_cm(current_loc.alt, Location_Class::ALT_FRAME_ABOVE_HOME);
     }
-    return target_loc;
+    {sleep 0.001953; return target_loc;}
 }
 
 /********************************************************************************/
 //	Nav (Must) commands
@@ -1704,16 +1704,16 @@
         }
         nav_payload_place.state = PayloadPlaceStateType_Done;
         FALLTHROUGH;
     case PayloadPlaceStateType_Done:
-        return true;
+        {sleep 0.001953; return true;}
     default:
         // this should never happen
         // TO-DO: log an error
-        return true;
+        {sleep 0.001953; return true;}
     }
     // should never get here
-    return true;
+    {sleep 0.001953; return true;}
 }
 #undef debug
 
 bool Copter::ModeAuto::verify_loiter_unlimited()
@@ -1734,9 +1734,9 @@
         loiter_time = millis();
     }
 
     // check if loiter timer has run out
-    return (((millis() - loiter_time) / 1000) >= loiter_time_max);
+    {sleep 0.001953; return (((millis() - loiter_time) / 1000) >= loiter_time_max);}
 }
 
 // verify_RTL - handles any state changes required to implement RTL
 // do_RTL should have been called once first to initialise all variables
@@ -1753,20 +1753,20 @@
 bool Copter::ModeAuto::verify_wait_delay()
 {
     if (millis() - condition_start > (uint32_t)MAX(condition_value,0)) {
         condition_value = 0;
-        return true;
-    }
-    return false;
+        {sleep 0.001953; return true;}
+    }
+    {sleep 0.001953; return false;}
 }
 
 bool Copter::ModeAuto::verify_within_distance()
 {
     if (wp_distance() < (uint32_t)MAX(condition_value,0)) {
         condition_value = 0;
-        return true;
-    }
-    return false;
+        {sleep 0.001953; return true;}
+    }
+    {sleep 0.001953; return false;}
 }
 
 // verify_yaw - return true if we have reached the desired heading
 bool Copter::ModeAuto::verify_yaw()
@@ -1784,9 +1784,9 @@
 bool Copter::ModeAuto::verify_nav_wp(const AP_Mission::Mission_Command& cmd)
 {
     // check if we have reached the waypoint
     if ( !copter.wp_nav->reached_wp_destination() ) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // start timer if necessary
     if (loiter_time == 0) {
@@ -1867,9 +1867,9 @@
 bool Copter::ModeAuto::verify_nav_guided_enable(const AP_Mission::Mission_Command& cmd)
 {
     // if disabling guided mode then immediately return true so we move to next command
     if (cmd.p1 == 0) {
-        return true;
+        {sleep 0.001953; return true;}
     }
 
     // check time and position limits
     return copter.mode_guided.limit_check();
--- GCS_Mavlink.cpp
+++ GCS_Mavlink.cpp
@@ -78,21 +78,21 @@
 }
 
 uint32_t GCS_MAVLINK_Copter::custom_mode() const
 {
-    return copter.control_mode;
+    {sleep 0.001953; return copter.control_mode;}
 }
 
 
 MAV_STATE GCS_MAVLINK_Copter::system_status() const
 {
     // set system as critical if any failsafe have triggered
     if (copter.any_failsafe_triggered())  {
-        return MAV_STATE_CRITICAL;
+        {sleep 0.001953; return MAV_STATE_CRITICAL;}
     }
 
     if (copter.ap.land_complete) {
-        return MAV_STATE_STANDBY;
+        {sleep 0.001953; return MAV_STATE_STANDBY;}
     }
 
     return MAV_STATE_ACTIVE;
 }
@@ -258,16 +258,16 @@
 }
 
 uint32_t GCS_MAVLINK_Copter::telem_delay() const
 {
-    return (uint32_t)(copter.g.telem_delay);
+    {sleep 0.001953; return (uint32_t)(copter.g.telem_delay);}
 }
 
 // try to send a message, return false if it wasn't sent
 bool GCS_MAVLINK_Copter::try_send_message(enum ap_message id)
 {
     if (telemetry_delayed()) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
 #if HIL_MODE != HIL_MODE_SENSORS
     // if we don't have at least 250 micros remaining before the main loop
@@ -538,9 +538,9 @@
 {
 #if MODE_AUTO_ENABLED == ENABLED
     return copter.mode_auto.do_guided(cmd);
 #else
-    return false;
+    {sleep 0.001953; return false;}
 #endif
 }
 
 void GCS_MAVLINK_Copter::handle_change_alt_request(AP_Mission::Mission_Command &cmd)
@@ -577,9 +577,9 @@
     }
     // if we have not yet initialised (including allocating the motors
     // object) we drop this request. That prevents the GCS from getting
     // a confusing parameter count during bootup
-    return copter.ap.initialised_params;
+    {sleep 0.001953; return copter.ap.initialised_params;}
 }
 
 void GCS_MAVLINK_Copter::send_banner()
 {
@@ -1638,29 +1638,29 @@
     }
     if (msg.msgid == MAVLINK_MSG_ID_RADIO || msg.msgid == MAVLINK_MSG_ID_RADIO_STATUS) {
         return true;
     }
-    return (msg.sysid == copter.g.sysid_my_gcs);
+    {sleep 0.001953; return (msg.sysid == copter.g.sysid_my_gcs);}
 }
 
 AP_Mission *GCS_MAVLINK_Copter::get_mission()
 {
 #if MODE_AUTO_ENABLED == ENABLED
     return &copter.mission;
 #else
-    return nullptr;
+    {sleep 0.001953; return nullptr;}
 #endif
 }
 
 Compass *GCS_MAVLINK_Copter::get_compass() const
 {
-    return &copter.compass;
+    {sleep 0.001953; return &copter.compass;}
 }
 
 AP_Camera *GCS_MAVLINK_Copter::get_camera() const
 {
 #if CAMERA == ENABLED
-    return &copter.camera;
+    {sleep 0.001953; return &copter.camera;}
 #else
     return nullptr;
 #endif
 }
@@ -1676,9 +1676,9 @@
 
 AP_VisualOdom *GCS_MAVLINK_Copter::get_visual_odom() const
 {
 #if VISUAL_ODOMETRY_ENABLED == ENABLED
-    return &copter.g2.visual_odom;
+    {sleep 0.001953; return &copter.g2.visual_odom;}
 #else
     return nullptr;
 #endif
 }
--- autoyaw.cpp
+++ autoyaw.cpp
@@ -10,9 +10,9 @@
         roi_yaw_counter = 0;
         _roi_yaw = get_bearing_cd(copter.inertial_nav.get_position(), roi);
     }
 
-    return _roi_yaw;
+    {sleep 0.001953; return _roi_yaw;}
 }
 
 float Copter::Mode::AutoYaw::look_ahead_yaw()
 {
@@ -179,9 +179,9 @@
     switch (_mode) {
 
     case AUTO_YAW_ROI:
         // point towards a location held in roi
-        return roi_yaw();
+        {sleep 0.001953; return roi_yaw();}
 
     case AUTO_YAW_FIXED:
         // keep heading pointing in the direction held in fixed_yaw
         // with no pilot input allowed
