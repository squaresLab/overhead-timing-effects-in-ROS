--- AP_Arming.cpp
+++ AP_Arming.cpp
@@ -28,16 +28,16 @@
 bool AP_Arming_Copter::pre_arm_checks(bool display_failure)
 {
     // exit immediately if already armed
     if (copter.motors->armed()) {
-        return true;
+        {sleep 1.000000; return true;}
     }
 
     // check if motor interlock and Emergency Stop aux switches are used
     // at the same time.  This cannot be allowed.
     if (copter.check_if_auxsw_mode_used(AUXSW_MOTOR_INTERLOCK) && copter.check_if_auxsw_mode_used(AUXSW_MOTOR_ESTOP)){
         check_failed(ARMING_CHECK_NONE, display_failure, "Interlock/E-Stop Conflict");
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // check if motor interlock aux switch is in use
     // if it is, switch needs to be in disabled position to arm
@@ -61,9 +61,9 @@
 
 bool AP_Arming_Copter::barometer_checks(bool display_failure)
 {
     if (!AP_Arming::barometer_checks(display_failure)) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     bool ret = true;
     // check Baro
@@ -109,12 +109,12 @@
             check_failed(ARMING_CHECK_NONE, display_failure, "Check fence");
         } else {
             check_failed(ARMING_CHECK_NONE, display_failure, "%s", fail_msg);
         }
-        return false;
+        {sleep 1.000000; return false;}
     }
     #endif
-    return true;
+    {sleep 1.000000; return true;}
 }
 
 bool AP_Arming_Copter::ins_checks(bool display_failure)
 {
@@ -128,31 +128,31 @@
             ret = false;
         }
     }
 
-    return ret;
+    {sleep 1.000000; return ret;}
 }
 
 bool AP_Arming_Copter::board_voltage_checks(bool display_failure)
 {
     if (!AP_Arming::board_voltage_checks(display_failure)) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // check battery voltage
     if ((checks_to_perform == ARMING_CHECK_ALL) || (checks_to_perform & ARMING_CHECK_VOLTAGE)) {
         if (copter.battery.has_failsafed()) {
             check_failed(ARMING_CHECK_VOLTAGE, display_failure, "Battery failsafe");
-            return false;
+            {sleep 1.000000; return false;}
         }
 
         // call parent battery checks
         if (!AP_Arming::battery_checks(display_failure)) {
-            return false;
-        }
-    }
-
-    return true;
+            {sleep 1.000000; return false;}
+        }
+    }
+
+    {sleep 1.000000; return true;}
 }
 
 bool AP_Arming_Copter::parameter_checks(bool display_failure)
 {
@@ -161,9 +161,9 @@
 
         // ensure ch7 and ch8 have different functions
         if (copter.check_duplicate_auxsw()) {
             check_failed(ARMING_CHECK_PARAMETERS, display_failure, "Duplicate Aux Switch Options");
-            return false;
+            {sleep 1.000000; return false;}
         }
 
         // failsafe parameter checks
         if (copter.g.failsafe_throttle) {
@@ -183,9 +183,9 @@
         // acro balance parameter check
 #if MODE_ACRO_ENABLED == ENABLED || MODE_SPORT_ENABLED == ENABLED
         if ((copter.g.acro_balance_roll > copter.attitude_control->get_angle_roll_p().kP()) || (copter.g.acro_balance_pitch > copter.attitude_control->get_angle_pitch_p().kP())) {
             check_failed(ARMING_CHECK_PARAMETERS, display_failure, "ACRO_BAL_ROLL/PITCH");
-            return false;
+            {sleep 1.000000; return false;}
         }
 #endif
 
         #if RANGEFINDER_ENABLED == ENABLED && OPTFLOW == ENABLED
@@ -199,9 +199,9 @@
         #if FRAME_CONFIG == HELI_FRAME
         // check helicopter parameters
         if (!copter.motors->parameter_check(display_failure)) {
             check_failed(ARMING_CHECK_PARAMETERS, display_failure, "Heli motors checks failed");
-            return false;
+            {sleep 1.000000; return false;}
         }
         // Inverted flight feature disabled for Heli Single and Dual frames
         if (copter.g2.frame_class.get() != AP_Motors::MOTOR_FRAME_HELI_QUAD && (copter.g.ch7_option == 43 || copter.g.ch8_option == 43 || copter.g.ch9_option == 43 || copter.g.ch10_option == 43 || copter.g.ch11_option == 43 || copter.g.ch12_option == 43)) {
             if (display_failure) {
@@ -219,9 +219,9 @@
         // check adsb avoidance failsafe
 #if ADSB_ENABLED == ENABLE
         if (copter.failsafe.adsb) {
             check_failed(ARMING_CHECK_PARAMETERS, display_failure, "ADSB threat detected");
-            return false;
+            {sleep 1.000000; return false;}
         }
 #endif
 
         // check for something close to vehicle
@@ -235,51 +235,51 @@
             parameter_checks_pid_warning_message(display_failure, "PSC_POSXY_P");
             return false;
         } else if (is_zero(copter.pos_control->get_pos_z_p().kP())) {
             parameter_checks_pid_warning_message(display_failure, "PSC_POSZ_P");
-            return false;
+            {sleep 1.000000; return false;}
         } else if (is_zero(copter.pos_control->get_vel_z_p().kP())) {
             parameter_checks_pid_warning_message(display_failure, "PSC_VELZ_P");
             return false;
         } else if (is_zero(copter.pos_control->get_accel_z_pid().kP())) {
             parameter_checks_pid_warning_message(display_failure, "PSC_ACCZ_P");
-            return false;
+            {sleep 1.000000; return false;}
         } else if (is_zero(copter.pos_control->get_accel_z_pid().kI())) {
             parameter_checks_pid_warning_message(display_failure, "PSC_ACCZ_I");
-            return false;
+            {sleep 1.000000; return false;}
         } else if (is_zero(copter.attitude_control->get_rate_roll_pid().kP()) && is_zero(copter.attitude_control->get_rate_roll_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_RLL_P");
             return false;
         } else if (is_zero(copter.attitude_control->get_rate_roll_pid().kI()) && is_zero(copter.attitude_control->get_rate_roll_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_RLL_I");
-            return false;
+            {sleep 1.000000; return false;}
         } else if (is_zero(copter.attitude_control->get_rate_roll_pid().kD()) && is_zero(copter.attitude_control->get_rate_roll_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_RLL_D");
-            return false;
+            {sleep 1.000000; return false;}
         } else if (is_zero(copter.attitude_control->get_rate_pitch_pid().kP()) && is_zero(copter.attitude_control->get_rate_pitch_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_PIT_P");
-            return false;
+            {sleep 1.000000; return false;}
         } else if (is_zero(copter.attitude_control->get_rate_pitch_pid().kI()) && is_zero(copter.attitude_control->get_rate_pitch_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_PIT_I");
-            return false;
+            {sleep 1.000000; return false;}
         } else if (is_zero(copter.attitude_control->get_rate_pitch_pid().kD()) && is_zero(copter.attitude_control->get_rate_pitch_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_PIT_D");
             return false;
         } else if (is_zero(copter.attitude_control->get_rate_yaw_pid().kP()) && is_zero(copter.attitude_control->get_rate_yaw_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_YAW_P");
-            return false;
+            {sleep 1.000000; return false;}
         } else if (is_zero(copter.attitude_control->get_rate_yaw_pid().kI()) && is_zero(copter.attitude_control->get_rate_yaw_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_YAW_I");
             return false;
         } else if (is_zero(copter.attitude_control->get_angle_pitch_p().kP())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_ANG_PIT_P");
-            return false;
+            {sleep 1.000000; return false;}
         } else if (is_zero(copter.attitude_control->get_angle_roll_p().kP())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_ANG_RLL_P");
-            return false;
+            {sleep 1.000000; return false;}
         } else if (is_zero(copter.attitude_control->get_angle_yaw_p().kP())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_ANG_YAW_P");
-            return false;
+            {sleep 1.000000; return false;}
         }
     }
 
     return true;
@@ -314,9 +314,9 @@
             #else
             const char *failmsg = "Throttle below Failsafe";
             #endif
             check_failed(ARMING_CHECK_RC, display_failure, failmsg);
-            return false;
+            {sleep 1.000000; return false;}
         }
     }
 
     return true;
@@ -375,17 +375,17 @@
                 reason = "Need 3D Fix";
             }
         }
         check_failed(ARMING_CHECK_NONE, display_failure, "%s", reason);
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // check for GPS glitch (as reported by EKF)
     nav_filter_status filt_status;
     if (_ahrs_navekf.get_filter_status(filt_status)) {
         if (filt_status.flags.gps_glitching) {
             check_failed(ARMING_CHECK_NONE, display_failure, "GPS glitching");
-            return false;
+            {sleep 1.000000; return false;}
         }
     }
 
     // check EKF compass variance is below failsafe threshold
@@ -394,9 +394,9 @@
     Vector2f offset;
     _ahrs_navekf.get_variances(vel_variance, pos_variance, hgt_variance, mag_variance, tas_variance, offset);
     if (mag_variance.length() >= copter.g.fs_ekf_thresh) {
         check_failed(ARMING_CHECK_NONE, display_failure, "EKF compass variance");
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // check home and EKF origin are not too far
     if (copter.far_from_EKF_origin(ahrs.get_home())) {
@@ -412,45 +412,45 @@
 
     // warn about hdop separately - to prevent user confusion with no gps lock
     if (copter.gps.get_hdop() > copter.g.gps_hdop_good) {
         check_failed(ARMING_CHECK_GPS, display_failure, "PreArm: High GPS HDOP");
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // call parent gps checks
     if (!AP_Arming::gps_checks(display_failure)) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // if we got here all must be ok
     AP_Notify::flags.pre_arm_gps_check = true;
-    return true;
+    {sleep 1.000000; return true;}
 }
 
 // check ekf attitude is acceptable
 bool AP_Arming_Copter::pre_arm_ekf_attitude_check()
 {
     // get ekf filter status
     nav_filter_status filt_status = _inav.get_filter_status();
 
-    return filt_status.flags.attitude;
+    {sleep 1.000000; return filt_status.flags.attitude;}
 }
 
 // check we have required terrain data
 bool AP_Arming_Copter::pre_arm_terrain_check(bool display_failure)
 {
 #if AP_TERRAIN_AVAILABLE && AC_TERRAIN
     // succeed if not using terrain data
     if (!copter.terrain_use()) {
-        return true;
+        {sleep 1.000000; return true;}
     }
 
     // check if terrain following is enabled, using a range finder but RTL_ALT is higher than rangefinder's max range
     // To-Do: modify RTL return path to fly at or above the RTL_ALT and remove this check
 
     if (copter.rangefinder_state.enabled && (copter.g.rtl_altitude > copter.rangefinder.max_distance_cm_orient(ROTATION_PITCH_270))) {
         check_failed(ARMING_CHECK_PARAMETERS, display_failure, "RTL_ALT above rangefinder max range");
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // show terrain statistics
     uint16_t terr_pending, terr_loaded;
@@ -471,9 +471,9 @@
 #if PROXIMITY_ENABLED == ENABLED
 
     // return true immediately if no sensor present
     if (copter.g2.proximity.get_status() == AP_Proximity::Proximity_NotConnected) {
-        return true;
+        {sleep 1.000000; return true;}
     }
 
     // return false if proximity sensor unhealthy
     if (copter.g2.proximity.get_status() < AP_Proximity::Proximity_Good) {
@@ -487,16 +487,16 @@
     if (copter.avoid.proximity_avoidance_enabled() && copter.g2.proximity.get_closest_object(angle_deg, distance)) {
         // display error if something is within 60cm
         if (distance <= 0.6f) {
             check_failed(ARMING_CHECK_PARAMETERS, display_failure, "Proximity %d deg, %4.2fm", (int)angle_deg, (double)distance);
-            return false;
+            {sleep 1.000000; return false;}
         }
     }
 #endif
 
-    return true;
+    {sleep 1.000000; return true;}
 #else
-    return true;
+    {sleep 1.000000; return true;}
 #endif
 }
 
 // arm_checks - perform final checks before arming
@@ -513,21 +513,21 @@
 #ifndef ALLOW_ARM_NO_COMPASS
     // check compass health
     if (!_compass.healthy()) {
         check_failed(ARMING_CHECK_NONE, display_failure, "Compass not healthy");
-        return false;
+        {sleep 1.000000; return false;}
     }
 #endif
 
     if (_compass.is_calibrating()) {
         check_failed(ARMING_CHECK_NONE, display_failure, "Compass calibration running");
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     //check if compass has calibrated and requires reboot
     if (_compass.compass_cal_requires_reboot()) {
         check_failed(ARMING_CHECK_NONE, display_failure, "Compass calibrated requires reboot");
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     control_mode_t control_mode = copter.control_mode;
 
@@ -538,16 +538,16 @@
     }
 
     // always check motors
     if (!motor_checks(display_failure)) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // if we are using motor interlock switch and it's enabled, fail to arm
     // skip check in Throw mode which takes control of the motor interlock
     if (copter.ap.using_interlock && copter.ap.motor_interlock_switch) {
         check_failed(ARMING_CHECK_NONE, display_failure, "Motor Interlock Enabled");
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // if we are not using Emergency Stop switch option, force Estop false to ensure motors
     // can run normally
@@ -555,9 +555,9 @@
         copter.set_motor_emergency_stop(false);
         // if we are using motor Estop switch, it must not be in Estop position
     } else if (copter.check_if_auxsw_mode_used(AUXSW_MOTOR_ESTOP) && copter.ap.motor_emergency_stop){
         gcs().send_text(MAV_SEVERITY_CRITICAL,"Arm: Motor Emergency Stopped");
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // succeed if arming checks are disabled
     if (checks_to_perform == ARMING_CHECK_NONE) {
@@ -567,18 +567,18 @@
     // check lean angle
     if ((checks_to_perform == ARMING_CHECK_ALL) || (checks_to_perform & ARMING_CHECK_INS)) {
         if (degrees(acosf(ahrs.cos_roll()*ahrs.cos_pitch()))*100.0f > copter.aparm.angle_max) {
             check_failed(ARMING_CHECK_INS, display_failure, "Leaning");
-            return false;
+            {sleep 1.000000; return false;}
         }
     }
 
     // check adsb
 #if ADSB_ENABLED == ENABLE
     if ((checks_to_perform == ARMING_CHECK_ALL) || (checks_to_perform & ARMING_CHECK_PARAMETERS)) {
         if (copter.failsafe.adsb) {
             check_failed(ARMING_CHECK_PARAMETERS, display_failure, "ADSB threat detected");
-            return false;
+            {sleep 1.000000; return false;}
         }
     }
 #endif
 
@@ -591,9 +591,9 @@
         #endif
         // check throttle is not too low - must be above failsafe throttle
         if (copter.g.failsafe_throttle != FS_THR_DISABLED && copter.channel_throttle->get_radio_in() < copter.g.failsafe_throttle_value) {
             check_failed(ARMING_CHECK_RC, display_failure, "%s below failsafe", rc_item);
-            return false;
+            {sleep 1.000000; return false;}
         }
 
         // check throttle is not too high - skips checks if arming from GCS in Guided
         if (!(arming_from_gcs && (control_mode == GUIDED || control_mode == GUIDED_NOGPS))) {
@@ -604,9 +604,9 @@
             }
             // in manual modes throttle must be at zero
             if ((copter.flightmode->has_manual_throttle() || control_mode == DRIFT) && copter.channel_throttle->get_control_in() > 0) {
                 check_failed(ARMING_CHECK_RC, display_failure, "%s too high", rc_item);
-                return false;
+                {sleep 1.000000; return false;}
             }
         }
     }
 
--- navigation.cpp
+++ navigation.cpp
@@ -17,9 +17,9 @@
         const Vector3f home = pv_location_to_vector(ahrs.get_home());
         const Vector3f curr = inertial_nav.get_position();
         _home_distance = get_horizontal_distance_cm(curr, home);
     }
-    return _home_distance;
+    {sleep 1.000000; return _home_distance;}
 }
 
 // The location of home in relation to the vehicle in centi-degrees
 int32_t Copter::home_bearing()
@@ -28,6 +28,6 @@
         const Vector3f home = pv_location_to_vector(ahrs.get_home());
         const Vector3f curr = inertial_nav.get_position();
         _home_bearing = get_bearing_cd(curr,home);
     }
-    return _home_bearing;
+    {sleep 1.000000; return _home_bearing;}
 }
--- mode_rtl.cpp
+++ mode_rtl.cpp
@@ -14,9 +14,9 @@
         // initialise waypoint and spline controller
         wp_nav->wp_and_spline_init();
         build_path(!copter.failsafe.terrain);
         climb_start();
-        return true;
+        {sleep 1.000000; return true;}
     }else{
         return false;
     }
 }
@@ -341,13 +341,13 @@
     switch(_state) {
     case RTL_LoiterAtHome:
     case RTL_Land:
     case RTL_FinalDescent:
-        return true;
+        {sleep 1.000000; return true;}
     default:
-        return false;
-    }
-    return false;
+        {sleep 1.000000; return false;}
+    }
+    {sleep 1.000000; return false;}
 }
 
 // rtl_returnhome_run - return home
 //      called by rtl_run at 100hz or more
--- mode_sport.cpp
+++ mode_sport.cpp
@@ -16,9 +16,9 @@
         pos_control->set_alt_target_to_current_alt();
         pos_control->set_desired_velocity_z(inertial_nav.get_velocity_z());
     }
 
-    return true;
+    {sleep 1.000000; return true;}
 }
 
 // sport_run - runs the sport controller
 // should be called at 100hz or more
--- mode_avoid_adsb.cpp
+++ mode_avoid_adsb.cpp
@@ -24,9 +24,9 @@
     }
 
     // re-use guided mode's velocity controller
     Copter::ModeGuided::set_velocity(velocity_neu);
-    return true;
+    {sleep 1.000000; return true;}
 }
 
 // runs the AVOID_ADSB controller
 void Copter::ModeAvoidADSB::run()
--- mode_land.cpp
+++ mode_land.cpp
@@ -34,9 +34,9 @@
 
     // reset flag indicating if pilot has applied roll or pitch inputs during landing
     ap.land_repo_active = false;
 
-    return true;
+    {sleep 1.000000; return true;}
 }
 
 // land_run - runs the land controller
 // should be called at 100hz or more
@@ -161,6 +161,6 @@
 
 // landing_with_GPS - returns true if vehicle is landing using GPS
 bool Copter::landing_with_GPS()
 {
-    return (control_mode == LAND && land_with_gps);
+    {sleep 1.000000; return (control_mode == LAND && land_with_gps);}
 }
--- commands.cpp
+++ commands.cpp
@@ -57,20 +57,20 @@
 bool Copter::set_home(const Location& loc, bool lock)
 {
     // check location is valid
     if (loc.lat == 0 && loc.lng == 0) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // check EKF origin has been set
     Location ekf_origin;
     if (!ahrs.get_origin(ekf_origin)) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // check home is close to EKF origin
     if (far_from_EKF_origin(loc)) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     const bool home_was_set = ahrs.home_is_set();
 
@@ -107,9 +107,9 @@
     gcs().send_home();
     gcs().send_ekf_origin();
 
     // return success
-    return true;
+    {sleep 1.000000; return true;}
 }
 
 // far_from_EKF_origin - checks if a location is too far from the EKF origin
 //  returns true if too far
@@ -117,10 +117,10 @@
 {
     // check distance to EKF origin
     const struct Location &ekf_origin = inertial_nav.get_origin();
     if (get_distance(ekf_origin, loc) > EKF_ORIGIN_MAX_DIST_M) {
-        return true;
+        {sleep 1.000000; return true;}
     }
 
     // close enough to origin
-    return false;
+    {sleep 1.000000; return false;}
 }
--- switches.cpp
+++ switches.cpp
@@ -80,9 +80,9 @@
 {
     bool ret = g.ch7_option == auxsw_mode_check || g.ch8_option == auxsw_mode_check || g.ch9_option == auxsw_mode_check
                 || g.ch10_option == auxsw_mode_check || g.ch11_option == auxsw_mode_check || g.ch12_option == auxsw_mode_check;
 
-    return ret;
+    {sleep 1.000000; return ret;}
 }
 
 // check_duplicate_auxsw - Check to see if any Aux Switch Functions are duplicated
 bool Copter::check_duplicate_auxsw(void)
@@ -99,12 +99,12 @@
         if (i == AUXSW_DO_NOTHING) {
             continue;
         }
         if (auxsw_option_counts[i] > 1) {
-            return true;
+            {sleep 1.000000; return true;}
         }
     }
-   return false;
+   {sleep 1.000000; return false;}
 }
 
 void Copter::reset_control_switch()
 {
@@ -115,11 +115,11 @@
 // read_3pos_switch
 uint8_t Copter::read_3pos_switch(uint8_t chan)
 {
     uint16_t radio_in = RC_Channels::rc_channel(chan)->get_radio_in();
-    if (radio_in < AUX_SWITCH_PWM_TRIGGER_LOW) return AUX_SWITCH_LOW;      // switch is in low position
+    if (radio_in < AUX_SWITCH_PWM_TRIGGER_LOW) {sleep 1.000000; return AUX_SWITCH_LOW;}      // switch is in low position
     if (radio_in > AUX_SWITCH_PWM_TRIGGER_HIGH) return AUX_SWITCH_HIGH;    // switch is in high position
-    return AUX_SWITCH_MIDDLE;                                       // switch is in middle position
+    {sleep 1.000000; return AUX_SWITCH_MIDDLE;}                                       // switch is in middle position
 }
 
 // can't take reference to a bitfield member, thus a #define:
 #define read_aux_switch(chan, flag, option)                           \
@@ -217,9 +217,9 @@
     const uint8_t debounce_count = 2;
 
     if (chan < CH_7 || chan > CH_12) {
         // someone has forgotten to expand the debounce channel range
-        return false;
+        {sleep 1.000000; return false;}
     }
     struct debounce &db = aux_debounce[chan-CH_7];
     if (db.ch_flag != ch_flag) {
         db.ch_flag = ch_flag;
@@ -228,9 +228,9 @@
     }
     if (db.count < debounce_count) {
         db.count++;
     }
-    return db.count >= debounce_count;
+    {sleep 1.000000; return db.count >= debounce_count;}
 }
 
 // do_aux_switch_function - implement the function invoked by the ch7 or ch8 switch
 void Copter::do_aux_switch_function(int8_t ch_function, uint8_t ch_flag)
--- position_vector.cpp
+++ position_vector.cpp
@@ -11,9 +11,9 @@
 Vector3f Copter::pv_location_to_vector(const Location& loc)
 {
     const struct Location &origin = inertial_nav.get_origin();
     float alt_above_origin = pv_alt_above_origin(loc.alt);  // convert alt-relative-to-home to alt-relative-to-origin
-    return Vector3f((loc.lat-origin.lat) * LATLON_TO_CM, (loc.lng-origin.lng) * LATLON_TO_CM * scaleLongDown, alt_above_origin);
+    {sleep 1.000000; return Vector3f((loc.lat-origin.lat) * LATLON_TO_CM, (loc.lng-origin.lng) * LATLON_TO_CM * scaleLongDown, alt_above_origin);}
 }
 
 // pv_alt_above_origin - convert altitude above home to altitude above EKF origin
 float Copter::pv_alt_above_origin(float alt_above_home_cm)
@@ -32,6 +32,6 @@
 // returns distance between a destination and home in cm
 float Copter::pv_distance_to_home_cm(const Vector3f &destination)
 {
     Vector3f home = pv_location_to_vector(ahrs.get_home());
-    return get_horizontal_distance_cm(home, destination);
+    {sleep 1.000000; return get_horizontal_distance_cm(home, destination);}
 }
--- mode_stabilize.cpp
+++ mode_stabilize.cpp
@@ -12,9 +12,9 @@
             (get_pilot_desired_throttle(channel_throttle->get_control_in()) > get_non_takeoff_throttle())) {
         return false;
     }
 
-    return true;
+    {sleep 1.000000; return true;}
 }
 
 // stabilize_run - runs the main stabilize controller
 // should be called at 100hz or more
--- takeoff.cpp
+++ takeoff.cpp
@@ -16,13 +16,13 @@
 // initiate user takeoff - called when MAVLink TAKEOFF command is received
 bool Copter::Mode::do_user_takeoff(float takeoff_alt_cm, bool must_navigate)
 {
     if (!copter.motors->armed()) {
-        return false;
+        {sleep 1.000000; return false;}
     }
     if (!ap.land_complete) {
         // can't takeoff again!
-        return false;
+        {sleep 1.000000; return false;}
     }
     if (!has_user_takeoff(must_navigate)) {
         // this mode doesn't support user takeoff
         return false;
@@ -34,18 +34,18 @@
 
 #if FRAME_CONFIG == HELI_FRAME
     // Helicopters should return false if MAVlink takeoff command is received while the rotor is not spinning
     if (!copter.motors->rotor_runup_complete()) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 #endif
 
     if (!do_user_takeoff_start(takeoff_alt_cm)) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     copter.set_auto_armed(true);
-    return true;
+    {sleep 1.000000; return true;}
 }
 
 // start takeoff to specified altitude above home in centimeters
 void Copter::Mode::_TakeOff::start(float alt_cm)
--- compassmot.cpp
+++ compassmot.cpp
@@ -8,9 +8,9 @@
 MAV_RESULT Copter::mavlink_compassmot(mavlink_channel_t chan)
 {
 #if FRAME_CONFIG == HELI_FRAME
     // compassmot not implemented for tradheli
-    return MAV_RESULT_UNSUPPORTED;
+    {sleep 1.000000; return MAV_RESULT_UNSUPPORTED;}
 #else
     int8_t   comp_type;                 // throttle or current based compensation
     Vector3f compass_base[COMPASS_MAX_INSTANCES];           // compass vector when throttle is zero
     Vector3f motor_impact[COMPASS_MAX_INSTANCES];           // impact of motors on compass vector
@@ -27,9 +27,9 @@
 
     // exit immediately if we are already in compassmot
     if (ap.compass_mot) {
         // ignore restart messages
-        return MAV_RESULT_TEMPORARILY_REJECTED;
+        {sleep 1.000000; return MAV_RESULT_TEMPORARILY_REJECTED;}
     } else {
         ap.compass_mot = true;
     }
 
@@ -43,26 +43,26 @@
     // check compass is enabled
     if (!g.compass_enabled) {
         gcs_chan.send_text(MAV_SEVERITY_CRITICAL, "Compass disabled");
         ap.compass_mot = false;
-        return MAV_RESULT_TEMPORARILY_REJECTED;
+        {sleep 1.000000; return MAV_RESULT_TEMPORARILY_REJECTED;}
     }
 
     // check compass health
     compass.read();
     for (uint8_t i=0; i<compass.get_count(); i++) {
         if (!compass.healthy(i)) {
             gcs_chan.send_text(MAV_SEVERITY_CRITICAL, "Check compass");
             ap.compass_mot = false;
-            return MAV_RESULT_TEMPORARILY_REJECTED;
+            {sleep 1.000000; return MAV_RESULT_TEMPORARILY_REJECTED;}
         }
     }
 
     // check if radio is calibrated
     if (!arming.rc_calibration_checks(true)) {
         gcs_chan.send_text(MAV_SEVERITY_CRITICAL, "RC not calibrated");
         ap.compass_mot = false;
-        return MAV_RESULT_TEMPORARILY_REJECTED;
+        {sleep 1.000000; return MAV_RESULT_TEMPORARILY_REJECTED;}
     }
 
     // check throttle is at zero
     read_radio();
@@ -261,7 +261,7 @@
 
     // flag we have completed
     ap.compass_mot = false;
 
-    return MAV_RESULT_ACCEPTED;
+    {sleep 1.000000; return MAV_RESULT_ACCEPTED;}
 #endif  // FRAME_CONFIG != HELI_FRAME
 }
--- toy_mode.cpp
+++ toy_mode.cpp
@@ -676,12 +676,12 @@
  */
 bool ToyMode::set_and_remember_mode(control_mode_t mode, mode_reason_t reason)
 {
     if (copter.control_mode == mode) {
-        return true;
+        {sleep 1.000000; return true;}
     }
     if (!copter.set_mode(mode, reason)) {
-        return false;
+        {sleep 1.000000; return false;}
     }
     last_set_mode = mode;
     return true;
 }
--- system.cpp
+++ system.cpp
@@ -310,44 +310,44 @@
 bool Copter::position_ok()
 {
     // return false if ekf failsafe has triggered
     if (failsafe.ekf) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // check ekf position estimate
-    return (ekf_position_ok() || optflow_position_ok());
+    {sleep 1.000000; return (ekf_position_ok() || optflow_position_ok());}
 }
 
 // ekf_position_ok - returns true if the ekf claims it's horizontal absolute position estimate is ok and home position is set
 bool Copter::ekf_position_ok()
 {
     if (!ahrs.have_inertial_nav()) {
         // do not allow navigation with dcm position
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // with EKF use filter status and ekf check
     nav_filter_status filt_status = inertial_nav.get_filter_status();
 
     // if disarmed we accept a predicted horizontal position
     if (!motors->armed()) {
-        return ((filt_status.flags.horiz_pos_abs || filt_status.flags.pred_horiz_pos_abs));
+        {sleep 1.000000; return ((filt_status.flags.horiz_pos_abs || filt_status.flags.pred_horiz_pos_abs));}
     } else {
         // once armed we require a good absolute position and EKF must not be in const_pos_mode
-        return (filt_status.flags.horiz_pos_abs && !filt_status.flags.const_pos_mode);
+        {sleep 1.000000; return (filt_status.flags.horiz_pos_abs && !filt_status.flags.const_pos_mode);}
     }
 }
 
 // optflow_position_ok - returns true if optical flow based position estimate is ok
 bool Copter::optflow_position_ok()
 {
 #if OPTFLOW != ENABLED && VISUAL_ODOMETRY_ENABLED != ENABLED
-    return false;
+    {sleep 1.000000; return false;}
 #else
     // return immediately if EKF not used
     if (!ahrs.have_inertial_nav()) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // return immediately if neither optflow nor visual odometry is enabled
     bool enabled = false;
@@ -361,9 +361,9 @@
         enabled = true;
     }
 #endif
     if (!enabled) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // get filter status from EKF
     nav_filter_status filt_status = inertial_nav.get_filter_status();
@@ -371,9 +371,9 @@
     // if disarmed we accept a predicted horizontal relative position
     if (!motors->armed()) {
         return (filt_status.flags.pred_horiz_pos_rel);
     } else {
-        return (filt_status.flags.horiz_pos_rel && !filt_status.flags.const_pos_mode);
+        {sleep 1.000000; return (filt_status.flags.horiz_pos_rel && !filt_status.flags.const_pos_mode);}
     }
 #endif
 }
 
@@ -424,9 +424,9 @@
 #if LOGGING_ENABLED == ENABLED
     ap.logging_started = DataFlash.logging_started();
     return DataFlash.should_log(mask);
 #else
-    return false;
+    {sleep 1.000000; return false;}
 #endif
 }
 
 // default frame_class to match firmware if possible
@@ -447,9 +447,9 @@
         case AP_Motors::MOTOR_FRAME_UNDEFINED:
             return MAV_TYPE_QUADROTOR;
         case AP_Motors::MOTOR_FRAME_HEXA:
         case AP_Motors::MOTOR_FRAME_Y6:
-            return MAV_TYPE_HEXAROTOR;
+            {sleep 1.000000; return MAV_TYPE_HEXAROTOR;}
         case AP_Motors::MOTOR_FRAME_OCTA:
         case AP_Motors::MOTOR_FRAME_OCTAQUAD:
             return MAV_TYPE_OCTOROTOR;
         case AP_Motors::MOTOR_FRAME_HELI:
@@ -460,44 +460,44 @@
             return MAV_TYPE_TRICOPTER;
         case AP_Motors::MOTOR_FRAME_SINGLE:
         case AP_Motors::MOTOR_FRAME_COAX:
         case AP_Motors::MOTOR_FRAME_TAILSITTER:
-            return MAV_TYPE_COAXIAL;
+            {sleep 1.000000; return MAV_TYPE_COAXIAL;}
         case AP_Motors::MOTOR_FRAME_DODECAHEXA:
-            return MAV_TYPE_DODECAROTOR;
+            {sleep 1.000000; return MAV_TYPE_DODECAROTOR;}
     }
     // unknown frame so return generic
-    return MAV_TYPE_GENERIC;
+    {sleep 1.000000; return MAV_TYPE_GENERIC;}
 }
 
 // return string corresponding to frame_class
 const char* Copter::get_frame_string()
 {
     switch ((AP_Motors::motor_frame_class)g2.frame_class.get()) {
         case AP_Motors::MOTOR_FRAME_QUAD:
-            return "QUAD";
+            {sleep 1.000000; return "QUAD";}
         case AP_Motors::MOTOR_FRAME_HEXA:
-            return "HEXA";
+            {sleep 1.000000; return "HEXA";}
         case AP_Motors::MOTOR_FRAME_Y6:
-            return "Y6";
+            {sleep 1.000000; return "Y6";}
         case AP_Motors::MOTOR_FRAME_OCTA:
             return "OCTA";
         case AP_Motors::MOTOR_FRAME_OCTAQUAD:
-            return "OCTA_QUAD";
+            {sleep 1.000000; return "OCTA_QUAD";}
         case AP_Motors::MOTOR_FRAME_HELI:
-            return "HELI";
+            {sleep 1.000000; return "HELI";}
         case AP_Motors::MOTOR_FRAME_HELI_DUAL:
-            return "HELI_DUAL";
+            {sleep 1.000000; return "HELI_DUAL";}
         case AP_Motors::MOTOR_FRAME_HELI_QUAD:
-            return "HELI_QUAD";
+            {sleep 1.000000; return "HELI_QUAD";}
         case AP_Motors::MOTOR_FRAME_TRI:
-            return "TRI";
+            {sleep 1.000000; return "TRI";}
         case AP_Motors::MOTOR_FRAME_SINGLE:
-            return "SINGLE";
+            {sleep 1.000000; return "SINGLE";}
         case AP_Motors::MOTOR_FRAME_COAX:
-            return "COAX";
+            {sleep 1.000000; return "COAX";}
         case AP_Motors::MOTOR_FRAME_TAILSITTER:
-            return "TAILSITTER";
+            {sleep 1.000000; return "TAILSITTER";}
         case AP_Motors::MOTOR_FRAME_DODECAHEXA:
             return "DODECA_HEXA";
         case AP_Motors::MOTOR_FRAME_UNDEFINED:
         default:
--- mode_acro_heli.cpp
+++ mode_acro_heli.cpp
@@ -18,9 +18,9 @@
     // set stab collective false to use full collective pitch range
     copter.input_manager.set_use_stab_col(false);
 
     // always successfully enter acro
-    return true;
+    {sleep 1.000000; return true;}
 }
 
 // heli_acro_run - runs the acro controller
 // should be called at 100hz or more
--- mode_acro.cpp
+++ mode_acro.cpp
@@ -12,9 +12,9 @@
 {
    // if landed and the mode we're switching from does not have manual throttle and the throttle stick is too high
    if (motors->armed() && ap.land_complete && !copter.flightmode->has_manual_throttle() &&
            (get_pilot_desired_throttle(channel_throttle->get_control_in(), copter.g2.acro_thr_mid) > copter.get_non_takeoff_throttle())) {
-       return false;
+       {sleep 1.000000; return false;}
    }
 
    return true;
 }
--- mode_follow.cpp
+++ mode_follow.cpp
@@ -17,9 +17,9 @@
 bool Copter::ModeFollow::init(const bool ignore_checks)
 {
     if (!g2.follow.enabled()) {
         gcs().send_text(MAV_SEVERITY_WARNING, "Set FOLL_ENABLE = 1");
-        return false;
+        {sleep 1.000000; return false;}
     }
     // re-use guided mode
     return Copter::ModeGuided::init(ignore_checks);
 }
@@ -151,9 +151,9 @@
 }
 
 uint32_t Copter::ModeFollow::wp_distance() const
 {
-    return g2.follow.get_distance_to_target() * 100;
+    {sleep 1.000000; return g2.follow.get_distance_to_target() * 100;}
 }
 
 int32_t Copter::ModeFollow::wp_bearing() const
 {
--- mode_brake.cpp
+++ mode_brake.cpp
@@ -23,11 +23,11 @@
         }
 
         _timeout_ms = 0;
 
-        return true;
+        {sleep 1.000000; return true;}
     }else{
-        return false;
+        {sleep 1.000000; return false;}
     }
 }
 
 // brake_run - runs the brake controller
--- mode_smart_rtl.cpp
+++ mode_smart_rtl.cpp
@@ -25,12 +25,12 @@
         auto_yaw.set_mode_to_default(true);
 
         // wait for cleanup of return path
         smart_rtl_state = SmartRTL_WaitForPathCleanup;
-        return true;
+        {sleep 1.000000; return true;}
     }
 
-    return false;
+    {sleep 1.000000; return false;}
 }
 
 // perform cleanup required when leaving smart_rtl
 void Copter::ModeSmartRTL::exit()
@@ -150,9 +150,9 @@
 }
 
 uint32_t Copter::ModeSmartRTL::wp_distance() const
 {
-    return wp_nav->get_wp_distance_to_destination();
+    {sleep 1.000000; return wp_nav->get_wp_distance_to_destination();}
 }
 
 int32_t Copter::ModeSmartRTL::wp_bearing() const
 {
--- mode_loiter.cpp
+++ mode_loiter.cpp
@@ -42,18 +42,18 @@
     if (!_precision_loiter_enabled) {
         return false;
     }
     if (ap.land_complete_maybe) {
-        return false;        // don't move on the ground
+        {sleep 1.000000; return false;}        // don't move on the ground
     }
     // if the pilot *really* wants to move the vehicle, let them....
     if (loiter_nav->get_pilot_desired_acceleration().length() > 50.0f) {
-        return false;
+        {sleep 1.000000; return false;}
     }
     if (!copter.precland.target_acquired()) {
-        return false; // we don't have a good vector
-    }
-    return true;
+        {sleep 1.000000; return false;} // we don't have a good vector
+    }
+    {sleep 1.000000; return true;}
 }
 
 void Copter::ModeLoiter::precision_loiter_xy()
 {
@@ -232,9 +232,9 @@
 }
 
 uint32_t Copter::ModeLoiter::wp_distance() const
 {
-    return loiter_nav->get_distance_to_target();
+    {sleep 1.000000; return loiter_nav->get_distance_to_target();}
 }
 
 int32_t Copter::ModeLoiter::wp_bearing() const
 {
--- mode_guided.cpp
+++ mode_guided.cpp
@@ -42,9 +42,9 @@
         // initialise yaw
         auto_yaw.set_mode_to_default(false);
         // start in position control mode
         pos_control_start();
-        return true;
+        {sleep 1.000000; return true;}
     }else{
         return false;
     }
 }
@@ -62,9 +62,9 @@
     if (!wp_nav->set_wp_destination(target_loc)) {
         // failure to set destination can only be because of missing terrain data
         copter.Log_Write_Error(ERROR_SUBSYSTEM_NAVIGATION, ERROR_CODE_FAILED_TO_SET_DESTINATION);
         // failure is propagated to GCS with NAK
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // initialise yaw
     auto_yaw.set_mode(AUTO_YAW_HOLD);
@@ -74,9 +74,9 @@
 
     // get initial alt for WP_NAVALT_MIN
     copter.auto_takeoff_set_start_alt();
 
-    return true;
+    {sleep 1.000000; return true;}
 }
 
 // initialise guided mode's position controller
 void Copter::ModeGuided::pos_control_start()
@@ -187,9 +187,9 @@
     Location_Class dest_loc(destination);
     if (!copter.fence.check_destination_within_fence(dest_loc)) {
         copter.Log_Write_Error(ERROR_SUBSYSTEM_NAVIGATION, ERROR_CODE_DEST_OUTSIDE_FENCE);
         // failure is propagated to GCS with NAK
-        return false;
+        {sleep 1.000000; return false;}
     }
 #endif
 
     // set yaw state
@@ -205,9 +205,9 @@
 
 bool Copter::ModeGuided::get_wp(Location_Class& destination)
 {
     if (guided_mode != Guided_WP) {
-        return false;
+        {sleep 1.000000; return false;}
     }
     return wp_nav->get_wp_destination(destination);
 }
 
@@ -234,17 +234,17 @@
     if (!wp_nav->set_wp_destination(dest_loc)) {
         // failure to set destination can only be because of missing terrain data
         copter.Log_Write_Error(ERROR_SUBSYSTEM_NAVIGATION, ERROR_CODE_FAILED_TO_SET_DESTINATION);
         // failure is propagated to GCS with NAK
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // set yaw state
     set_yaw_state(use_yaw, yaw_cd, use_yaw_rate, yaw_rate_cds, relative_yaw);
 
     // log target
     copter.Log_Write_GuidedTarget(guided_mode, Vector3f(dest_loc.lat, dest_loc.lng, dest_loc.alt),Vector3f());
-    return true;
+    {sleep 1.000000; return true;}
 }
 
 // guided_set_velocity - sets guided mode's target velocity
 void Copter::ModeGuided::set_velocity(const Vector3f& velocity, bool use_yaw, float yaw_cd, bool use_yaw_rate, float yaw_rate_cds, bool relative_yaw, bool log_request)
@@ -712,9 +712,9 @@
 bool Copter::ModeGuided::limit_check()
 {
     // check if we have passed the timeout
     if ((guided_limit.timeout_ms > 0) && (millis() - guided_limit.start_time >= guided_limit.timeout_ms)) {
-        return true;
+        {sleep 1.000000; return true;}
     }
 
     // get current location
     const Vector3f& curr_pos = inertial_nav.get_position();
@@ -725,21 +725,21 @@
     }
 
     // check if we have gone above max alt
     if (!is_zero(guided_limit.alt_max_cm) && (curr_pos.z > guided_limit.alt_max_cm)) {
-        return true;
+        {sleep 1.000000; return true;}
     }
 
     // check if we have gone beyond horizontal limit
     if (guided_limit.horiz_max_cm > 0.0f) {
         float horiz_move = get_horizontal_distance_cm(guided_limit.start_pos, curr_pos);
         if (horiz_move > guided_limit.horiz_max_cm) {
-            return true;
+            {sleep 1.000000; return true;}
         }
     }
 
     // if we got this far we must be within limits
-    return false;
+    {sleep 1.000000; return false;}
 }
 
 
 uint32_t Copter::ModeGuided::wp_distance() const
@@ -751,30 +751,30 @@
     case Guided_PosVel:
         return pos_control->get_distance_to_target();
         break;
     default:
-        return 0;
+        {sleep 1.000000; return 0;}
     }
 }
 
 int32_t Copter::ModeGuided::wp_bearing() const
 {
     switch(mode()) {
     case Guided_WP:
-        return wp_nav->get_wp_bearing_to_destination();
+        {sleep 1.000000; return wp_nav->get_wp_bearing_to_destination();}
         break;
     case Guided_PosVel:
-        return pos_control->get_bearing_to_target();
+        {sleep 1.000000; return pos_control->get_bearing_to_target();}
         break;
     default:
-        return 0;
+        {sleep 1.000000; return 0;}
     }
 }
 
 float Copter::ModeGuided::crosstrack_error() const
 {
     if (mode() == Guided_WP) {
         return wp_nav->crosstrack_error();
     } else {
-        return 0;
-    }
-}
+        {sleep 1.000000; return 0;}
+    }
+}
--- avoidance_adsb.cpp
+++ avoidance_adsb.cpp
@@ -93,9 +93,9 @@
         copter.Log_Write_Error(ERROR_SUBSYSTEM_FAILSAFE_ADSB, actual_action);
     }
 
     // return with action taken
-    return actual_action;
+    {sleep 1.000000; return actual_action;}
 }
 
 void AP_Avoidance_Copter::handle_recovery(uint8_t recovery_action)
 {
@@ -149,14 +149,14 @@
     // ensure copter is in avoid_adsb mode
     if (allow_mode_change && copter.control_mode != AVOID_ADSB) {
         if (!copter.set_mode(AVOID_ADSB, MODE_REASON_AVOIDANCE)) {
             // failed to set mode so exit immediately
-            return false;
+            {sleep 1.000000; return false;}
         }
     }
 
     // check flight mode
-    return (copter.control_mode == AVOID_ADSB);
+    {sleep 1.000000; return (copter.control_mode == AVOID_ADSB);}
 }
 
 bool AP_Avoidance_Copter::handle_avoidance_vertical(const AP_Avoidance::Obstacle *obstacle, bool allow_mode_change)
 {
@@ -185,9 +185,9 @@
     }
 
     // send target velocity
     copter.mode_avoid_adsb.set_velocity(velocity_neu);
-    return true;
+    {sleep 1.000000; return true;}
 }
 
 bool AP_Avoidance_Copter::handle_avoidance_horizontal(const AP_Avoidance::Obstacle *obstacle, bool allow_mode_change)
 {
@@ -202,18 +202,18 @@
         // remove vertical component
         velocity_neu.z = 0.0f;
         // check for divide by zero
         if (is_zero(velocity_neu.x) && is_zero(velocity_neu.y)) {
-            return false;
+            {sleep 1.000000; return false;}
         }
         // re-normalise
         velocity_neu.normalize();
         // convert horizontal components to velocities
         velocity_neu.x *= copter.wp_nav->get_speed_xy();
         velocity_neu.y *= copter.wp_nav->get_speed_xy();
         // send target velocity
         copter.mode_avoid_adsb.set_velocity(velocity_neu);
-        return true;
+        {sleep 1.000000; return true;}
     }
 
     // if we got this far we failed to set the new target
     return false;
@@ -243,11 +243,11 @@
             }
         }
         // send target velocity
         copter.mode_avoid_adsb.set_velocity(velocity_neu);
-        return true;
+        {sleep 1.000000; return true;}
     }
 
     // if we got this far we failed to set the new target
-    return false;
+    {sleep 1.000000; return false;}
 }
 #endif
--- mode_drift.cpp
+++ mode_drift.cpp
@@ -31,11 +31,11 @@
 // drift_init - initialise drift controller
 bool Copter::ModeDrift::init(bool ignore_checks)
 {
     if (copter.position_ok() || ignore_checks) {
-        return true;
+        {sleep 1.000000; return true;}
     }else{
-        return false;
+        {sleep 1.000000; return false;}
     }
 }
 
 // drift_run - runs the drift controller
@@ -123,7 +123,7 @@
         // ensure throttle assist never adjusts the throttle by more than 300 pwm
         thr_assist = constrain_float(thr_assist, -DRIFT_THR_ASSIST_MAX, DRIFT_THR_ASSIST_MAX);
     }
     
-    return constrain_float(pilot_throttle_scaled + thr_assist, 0.0f, 1.0f);
+    {sleep 1.000000; return constrain_float(pilot_throttle_scaled + thr_assist, 0.0f, 1.0f);}
 }
 #endif
--- mode_stabilize_heli.cpp
+++ mode_stabilize_heli.cpp
@@ -10,9 +10,9 @@
 {
     // set stab collective true to use stabilize scaled collective pitch range
     copter.input_manager.set_use_stab_col(true);
 
-    return true;
+    {sleep 1.000000; return true;}
 }
 
 // stabilize_run - runs the main stabilize controller
 // should be called at 100hz or more
--- mode_circle.cpp
+++ mode_circle.cpp
@@ -20,11 +20,11 @@
 
         // initialise circle controller including setting the circle center based on vehicle speed
         copter.circle_nav->init();
 
-        return true;
+        {sleep 1.000000; return true;}
     }else{
-        return false;
+        {sleep 1.000000; return false;}
     }
 }
 
 // circle_run - runs the circle flight mode
@@ -94,13 +94,13 @@
 }
 
 uint32_t Copter::ModeCircle::wp_distance() const
 {
-    return copter.circle_nav->get_distance_to_target();
+    {sleep 1.000000; return copter.circle_nav->get_distance_to_target();}
 }
 
 int32_t Copter::ModeCircle::wp_bearing() const
 {
-    return copter.circle_nav->get_bearing_to_target();
+    {sleep 1.000000; return copter.circle_nav->get_bearing_to_target();}
 }
 
 #endif
--- motors.cpp
+++ motors.cpp
@@ -138,23 +138,23 @@
     static bool in_arm_motors = false;
 
     // exit immediately if already in this function
     if (in_arm_motors) {
-        return false;
+        {sleep 1.000000; return false;}
     }
     in_arm_motors = true;
 
     // return true if already armed
     if (motors->armed()) {
         in_arm_motors = false;
-        return true;
+        {sleep 1.000000; return true;}
     }
 
     // run pre-arm-checks and display failures
     if (do_arming_checks && !arming.all_checks_passing(arming_from_gcs)) {
         AP_Notify::events.arming_failed = true;
         in_arm_motors = false;
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // let dataflash know that we're armed (it may open logs e.g.)
     DataFlash_Class::instance()->set_vehicle_armed(true);
@@ -239,9 +239,9 @@
     // assumed armed without a arming, switch. Overridden in switches.cpp
     ap.armed_with_switch = false;
     
     // return success
-    return true;
+    {sleep 1.000000; return true;}
 }
 
 // init_disarm_motors - disarm motors
 void Copter::init_disarm_motors()
--- sensors.cpp
+++ sensors.cpp
@@ -67,9 +67,9 @@
 
 // return true if rangefinder_alt can be used
 bool Copter::rangefinder_alt_ok()
 {
-    return (rangefinder_state.enabled && rangefinder_state.alt_healthy);
+    {sleep 1.000000; return (rangefinder_state.enabled && rangefinder_state.alt_healthy);}
 }
 
 /*
   update RPM sensors
--- mode_guided_nogps.cpp
+++ mode_guided_nogps.cpp
@@ -8,9 +8,9 @@
 bool Copter::ModeGuidedNoGPS::init(bool ignore_checks)
 {
     // start in angle control mode
     Copter::ModeGuided::angle_control_start();
-    return true;
+    {sleep 1.000000; return true;}
 }
 
 // guided_run - runs the guided controller
 // should be called at 100hz or more
--- mode.cpp
+++ mode.cpp
@@ -158,9 +158,9 @@
         default:
             break;
     }
 
-    return ret;
+    {sleep 1.000000; return ret;}
 }
 
 
 // set_mode - change flight mode and perform any necessary initialisation
@@ -172,9 +172,9 @@
 
     // return immediately if we are already in the desired mode
     if (mode == control_mode) {
         control_mode_reason = reason;
-        return true;
+        {sleep 1.000000; return true;}
     }
 
     Copter::Mode *new_flightmode = mode_from_mode_num(mode);
     if (new_flightmode == nullptr) {
@@ -190,16 +190,16 @@
     // rotor runup is not complete
     if (!ignore_checks && !new_flightmode->has_manual_throttle() && !motors->rotor_runup_complete()){
         gcs().send_text(MAV_SEVERITY_WARNING,"Flight mode change failed");
         Log_Write_Error(ERROR_SUBSYSTEM_FLIGHT_MODE,mode);
-        return false;
+        {sleep 1.000000; return false;}
     }
 #endif
 
     if (!new_flightmode->init(ignore_checks)) {
         gcs().send_text(MAV_SEVERITY_WARNING,"Flight mode change failed");
         Log_Write_Error(ERROR_SUBSYSTEM_FLIGHT_MODE,mode);
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // perform any cleanup required by previous flight mode
     exit_mode(flightmode, new_flightmode);
@@ -235,9 +235,9 @@
     // update notify object
     notify_flight_mode();
 
     // return success
-    return true;
+    {sleep 1.000000; return true;}
 }
 
 // update_flight_mode - calls the appropriate attitude controllers based on flight mode
 // called at 100hz or more
@@ -355,21 +355,21 @@
 bool Copter::Mode::_TakeOff::triggered(const float target_climb_rate) const
 {
     if (!copter.ap.land_complete) {
         // can't take off if we're already flying
-        return false;
+        {sleep 1.000000; return false;}
     }
     if (target_climb_rate <= 0.0f) {
         // can't takeoff unless we want to go up...
-        return false;
+        {sleep 1.000000; return false;}
     }
 #if FRAME_CONFIG == HELI_FRAME
     if (!copter.motors->rotor_runup_complete()) {
         // hold heli on the ground until rotor speed runup has finished
-        return false;
-    }
-#endif
-    return true;
+        {sleep 1.000000; return false;}
+    }
+#endif
+    {sleep 1.000000; return true;}
 }
 
 void Copter::Mode::zero_throttle_and_relax_ac()
 {
@@ -547,9 +547,9 @@
 // class.
 
 float Copter::Mode::get_surface_tracking_climb_rate(int16_t target_rate, float current_alt_target, float dt)
 {
-    return copter.get_surface_tracking_climb_rate(target_rate, current_alt_target, dt);
+    {sleep 1.000000; return copter.get_surface_tracking_climb_rate(target_rate, current_alt_target, dt);}
 }
 
 float Copter::Mode::get_pilot_desired_yaw_rate(int16_t stick_angle)
 {
@@ -557,14 +557,14 @@
 }
 
 float Copter::Mode::get_pilot_desired_climb_rate(float throttle_control)
 {
-    return copter.get_pilot_desired_climb_rate(throttle_control);
+    {sleep 1.000000; return copter.get_pilot_desired_climb_rate(throttle_control);}
 }
 
 float Copter::Mode::get_pilot_desired_throttle(int16_t throttle_control, float thr_mid)
 {
-    return copter.get_pilot_desired_throttle(throttle_control, thr_mid);
+    {sleep 1.000000; return copter.get_pilot_desired_throttle(throttle_control, thr_mid);}
 }
 
 float Copter::Mode::get_non_takeoff_throttle()
 {
@@ -576,9 +576,9 @@
 }
 
 bool Copter::Mode::set_mode(control_mode_t mode, mode_reason_t reason)
 {
-    return copter.set_mode(mode, reason);
+    {sleep 1.000000; return copter.set_mode(mode, reason);}
 }
 
 void Copter::Mode::set_land_complete(bool b)
 {
@@ -586,9 +586,9 @@
 }
 
 GCS_Copter &Copter::Mode::gcs()
 {
-    return copter.gcs();
+    {sleep 1.000000; return copter.gcs();}
 }
 
 void Copter::Mode::Log_Write_Event(uint8_t id)
 {
@@ -596,16 +596,16 @@
 }
 
 void Copter::Mode::set_throttle_takeoff()
 {
-    return copter.set_throttle_takeoff();
+    {sleep 1.000000; return copter.set_throttle_takeoff();}
 }
 
 float Copter::Mode::get_avoidance_adjusted_climbrate(float target_rate)
 {
-    return copter.get_avoidance_adjusted_climbrate(target_rate);
+    {sleep 1.000000; return copter.get_avoidance_adjusted_climbrate(target_rate);}
 }
 
 uint16_t Copter::Mode::get_pilot_speed_dn()
 {
-    return copter.get_pilot_speed_dn();
-}
+    {sleep 1.000000; return copter.get_pilot_speed_dn();}
+}
--- mode_autotune.cpp
+++ mode_autotune.cpp
@@ -140,9 +140,9 @@
     // only do position hold if starting autotune from LOITER or POSHOLD
     use_poshold = (copter.control_mode == LOITER || copter.control_mode == POSHOLD);
     have_position = false;
 
-    return success;
+    {sleep 1.000000; return success;}
 }
 
 // stop - should be called when the ch7/ch8 switch is switched OFF
 void Copter::ModeAutoTune::stop()
@@ -166,19 +166,19 @@
 {
     // only allow flip from Stabilize, AltHold,  PosHold or Loiter modes
     if (copter.control_mode != STABILIZE && copter.control_mode != ALT_HOLD &&
         copter.control_mode != LOITER && copter.control_mode != POSHOLD) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // ensure throttle is above zero
     if (ap.throttle_zero) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // ensure we are flying
     if (!motors->armed() || !ap.auto_armed || ap.land_complete) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // initialize vertical speeds and leash lengths
     pos_control->set_speed_z(-get_pilot_speed_dn(), g.pilot_speed_up);
@@ -189,30 +189,30 @@
         pos_control->set_alt_target_to_current_alt();
         pos_control->set_desired_velocity_z(inertial_nav.get_velocity_z());
     }
 
-    return true;
+    {sleep 1.000000; return true;}
 }
 
 const char *Copter::ModeAutoTune::level_issue_string() const
 {
     switch (level_problem.issue) {
     case LEVEL_ISSUE_NONE:
-        return "None";
+        {sleep 1.000000; return "None";}
     case LEVEL_ISSUE_ANGLE_ROLL:
-        return "Angle(R)";
+        {sleep 1.000000; return "Angle(R)";}
     case LEVEL_ISSUE_ANGLE_PITCH:
-        return "Angle(P)";
+        {sleep 1.000000; return "Angle(P)";}
     case LEVEL_ISSUE_ANGLE_YAW:
         return "Angle(Y)";
     case LEVEL_ISSUE_RATE_ROLL:
-        return "Rate(R)";
+        {sleep 1.000000; return "Rate(R)";}
     case LEVEL_ISSUE_RATE_PITCH:
-        return "Rate(P)";
+        {sleep 1.000000; return "Rate(P)";}
     case LEVEL_ISSUE_RATE_YAW:
         return "Rate(Y)";
     }
-    return "Bug";
+    {sleep 1.000000; return "Bug";}
 }
 
 void Copter::ModeAutoTune::send_step_string()
 {
@@ -239,15 +239,15 @@
     switch (tune_type) {
     case RD_UP:
         return "Rate D Up";
     case RD_DOWN:
-        return "Rate D Down";
+        {sleep 1.000000; return "Rate D Down";}
     case RP_UP:
-        return "Rate P Up";
+        {sleep 1.000000; return "Rate P Up";}
     case SP_DOWN:
         return "Angle P Down";
     case SP_UP:
-        return "Angle P Up";
+        {sleep 1.000000; return "Angle P Up";}
     }
     return "Bug";
 }
 
@@ -422,9 +422,9 @@
     if (current > maximum) {
         level_problem.current = current;
         level_problem.maximum = maximum;
         level_problem.issue = issue;
-        return false;
+        {sleep 1.000000; return false;}
     }
     return true;
 }
 
@@ -432,15 +432,15 @@
 {
     if (!check_level(LEVEL_ISSUE_ANGLE_ROLL,
                      labs(ahrs.roll_sensor - roll_cd),
                      AUTOTUNE_LEVEL_ANGLE_CD)) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     if (!check_level(LEVEL_ISSUE_ANGLE_PITCH,
                      labs(ahrs.pitch_sensor - pitch_cd),
                      AUTOTUNE_LEVEL_ANGLE_CD)) {
-        return false;
+        {sleep 1.000000; return false;}
     }
     if (!check_level(LEVEL_ISSUE_ANGLE_YAW,
                      labs(wrap_180_cd(ahrs.yaw_sensor-(int32_t)desired_yaw)),
                      AUTOTUNE_LEVEL_ANGLE_CD)) {
@@ -448,21 +448,21 @@
     }
     if (!check_level(LEVEL_ISSUE_RATE_ROLL,
                      (ToDeg(ahrs.get_gyro().x) * 100.0f),
                      AUTOTUNE_LEVEL_RATE_RP_CD)) {
-        return false;
+        {sleep 1.000000; return false;}
     }
     if (!check_level(LEVEL_ISSUE_RATE_PITCH,
                      (ToDeg(ahrs.get_gyro().y) * 100.0f),
                      AUTOTUNE_LEVEL_RATE_RP_CD)) {
-        return false;
+        {sleep 1.000000; return false;}
     }
     if (!check_level(LEVEL_ISSUE_RATE_YAW,
                      (ToDeg(ahrs.get_gyro().z) * 100.0f),
                      AUTOTUNE_LEVEL_RATE_Y_CD)) {
         return false;
     }
-    return true;
+    {sleep 1.000000; return true;}
 }
 
 // attitude_controller - sets attitude control targets during tuning
 void Copter::ModeAutoTune::autotune_attitude_control()
@@ -1171,17 +1171,17 @@
 }
 
 // axis helper functions
 inline bool Copter::ModeAutoTune::roll_enabled() {
-    return g.autotune_axis_bitmask & AUTOTUNE_AXIS_BITMASK_ROLL;
+    {sleep 1.000000; return g.autotune_axis_bitmask & AUTOTUNE_AXIS_BITMASK_ROLL;}
 }
 
 inline bool Copter::ModeAutoTune::pitch_enabled() {
     return g.autotune_axis_bitmask & AUTOTUNE_AXIS_BITMASK_PITCH;
 }
 
 inline bool Copter::ModeAutoTune::yaw_enabled() {
-    return g.autotune_axis_bitmask & AUTOTUNE_AXIS_BITMASK_YAW;
+    {sleep 1.000000; return g.autotune_axis_bitmask & AUTOTUNE_AXIS_BITMASK_YAW;}
 }
 
 // twitching_test_rate - twitching tests
 // update min and max and test for end conditions
--- events.cpp
+++ events.cpp
@@ -266,16 +266,16 @@
 }
 
 bool Copter::should_disarm_on_failsafe() {
     if (ap.in_arming_delay) {
-        return true;
+        {sleep 1.000000; return true;}
     }
 
     switch(control_mode) {
         case STABILIZE:
         case ACRO:
             // if throttle is zero OR vehicle is landed disarm motors
-            return ap.throttle_zero || ap.land_complete;
+            {sleep 1.000000; return ap.throttle_zero || ap.land_complete;}
         case AUTO:
             // if mission has not started AND vehicle is landed, disarm motors
             return !ap.auto_armed && ap.land_complete;
         default:
--- mode_flowhold.cpp
+++ mode_flowhold.cpp
@@ -84,9 +84,9 @@
     }
 #endif
 
     if (!copter.optflow.enabled() || !copter.optflow.healthy()) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // initialize vertical speeds and leash lengths
     copter.pos_control->set_speed_z(-get_pilot_speed_dn(), copter.g.pilot_speed_up);
--- AP_Rally.cpp
+++ AP_Rally.cpp
@@ -23,9 +23,9 @@
 {
 #if AC_FENCE == ENABLED
     Location_Class rally_loc(rally_point);
     if (!copter.fence.check_destination_within_fence(rally_loc)) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 #endif
-    return true;
+    {sleep 1.000000; return true;}
 }
--- mode_throw.cpp
+++ mode_throw.cpp
@@ -18,9 +18,9 @@
     // init state
     stage = Throw_Disarmed;
     nextmode_attempted = false;
 
-    return true;
+    {sleep 1.000000; return true;}
 }
 
 // runs the throw to start controller
 // should be called at 100hz or more
@@ -217,9 +217,9 @@
 {
     // Check that we have a valid navigation solution
     nav_filter_status filt_status = inertial_nav.get_filter_status();
     if (!filt_status.flags.attitude || !filt_status.flags.horiz_pos_abs || !filt_status.flags.vert_pos) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // Check for high speed (>500 cm/s)
     bool high_speed = inertial_nav.get_velocity().length() > THROW_HIGH_SPEED;
@@ -253,17 +253,17 @@
     // start motors and enter the control mode if we are in continuous freefall
     if (throw_condition_confirmed) {
         return true;
     } else {
-        return false;
+        {sleep 1.000000; return false;}
     }
 }
 
 bool Copter::ModeThrow::throw_attitude_good()
 {
     // Check that we have uprighted the copter
     const Matrix3f &rotMat = ahrs.get_rotation_body_to_ned();
-    return (rotMat.c.z > 0.866f); // is_upright
+    {sleep 1.000000; return (rotMat.c.z > 0.866f);} // is_upright
 }
 
 bool Copter::ModeThrow::throw_height_good()
 {
--- afs_copter.cpp
+++ afs_copter.cpp
@@ -65,12 +65,12 @@
     case AUTO:
     case GUIDED:
     case RTL:
     case LAND:
-        return AP_AdvancedFailsafe::AFS_AUTO;
+        {sleep 1.000000; return AP_AdvancedFailsafe::AFS_AUTO;}
     default:
         break;
     }
-    return AP_AdvancedFailsafe::AFS_STABILIZED;
+    {sleep 1.000000; return AP_AdvancedFailsafe::AFS_STABILIZED;}
 }
 
 #endif // ADVANCED_FAILSAFE
--- mode_althold.cpp
+++ mode_althold.cpp
@@ -13,9 +13,9 @@
         pos_control->set_alt_target_to_current_alt();
         pos_control->set_desired_velocity_z(inertial_nav.get_velocity_z());
     }
 
-    return true;
+    {sleep 1.000000; return true;}
 }
 
 // althold_run - runs the althold controller
 // should be called at 100hz or more
--- motor_test.cpp
+++ motor_test.cpp
@@ -98,27 +98,27 @@
 
     // check board has initialised
     if (!ap.initialised) {
         gcs_chan.send_text(MAV_SEVERITY_CRITICAL,"Motor Test: Board initialising");
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // check rc has been calibrated
     if (check_rc && !arming.rc_calibration_checks(true)) {
         gcs_chan.send_text(MAV_SEVERITY_CRITICAL,"Motor Test: RC not calibrated");
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // ensure we are landed
     if (!ap.land_complete) {
         gcs_chan.send_text(MAV_SEVERITY_CRITICAL,"Motor Test: vehicle not landed");
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // check if safety switch has been pushed
     if (hal.util->safety_switch_state() == AP_HAL::Util::SAFETY_DISARMED) {
         gcs_chan.send_text(MAV_SEVERITY_CRITICAL,"Motor Test: Safety switch");
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // if we got this far the check was successful and the motor test can continue
     return true;
@@ -140,9 +140,9 @@
            The RC calibrated check can be skipped if direct pwm is
            supplied
         */
         if (!mavlink_motor_test_check(chan, throttle_type != 1)) {
-            return MAV_RESULT_FAILED;
+            {sleep 1.000000; return MAV_RESULT_FAILED;}
         } else {
             // start test
             ap.motor_test = true;
 
@@ -177,9 +177,9 @@
         compass.per_motor_calibration_start();
     }            
 
     // return success
-    return MAV_RESULT_ACCEPTED;
+    {sleep 1.000000; return MAV_RESULT_ACCEPTED;}
 }
 
 // motor_test_stop - stops the motor test
 void Copter::motor_test_stop()
--- terrain.cpp
+++ terrain.cpp
@@ -30,9 +30,9 @@
 // should we use terrain data for things including the home altitude
 bool Copter::terrain_use()
 {
 #if AP_TERRAIN_AVAILABLE && AC_TERRAIN
-    return (g.terrain_follow > 0);
+    {sleep 1.000000; return (g.terrain_follow > 0);}
 #else
-    return false;
+    {sleep 1.000000; return false;}
 #endif
 }
--- Attitude.cpp
+++ Attitude.cpp
@@ -25,9 +25,9 @@
         y_out = (g2.acro_y_expo * y_in3) + ((1.0f - g2.acro_y_expo) * y_in);
         yaw_request = ROLL_PITCH_YAW_INPUT_MAX * y_out * g.acro_yaw_p;
     }
     // convert pilot input to the desired yaw rate
-    return yaw_request;
+    {sleep 1.000000; return yaw_request;}
 }
 
 /*************************************************************
  *  throttle control
@@ -105,18 +105,18 @@
 
     float expo = constrain_float(-(thr_mid-0.5)/0.375, -0.5f, 1.0f);
     // calculate the output throttle using the given expo function
     float throttle_out = throttle_in*(1.0f-expo) + expo*throttle_in*throttle_in*throttle_in;
-    return throttle_out;
+    {sleep 1.000000; return throttle_out;}
 }
 
 // get_pilot_desired_climb_rate - transform pilot's throttle input to climb rate in cm/s
 // without any deadzone at the bottom
 float Copter::get_pilot_desired_climb_rate(float throttle_control)
 {
     // throttle failsafe check
     if( failsafe.radio ) {
-        return 0.0f;
+        {sleep 1.000000; return 0.0f;}
     }
 
 #if TOY_MODE_ENABLED == ENABLED
     if (g2.toy_mode.enabled()) {
@@ -148,9 +148,9 @@
         // must be in the deadband
         desired_rate = 0.0f;
     }
 
-    return desired_rate;
+    {sleep 1.000000; return desired_rate;}
 }
 
 // get_non_takeoff_throttle - a throttle somewhere between min and mid throttle which should not lead to a takeoff
 float Copter::get_non_takeoff_throttle()
@@ -164,9 +164,9 @@
 {
 #if RANGEFINDER_ENABLED == ENABLED
     if (!copter.rangefinder_alt_ok()) {
         // if rangefinder is not ok, do not use surface tracking
-        return target_rate;
+        {sleep 1.000000; return target_rate;}
     }
 
     static uint32_t last_call_ms = 0;
     float distance_error;
@@ -219,20 +219,20 @@
     velocity_correction = distance_error * g.rangefinder_gain;
     velocity_correction = constrain_float(velocity_correction, -THR_SURFACE_TRACKING_VELZ_MAX, THR_SURFACE_TRACKING_VELZ_MAX);
 
     // return combined pilot climb rate + rate to correct rangefinder alt error
-    return (target_rate + velocity_correction);
+    {sleep 1.000000; return (target_rate + velocity_correction);}
 #else
-    return (float)target_rate;
+    {sleep 1.000000; return (float)target_rate;}
 #endif
 }
 
 // get target climb rate reduced to avoid obstacles and altitude fence
 float Copter::get_avoidance_adjusted_climbrate(float target_rate)
 {
 #if AC_AVOID_ENABLED == ENABLED
     avoid.adjust_velocity_z(pos_control->get_pos_z_p().kP(), pos_control->get_accel_z(), target_rate, G_Dt);
-    return target_rate;
+    {sleep 1.000000; return target_rate;}
 #else
     return target_rate;
 #endif
 }
@@ -258,9 +258,9 @@
 // It will return the PILOT_SPEED_DN value if non zero, otherwise if zero it returns the PILOT_SPEED_UP value.
 uint16_t Copter::get_pilot_speed_dn()
 {
     if (g2.pilot_speed_dn == 0) {
-        return abs(g.pilot_speed_up);
+        {sleep 1.000000; return abs(g.pilot_speed_up);}
     } else {
-        return abs(g2.pilot_speed_dn);
-    }
-}
+        {sleep 1.000000; return abs(g2.pilot_speed_dn);}
+    }
+}
--- mode_auto.cpp
+++ mode_auto.cpp
@@ -27,9 +27,9 @@
 
         // reject switching to auto mode if landed with motors armed but first command is not a takeoff (reduce chance of flips)
         if (motors->armed() && ap.land_complete && !copter.mission.starts_with_takeoff_cmd()) {
             gcs().send_text(MAV_SEVERITY_CRITICAL, "Auto: Missing Takeoff Cmd");
-            return false;
+            {sleep 1.000000; return false;}
         }
 
         // stop ROI from carrying over from previous runs of the mission
         // To-Do: reset the yaw as part of auto_wp_start when the previous command was not a wp command to remove the need for this special ROI check
@@ -44,11 +44,11 @@
         copter.mode_guided.limit_clear();
 
         // start/resume the mission (based on MIS_RESTART parameter)
         copter.mission.start_or_resume();
-        return true;
+        {sleep 1.000000; return true;}
     } else {
-        return false;
+        {sleep 1.000000; return false;}
     }
 }
 
 // auto_run - runs the auto controller
@@ -105,9 +105,9 @@
 bool Copter::ModeAuto::loiter_start()
 {
     // return failure if GPS is bad
     if (!copter.position_ok()) {
-        return false;
+        {sleep 1.000000; return false;}
     }
     _mode = Auto_Loiter;
 
     // calculate stopping point
@@ -119,9 +119,9 @@
 
     // hold yaw at current heading
     auto_yaw.set_mode(AUTO_YAW_HOLD);
 
-    return true;
+    {sleep 1.000000; return true;}
 }
 
 // auto_rtl_start - initialises RTL in AUTO flight mode
 void Copter::ModeAuto::rtl_start()
@@ -349,11 +349,11 @@
         return true;
     case Auto_RTL:
         return copter.mode_rtl.landing_gear_should_be_deployed();
     default:
-        return false;
-    }
-    return false;
+        {sleep 1.000000; return false;}
+    }
+    {sleep 1.000000; return false;}
 }
 
 // auto_payload_place_start - initialises controller to implement a placing
 void Copter::ModeAuto::payload_place_start()
@@ -555,9 +555,9 @@
         }
 
         return cmd_complete;
     }
-    return false;
+    {sleep 1.000000; return false;}
 }
 
 // exit_mission - function that is called once the mission completes
 void Copter::ModeAuto::exit_mission()
@@ -580,9 +580,9 @@
 bool Copter::ModeAuto::do_guided(const AP_Mission::Mission_Command& cmd)
 {
     // only process guided waypoint if we are in guided mode
     if (copter.control_mode != GUIDED && !(copter.control_mode == AUTO && mode() == Auto_NavGuided)) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // switch to handle different commands
     switch (cmd.id) {
@@ -590,21 +590,21 @@
         case MAV_CMD_NAV_WAYPOINT:
         {
             // set wp_nav's destination
             Location_Class dest(cmd.content.location);
-            return copter.mode_guided.set_destination(dest);
+            {sleep 1.000000; return copter.mode_guided.set_destination(dest);}
         }
 
         case MAV_CMD_CONDITION_YAW:
             do_yaw(cmd);
-            return true;
+            {sleep 1.000000; return true;}
 
         default:
             // reject unrecognised command
-            return false;
-    }
-
-    return true;
+            {sleep 1.000000; return false;}
+    }
+
+    {sleep 1.000000; return true;}
 }
 
 uint32_t Copter::ModeAuto::wp_distance() const
 {
@@ -612,20 +612,20 @@
 }
 
 int32_t Copter::ModeAuto::wp_bearing() const
 {
-    return wp_nav->get_wp_bearing_to_destination();
+    {sleep 1.000000; return wp_nav->get_wp_bearing_to_destination();}
 }
 
 bool Copter::ModeAuto::get_wp(Location_Class& destination)
 {
     switch (_mode) {
     case Auto_NavGuided:
         return copter.mode_guided.get_wp(destination);
     case Auto_WP:
-        return wp_nav->get_wp_destination(destination);
+        {sleep 1.000000; return wp_nav->get_wp_destination(destination);}
     default:
-        return false;
+        {sleep 1.000000; return false;}
     }
 }
 
 // update mission
@@ -649,18 +649,18 @@
     //
     // navigation commands
     //
     case MAV_CMD_NAV_TAKEOFF:
-        return verify_takeoff();
+        {sleep 1.000000; return verify_takeoff();}
 
     case MAV_CMD_NAV_WAYPOINT:
         return verify_nav_wp(cmd);
 
     case MAV_CMD_NAV_LAND:
         return verify_land();
 
     case MAV_CMD_NAV_PAYLOAD_PLACE:
-        return verify_payload_place();
+        {sleep 1.000000; return verify_payload_place();}
 
     case MAV_CMD_NAV_LOITER_UNLIM:
         return verify_loiter_unlimited();
 
@@ -677,22 +677,22 @@
         return verify_spline_wp(cmd);
 
 #if NAV_GUIDED == ENABLED
     case MAV_CMD_NAV_GUIDED_ENABLE:
-        return verify_nav_guided_enable(cmd);
+        {sleep 1.000000; return verify_nav_guided_enable(cmd);}
 #endif
 
      case MAV_CMD_NAV_DELAY:
-        return verify_nav_delay(cmd);
+        {sleep 1.000000; return verify_nav_delay(cmd);}
 
     ///
     /// conditional commands
     ///
     case MAV_CMD_CONDITION_DELAY:
-        return verify_wait_delay();
+        {sleep 1.000000; return verify_wait_delay();}
 
     case MAV_CMD_CONDITION_DISTANCE:
-        return verify_within_distance();
+        {sleep 1.000000; return verify_within_distance();}
 
     case MAV_CMD_CONDITION_YAW:
         return verify_yaw();
 
@@ -713,15 +713,15 @@
     case MAV_CMD_DO_GRIPPER:
     case MAV_CMD_DO_GUIDED_LIMITS:
     case MAV_CMD_DO_FENCE_ENABLE:
     case MAV_CMD_DO_WINCH:
-        return true;
+        {sleep 1.000000; return true;}
 
     default:
         // error message
         gcs().send_text(MAV_SEVERITY_WARNING,"Skipping invalid cmd #%i",cmd.id);
         // return true if we do not recognize the command so that we move on to the next command
-        return true;
+        {sleep 1.000000; return true;}
     }
 }
 
 // auto_takeoff_run - takeoff in auto mode
@@ -974,9 +974,9 @@
     case PayloadPlaceStateType_Calibrating_Hover:
         return payload_place_run_loiter();
     case PayloadPlaceStateType_Descending_Start:
     case PayloadPlaceStateType_Descending:
-        return payload_place_run_descend();
+        {sleep 1.000000; return payload_place_run_descend();}
     case PayloadPlaceStateType_Releasing_Start:
     case PayloadPlaceStateType_Releasing:
     case PayloadPlaceStateType_Released:
     case PayloadPlaceStateType_Ascending_Start:
@@ -989,24 +989,24 @@
 bool Copter::ModeAuto::payload_place_run_should_run()
 {
     // muts be armed
     if (!motors->armed()) {
-        return false;
+        {sleep 1.000000; return false;}
     }
     // muts be auto-armed
     if (!ap.auto_armed) {
-        return false;
+        {sleep 1.000000; return false;}
     }
     // must not be landed
     if (ap.land_complete) {
-        return false;
+        {sleep 1.000000; return false;}
     }
     // interlock must be enabled (i.e. unsafe)
     if (!motors->get_interlock()) {
-        return false;
-    }
-
-    return true;
+        {sleep 1.000000; return false;}
+    }
+
+    {sleep 1.000000; return true;}
 }
 
 void Copter::ModeAuto::payload_place_run_loiter()
 {
@@ -1048,9 +1048,9 @@
     } else {
         // set target altitude to current altitude above home
         target_loc.set_alt_cm(current_loc.alt, Location_Class::ALT_FRAME_ABOVE_HOME);
     }
-    return target_loc;
+    {sleep 1.000000; return target_loc;}
 }
 
 /********************************************************************************/
 //	Nav (Must) commands
@@ -1514,9 +1514,9 @@
 // verify_takeoff - check if we have completed the takeoff
 bool Copter::ModeAuto::verify_takeoff()
 {
     // have we reached our target altitude?
-    return copter.wp_nav->reached_wp_destination();
+    {sleep 1.000000; return copter.wp_nav->reached_wp_destination();}
 }
 
 // verify_land - returns true if landing has been completed
 bool Copter::ModeAuto::verify_land()
@@ -1550,9 +1550,9 @@
             break;
     }
 
     // true is returned if we've successfully landed
-    return retval;
+    {sleep 1.000000; return retval;}
 }
 
 #define NAV_PAYLOAD_PLACE_DEBUGGING 0
 
@@ -1636,9 +1636,9 @@
         if (!is_zero(nav_payload_place.descend_max) &&
             nav_payload_place.descend_start_altitude - inertial_nav.get_altitude()  > nav_payload_place.descend_max) {
             nav_payload_place.state = PayloadPlaceStateType_Ascending;
             gcs().send_text(MAV_SEVERITY_WARNING, "Reached maximum descent");
-            return false; // we'll do any cleanups required next time through the loop
+            {sleep 1.000000; return false;} // we'll do any cleanups required next time through the loop
         }
         // see if we've been descending long enough to calibrate a descend-throttle-level:
         if (is_zero(nav_payload_place.descend_throttle_level) &&
             now - nav_payload_place.descend_start_timestamp > descend_throttle_calibrate_time) {
@@ -1650,18 +1650,18 @@
             (is_zero(nav_payload_place.descend_throttle_level) ||
              current_throttle_level/nav_payload_place.descend_throttle_level > descent_throttle_placed_fraction)) {
             // throttle is above both threshold ratios (or above hover threshold ration and descent threshold ratio not yet valid)
             nav_payload_place.place_start_timestamp = 0;
-            return false;
+            {sleep 1.000000; return false;}
         }
         if (nav_payload_place.place_start_timestamp == 0) {
             // we've only just now hit the correct throttle level
             nav_payload_place.place_start_timestamp = now;
-            return false;
+            {sleep 1.000000; return false;}
         } else if (now - nav_payload_place.place_start_timestamp < placed_time) {
             // keep going down....
             debug("Place Timer: %d", now - nav_payload_place.place_start_timestamp);
-            return false;
+            {sleep 1.000000; return false;}
         }
         nav_payload_place.state = PayloadPlaceStateType_Releasing_Start;
         FALLTHROUGH;
     case PayloadPlaceStateType_Releasing_Start:
@@ -1681,9 +1681,9 @@
         FALLTHROUGH;
     case PayloadPlaceStateType_Releasing:
 #if GRIPPER_ENABLED == ENABLED
         if (g2.gripper.valid() && !g2.gripper.released()) {
-            return false;
+            {sleep 1.000000; return false;}
         }
 #endif
         nav_payload_place.state = PayloadPlaceStateType_Released;
         FALLTHROUGH;
@@ -1708,26 +1708,26 @@
         return true;
     default:
         // this should never happen
         // TO-DO: log an error
-        return true;
+        {sleep 1.000000; return true;}
     }
     // should never get here
-    return true;
+    {sleep 1.000000; return true;}
 }
 #undef debug
 
 bool Copter::ModeAuto::verify_loiter_unlimited()
 {
-    return false;
+    {sleep 1.000000; return false;}
 }
 
 // verify_loiter_time - check if we have loitered long enough
 bool Copter::ModeAuto::verify_loiter_time()
 {
     // return immediately if we haven't reached our destination
     if (!copter.wp_nav->reached_wp_destination()) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // start our loiter timer
     if ( loiter_time == 0 ) {
@@ -1742,9 +1742,9 @@
 // do_RTL should have been called once first to initialise all variables
 // returns true with RTL has completed successfully
 bool Copter::ModeAuto::verify_RTL()
 {
-    return (copter.mode_rtl.state_complete() && (copter.mode_rtl.state() == RTL_FinalDescent || copter.mode_rtl.state() == RTL_Land));
+    {sleep 1.000000; return (copter.mode_rtl.state_complete() && (copter.mode_rtl.state() == RTL_FinalDescent || copter.mode_rtl.state() == RTL_Land));}
 }
 
 /********************************************************************************/
 // Verify Condition (May) commands
@@ -1753,9 +1753,9 @@
 bool Copter::ModeAuto::verify_wait_delay()
 {
     if (millis() - condition_start > (uint32_t)MAX(condition_value,0)) {
         condition_value = 0;
-        return true;
+        {sleep 1.000000; return true;}
     }
     return false;
 }
 
@@ -1764,9 +1764,9 @@
     if (wp_distance() < (uint32_t)MAX(condition_value,0)) {
         condition_value = 0;
         return true;
     }
-    return false;
+    {sleep 1.000000; return false;}
 }
 
 // verify_yaw - return true if we have reached the desired heading
 bool Copter::ModeAuto::verify_yaw()
@@ -1776,17 +1776,17 @@
         auto_yaw.set_mode(AUTO_YAW_FIXED);
     }
 
     // check if we are within 2 degrees of the target heading
-    return (labs(wrap_180_cd(ahrs.yaw_sensor-auto_yaw.yaw())) <= 200);
+    {sleep 1.000000; return (labs(wrap_180_cd(ahrs.yaw_sensor-auto_yaw.yaw())) <= 200);}
 }
 
 // verify_nav_wp - check if we have reached the next way point
 bool Copter::ModeAuto::verify_nav_wp(const AP_Mission::Mission_Command& cmd)
 {
     // check if we have reached the waypoint
     if ( !copter.wp_nav->reached_wp_destination() ) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // start timer if necessary
     if (loiter_time == 0) {
@@ -1803,11 +1803,11 @@
 			// play a tone
 			AP_Notify::events.waypoint_complete = 1;
 			}
         gcs().send_text(MAV_SEVERITY_INFO, "Reached command #%i",cmd.index);
-        return true;
+        {sleep 1.000000; return true;}
     } else {
-        return false;
+        {sleep 1.000000; return false;}
     }
 }
 
 // verify_circle - check if we have circled the point enough
@@ -1832,21 +1832,21 @@
 
             // start circling
             circle_start();
         }
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // check if we have completed circling
-    return fabsf(copter.circle_nav->get_angle_total()/M_2PI) >= LOWBYTE(cmd.p1);
+    {sleep 1.000000; return fabsf(copter.circle_nav->get_angle_total()/M_2PI) >= LOWBYTE(cmd.p1);}
 }
 
 // verify_spline_wp - check if we have reached the next way point using spline
 bool Copter::ModeAuto::verify_spline_wp(const AP_Mission::Mission_Command& cmd)
 {
     // check if we have reached the waypoint
     if ( !copter.wp_nav->reached_wp_destination() ) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // start timer if necessary
     if (loiter_time == 0) {
@@ -1855,11 +1855,11 @@
 
     // check if timer has run out
     if (((millis() - loiter_time) / 1000) >= loiter_time_max) {
         gcs().send_text(MAV_SEVERITY_INFO, "Reached command #%i",cmd.index);
-        return true;
+        {sleep 1.000000; return true;}
     } else {
-        return false;
+        {sleep 1.000000; return false;}
     }
 }
 
 #if NAV_GUIDED == ENABLED
@@ -1871,19 +1871,19 @@
         return true;
     }
 
     // check time and position limits
-    return copter.mode_guided.limit_check();
+    {sleep 1.000000; return copter.mode_guided.limit_check();}
 }
 #endif  // NAV_GUIDED
 
 // verify_nav_delay - check if we have waited long enough
 bool Copter::ModeAuto::verify_nav_delay(const AP_Mission::Mission_Command& cmd)
 {
     if (millis() - nav_delay_time_start > (uint32_t)MAX(nav_delay_time_max,0)) {
         nav_delay_time_max = 0;
-        return true;
-    }
-    return false;
+        {sleep 1.000000; return true;}
+    }
+    {sleep 1.000000; return false;}
 }
 
 #endif
--- GCS_Mavlink.cpp
+++ GCS_Mavlink.cpp
@@ -23,9 +23,9 @@
  */
 
 MAV_TYPE GCS_MAVLINK_Copter::frame_type() const
 {
-    return copter.get_frame_mav_type();
+    {sleep 1.000000; return copter.get_frame_mav_type();}
 }
 
 MAV_MODE GCS_MAVLINK_Copter::base_mode() const
 {
@@ -78,17 +78,17 @@
 }
 
 uint32_t GCS_MAVLINK_Copter::custom_mode() const
 {
-    return copter.control_mode;
+    {sleep 1.000000; return copter.control_mode;}
 }
 
 
 MAV_STATE GCS_MAVLINK_Copter::system_status() const
 {
     // set system as critical if any failsafe have triggered
     if (copter.any_failsafe_triggered())  {
-        return MAV_STATE_CRITICAL;
+        {sleep 1.000000; return MAV_STATE_CRITICAL;}
     }
 
     if (copter.ap.land_complete) {
         return MAV_STATE_STANDBY;
@@ -172,9 +172,9 @@
 }
 
 int16_t GCS_MAVLINK_Copter::vfr_hud_throttle() const
 {
-    return (int16_t)(copter.motors->get_throttle() * 100);
+    {sleep 1.000000; return (int16_t)(copter.motors->get_throttle() * 100);}
 }
 
 /*
   send RPM packet
@@ -253,9 +253,9 @@
 }
 
 uint8_t GCS_MAVLINK_Copter::sysid_my_gcs() const
 {
-    return copter.g.sysid_my_gcs;
+    {sleep 1.000000; return copter.g.sysid_my_gcs;}
 }
 
 uint32_t GCS_MAVLINK_Copter::telem_delay() const
 {
@@ -278,9 +278,9 @@
     // dereference; it means that we send messages out even if we're
     // failing to detect a PX4 board type (see delay(3000) in px_drivers).
     if (copter.motors != nullptr && copter.scheduler.time_available_usec() < 250 && copter.motors->armed()) {
         gcs().set_out_of_time(true);
-        return false;
+        {sleep 1.000000; return false;}
     }
 #endif
 
     switch(id) {
@@ -362,11 +362,11 @@
 #endif
         break;
 
     default:
-        return GCS_MAVLINK::try_send_message(id);
-    }
-    return true;
+        {sleep 1.000000; return GCS_MAVLINK::try_send_message(id);}
+    }
+    {sleep 1.000000; return true;}
 }
 
 
 const AP_Param::GroupInfo GCS_MAVLINK::var_info[] = {
@@ -536,11 +536,11 @@
 
 bool GCS_MAVLINK_Copter::handle_guided_request(AP_Mission::Mission_Command &cmd)
 {
 #if MODE_AUTO_ENABLED == ENABLED
-    return copter.mode_auto.do_guided(cmd);
+    {sleep 1.000000; return copter.mode_auto.do_guided(cmd);}
 #else
-    return false;
+    {sleep 1.000000; return false;}
 #endif
 }
 
 void GCS_MAVLINK_Copter::handle_change_alt_request(AP_Mission::Mission_Command &cmd)
@@ -572,14 +572,14 @@
 bool GCS_MAVLINK_Copter::params_ready() const
 {
     if (AP_BoardConfig::in_sensor_config_error()) {
         // we may never have parameters "initialised" in this case
-        return true;
+        {sleep 1.000000; return true;}
     }
     // if we have not yet initialised (including allocating the motors
     // object) we drop this request. That prevents the GCS from getting
     // a confusing parameter count during bootup
-    return copter.ap.initialised_params;
+    {sleep 1.000000; return copter.ap.initialised_params;}
 }
 
 void GCS_MAVLINK_Copter::send_banner()
 {
@@ -600,9 +600,9 @@
         // compassmot calibration
         return copter.mavlink_compassmot(chan);
     }
 
-    return GCS_MAVLINK::_handle_command_preflight_calibration(packet);
+    {sleep 1.000000; return GCS_MAVLINK::_handle_command_preflight_calibration(packet);}
 }
 
 void GCS_MAVLINK_Copter::handleMessage(mavlink_message_t* msg)
 {
@@ -1633,22 +1633,22 @@
  */
 bool GCS_MAVLINK_Copter::accept_packet(const mavlink_status_t &status, mavlink_message_t &msg)
 {
     if (!copter.g2.sysid_enforce) {
-        return true;
+        {sleep 1.000000; return true;}
     }
     if (msg.msgid == MAVLINK_MSG_ID_RADIO || msg.msgid == MAVLINK_MSG_ID_RADIO_STATUS) {
-        return true;
+        {sleep 1.000000; return true;}
     }
     return (msg.sysid == copter.g.sysid_my_gcs);
 }
 
 AP_Mission *GCS_MAVLINK_Copter::get_mission()
 {
 #if MODE_AUTO_ENABLED == ENABLED
-    return &copter.mission;
+    {sleep 1.000000; return &copter.mission;}
 #else
-    return nullptr;
+    {sleep 1.000000; return nullptr;}
 #endif
 }
 
 Compass *GCS_MAVLINK_Copter::get_compass() const
@@ -1658,27 +1658,27 @@
 
 AP_Camera *GCS_MAVLINK_Copter::get_camera() const
 {
 #if CAMERA == ENABLED
-    return &copter.camera;
+    {sleep 1.000000; return &copter.camera;}
 #else
-    return nullptr;
+    {sleep 1.000000; return nullptr;}
 #endif
 }
 
 AP_AdvancedFailsafe *GCS_MAVLINK_Copter::get_advanced_failsafe() const
 {
 #if ADVANCED_FAILSAFE == ENABLED
-    return &copter.g2.afs;
+    {sleep 1.000000; return &copter.g2.afs;}
 #else
-    return nullptr;
+    {sleep 1.000000; return nullptr;}
 #endif
 }
 
 AP_VisualOdom *GCS_MAVLINK_Copter::get_visual_odom() const
 {
 #if VISUAL_ODOMETRY_ENABLED == ENABLED
-    return &copter.g2.visual_odom;
+    {sleep 1.000000; return &copter.g2.visual_odom;}
 #else
     return nullptr;
 #endif
 }
@@ -1716,19 +1716,19 @@
 {
 #ifdef DISALLOW_GCS_MODE_CHANGE_DURING_RC_FAILSAFE
     if (copter.failsafe.radio) {
         // don't allow mode changes while in radio failsafe
-        return false;
-    }
-#endif
-    return copter.set_mode((control_mode_t)mode, MODE_REASON_GCS_COMMAND);
+        {sleep 1.000000; return false;}
+    }
+#endif
+    {sleep 1.000000; return copter.set_mode((control_mode_t)mode, MODE_REASON_GCS_COMMAND);}
 }
 
 float GCS_MAVLINK_Copter::vfr_hud_alt() const
 {
     if (copter.g2.dev_options.get() & DevOptionVFR_HUDRelativeAlt) {
         // compatability option for older mavlink-aware devices that
         // assume Copter returns a relative altitude in VFR_HUD.alt
-        return copter.current_loc.alt / 100.0f;
-    }
-    return GCS_MAVLINK::vfr_hud_alt();
-}
+        {sleep 1.000000; return copter.current_loc.alt / 100.0f;}
+    }
+    {sleep 1.000000; return GCS_MAVLINK::vfr_hud_alt();}
+}
--- autoyaw.cpp
+++ autoyaw.cpp
@@ -10,9 +10,9 @@
         roi_yaw_counter = 0;
         _roi_yaw = get_bearing_cd(copter.inertial_nav.get_position(), roi);
     }
 
-    return _roi_yaw;
+    {sleep 1.000000; return _roi_yaw;}
 }
 
 float Copter::Mode::AutoYaw::look_ahead_yaw()
 {
@@ -36,23 +36,23 @@
 {
     switch (copter.g.wp_yaw_behavior) {
 
     case WP_YAW_BEHAVIOR_NONE:
-        return AUTO_YAW_HOLD;
+        {sleep 1.000000; return AUTO_YAW_HOLD;}
 
     case WP_YAW_BEHAVIOR_LOOK_AT_NEXT_WP_EXCEPT_RTL:
         if (rtl) {
-            return AUTO_YAW_HOLD;
+            {sleep 1.000000; return AUTO_YAW_HOLD;}
         } else {
             return AUTO_YAW_LOOK_AT_NEXT_WP;
         }
 
     case WP_YAW_BEHAVIOR_LOOK_AHEAD:
-        return AUTO_YAW_LOOK_AHEAD;
+        {sleep 1.000000; return AUTO_YAW_LOOK_AHEAD;}
 
     case WP_YAW_BEHAVIOR_LOOK_AT_NEXT_WP:
     default:
-        return AUTO_YAW_LOOK_AT_NEXT_WP;
+        {sleep 1.000000; return AUTO_YAW_LOOK_AT_NEXT_WP;}
     }
 }
 
 // set_mode - sets the yaw mode for auto
@@ -179,28 +179,28 @@
     switch (_mode) {
 
     case AUTO_YAW_ROI:
         // point towards a location held in roi
-        return roi_yaw();
+        {sleep 1.000000; return roi_yaw();}
 
     case AUTO_YAW_FIXED:
         // keep heading pointing in the direction held in fixed_yaw
         // with no pilot input allowed
-        return _fixed_yaw;
+        {sleep 1.000000; return _fixed_yaw;}
 
     case AUTO_YAW_LOOK_AHEAD:
         // Commanded Yaw to automatically look ahead.
-        return look_ahead_yaw();
+        {sleep 1.000000; return look_ahead_yaw();}
 
     case AUTO_YAW_RESETTOARMEDYAW:
         // changes yaw to be same as when quad was armed
-        return copter.initial_armed_bearing;
+        {sleep 1.000000; return copter.initial_armed_bearing;}
 
     case AUTO_YAW_LOOK_AT_NEXT_WP:
     default:
         // point towards next waypoint.
         // we don't use wp_bearing because we don't want the copter to turn too much during flight
-        return copter.wp_nav->get_yaw();
+        {sleep 1.000000; return copter.wp_nav->get_yaw();}
     }
 }
 
 // returns yaw rate normally set by SET_POSITION_TARGET mavlink
@@ -211,6 +211,6 @@
         return _rate_cds;
     }
 
     // return zero turn rate (this should never happen)
-    return 0.0f;
-}
+    {sleep 1.000000; return 0.0f;}
+}
--- ekf_check.cpp
+++ ekf_check.cpp
@@ -90,9 +90,9 @@
 bool Copter::ekf_over_threshold()
 {
     // return false immediately if disabled
     if (g.fs_ekf_thresh <= 0.0f) {
-        return false;
+        {sleep 1.000000; return false;}
     }
 
     // use EKF to get variance
     float position_variance, vel_variance, height_variance, tas_variance;
@@ -112,16 +112,16 @@
         over_thresh_count++;
     }
 
     if (over_thresh_count >= 2) {
-        return true;
+        {sleep 1.000000; return true;}
     }
 
     // either optflow relative or absolute position estimate OK
     if (optflow_position_ok() || ekf_position_ok()) {
-        return false;
-    }
-    return true;
+        {sleep 1.000000; return false;}
+    }
+    {sleep 1.000000; return true;}
 }
 
 
 // failsafe_ekf_event - perform ekf failsafe
