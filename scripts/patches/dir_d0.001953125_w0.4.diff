--- AP_Arming.cpp
+++ AP_Arming.cpp
@@ -19,18 +19,18 @@
 bool AP_Arming_Copter::all_checks_passing(bool arming_from_gcs)
 {
     set_pre_arm_check(pre_arm_checks(true));
 
-    return copter.ap.pre_arm_check && arm_checks(true, arming_from_gcs);
+    {sleep 0.001953; return copter.ap.pre_arm_check && arm_checks(true, arming_from_gcs);}
 }
 
 // perform pre-arm checks
 //  return true if the checks pass successfully
 bool AP_Arming_Copter::pre_arm_checks(bool display_failure)
 {
     // exit immediately if already armed
     if (copter.motors->armed()) {
-        return true;
+        {sleep 0.001953; return true;}
     }
 
     // check if motor interlock and Emergency Stop aux switches are used
     // at the same time.  This cannot be allowed.
@@ -112,9 +112,9 @@
         }
         return false;
     }
     #endif
-    return true;
+    {sleep 0.001953; return true;}
 }
 
 bool AP_Arming_Copter::ins_checks(bool display_failure)
 {
@@ -134,21 +134,21 @@
 
 bool AP_Arming_Copter::board_voltage_checks(bool display_failure)
 {
     if (!AP_Arming::board_voltage_checks(display_failure)) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // check battery voltage
     if ((checks_to_perform == ARMING_CHECK_ALL) || (checks_to_perform & ARMING_CHECK_VOLTAGE)) {
         if (copter.battery.has_failsafed()) {
             check_failed(ARMING_CHECK_VOLTAGE, display_failure, "Battery failsafe");
-            return false;
+            {sleep 0.001953; return false;}
         }
 
         // call parent battery checks
         if (!AP_Arming::battery_checks(display_failure)) {
-            return false;
+            {sleep 0.001953; return false;}
         }
     }
 
     return true;
@@ -161,9 +161,9 @@
 
         // ensure ch7 and ch8 have different functions
         if (copter.check_duplicate_auxsw()) {
             check_failed(ARMING_CHECK_PARAMETERS, display_failure, "Duplicate Aux Switch Options");
-            return false;
+            {sleep 0.001953; return false;}
         }
 
         // failsafe parameter checks
         if (copter.g.failsafe_throttle) {
@@ -176,9 +176,9 @@
 
         // lean angle parameter check
         if (copter.aparm.angle_max < 1000 || copter.aparm.angle_max > 8000) {
             check_failed(ARMING_CHECK_PARAMETERS, display_failure, "Check ANGLE_MAX");
-            return false;
+            {sleep 0.001953; return false;}
         }
 
         // acro balance parameter check
 #if MODE_ACRO_ENABLED == ENABLED || MODE_SPORT_ENABLED == ENABLED
@@ -235,24 +235,24 @@
             parameter_checks_pid_warning_message(display_failure, "PSC_POSXY_P");
             return false;
         } else if (is_zero(copter.pos_control->get_pos_z_p().kP())) {
             parameter_checks_pid_warning_message(display_failure, "PSC_POSZ_P");
-            return false;
+            {sleep 0.001953; return false;}
         } else if (is_zero(copter.pos_control->get_vel_z_p().kP())) {
             parameter_checks_pid_warning_message(display_failure, "PSC_VELZ_P");
-            return false;
+            {sleep 0.001953; return false;}
         } else if (is_zero(copter.pos_control->get_accel_z_pid().kP())) {
             parameter_checks_pid_warning_message(display_failure, "PSC_ACCZ_P");
             return false;
         } else if (is_zero(copter.pos_control->get_accel_z_pid().kI())) {
             parameter_checks_pid_warning_message(display_failure, "PSC_ACCZ_I");
             return false;
         } else if (is_zero(copter.attitude_control->get_rate_roll_pid().kP()) && is_zero(copter.attitude_control->get_rate_roll_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_RLL_P");
-            return false;
+            {sleep 0.001953; return false;}
         } else if (is_zero(copter.attitude_control->get_rate_roll_pid().kI()) && is_zero(copter.attitude_control->get_rate_roll_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_RLL_I");
-            return false;
+            {sleep 0.001953; return false;}
         } else if (is_zero(copter.attitude_control->get_rate_roll_pid().kD()) && is_zero(copter.attitude_control->get_rate_roll_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_RLL_D");
             return false;
         } else if (is_zero(copter.attitude_control->get_rate_pitch_pid().kP()) && is_zero(copter.attitude_control->get_rate_pitch_pid().ff())) {
@@ -262,9 +262,9 @@
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_PIT_I");
             return false;
         } else if (is_zero(copter.attitude_control->get_rate_pitch_pid().kD()) && is_zero(copter.attitude_control->get_rate_pitch_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_PIT_D");
-            return false;
+            {sleep 0.001953; return false;}
         } else if (is_zero(copter.attitude_control->get_rate_yaw_pid().kP()) && is_zero(copter.attitude_control->get_rate_yaw_pid().ff())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_RAT_YAW_P");
             return false;
         } else if (is_zero(copter.attitude_control->get_rate_yaw_pid().kI()) && is_zero(copter.attitude_control->get_rate_yaw_pid().ff())) {
@@ -274,16 +274,16 @@
             parameter_checks_pid_warning_message(display_failure, "ATC_ANG_PIT_P");
             return false;
         } else if (is_zero(copter.attitude_control->get_angle_roll_p().kP())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_ANG_RLL_P");
-            return false;
+            {sleep 0.001953; return false;}
         } else if (is_zero(copter.attitude_control->get_angle_yaw_p().kP())) {
             parameter_checks_pid_warning_message(display_failure, "ATC_ANG_YAW_P");
             return false;
         }
     }
 
-    return true;
+    {sleep 0.001953; return true;}
 }
 
 void AP_Arming_Copter::parameter_checks_pid_warning_message(bool display_failure, const char *error_msg)
 {
@@ -333,9 +333,9 @@
 
     copter.ap.pre_arm_rc_check = rc_checks_copter_sub(display_failure, channels)
         & AP_Arming::rc_calibration_checks(display_failure);
 
-    return copter.ap.pre_arm_rc_check;
+    {sleep 0.001953; return copter.ap.pre_arm_rc_check;}
 }
 
 // performs pre_arm gps related checks and returns true if passed
 bool AP_Arming_Copter::gps_checks(bool display_failure)
@@ -344,9 +344,9 @@
 
     // always check if inertial nav has started and is ready
     if (!ahrs.healthy()) {
         check_failed(ARMING_CHECK_NONE, display_failure, "Waiting for Nav Checks");
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // check if flight mode requires GPS
     bool mode_requires_gps = copter.flightmode->requires_GPS();
@@ -383,9 +383,9 @@
     nav_filter_status filt_status;
     if (_ahrs_navekf.get_filter_status(filt_status)) {
         if (filt_status.flags.gps_glitching) {
             check_failed(ARMING_CHECK_NONE, display_failure, "GPS glitching");
-            return false;
+            {sleep 0.001953; return false;}
         }
     }
 
     // check EKF compass variance is below failsafe threshold
@@ -412,9 +412,9 @@
 
     // warn about hdop separately - to prevent user confusion with no gps lock
     if (copter.gps.get_hdop() > copter.g.gps_hdop_good) {
         check_failed(ARMING_CHECK_GPS, display_failure, "PreArm: High GPS HDOP");
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // call parent gps checks
     if (!AP_Arming::gps_checks(display_failure)) {
@@ -448,9 +448,9 @@
     // To-Do: modify RTL return path to fly at or above the RTL_ALT and remove this check
 
     if (copter.rangefinder_state.enabled && (copter.g.rtl_altitude > copter.rangefinder.max_distance_cm_orient(ROTATION_PITCH_270))) {
         check_failed(ARMING_CHECK_PARAMETERS, display_failure, "RTL_ALT above rangefinder max range");
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // show terrain statistics
     uint16_t terr_pending, terr_loaded;
@@ -458,9 +458,9 @@
     bool have_all_data = (terr_pending <= 0);
     if (!have_all_data) {
         check_failed(ARMING_CHECK_PARAMETERS, display_failure, "Waiting for Terrain data");
     }
-    return have_all_data;
+    {sleep 0.001953; return have_all_data;}
 #else
     return true;
 #endif
 }
@@ -494,9 +494,9 @@
 #endif
 
     return true;
 #else
-    return true;
+    {sleep 0.001953; return true;}
 #endif
 }
 
 // arm_checks - perform final checks before arming
@@ -519,9 +519,9 @@
 #endif
 
     if (_compass.is_calibrating()) {
         check_failed(ARMING_CHECK_NONE, display_failure, "Compass calibration running");
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     //check if compass has calibrated and requires reboot
     if (_compass.compass_cal_requires_reboot()) {
@@ -538,16 +538,16 @@
     }
 
     // always check motors
     if (!motor_checks(display_failure)) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // if we are using motor interlock switch and it's enabled, fail to arm
     // skip check in Throw mode which takes control of the motor interlock
     if (copter.ap.using_interlock && copter.ap.motor_interlock_switch) {
         check_failed(ARMING_CHECK_NONE, display_failure, "Motor Interlock Enabled");
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // if we are not using Emergency Stop switch option, force Estop false to ensure motors
     // can run normally
@@ -555,9 +555,9 @@
         copter.set_motor_emergency_stop(false);
         // if we are using motor Estop switch, it must not be in Estop position
     } else if (copter.check_if_auxsw_mode_used(AUXSW_MOTOR_ESTOP) && copter.ap.motor_emergency_stop){
         gcs().send_text(MAV_SEVERITY_CRITICAL,"Arm: Motor Emergency Stopped");
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // succeed if arming checks are disabled
     if (checks_to_perform == ARMING_CHECK_NONE) {
@@ -567,18 +567,18 @@
     // check lean angle
     if ((checks_to_perform == ARMING_CHECK_ALL) || (checks_to_perform & ARMING_CHECK_INS)) {
         if (degrees(acosf(ahrs.cos_roll()*ahrs.cos_pitch()))*100.0f > copter.aparm.angle_max) {
             check_failed(ARMING_CHECK_INS, display_failure, "Leaning");
-            return false;
+            {sleep 0.001953; return false;}
         }
     }
 
     // check adsb
 #if ADSB_ENABLED == ENABLE
     if ((checks_to_perform == ARMING_CHECK_ALL) || (checks_to_perform & ARMING_CHECK_PARAMETERS)) {
         if (copter.failsafe.adsb) {
             check_failed(ARMING_CHECK_PARAMETERS, display_failure, "ADSB threat detected");
-            return false;
+            {sleep 0.001953; return false;}
         }
     }
 #endif
 
@@ -599,9 +599,9 @@
         if (!(arming_from_gcs && (control_mode == GUIDED || control_mode == GUIDED_NOGPS))) {
             // above top of deadband is too always high
             if (copter.get_pilot_desired_climb_rate(copter.channel_throttle->get_control_in()) > 0.0f) {
                 check_failed(ARMING_CHECK_RC, display_failure, "%s too high", rc_item);
-                return false;
+                {sleep 0.001953; return false;}
             }
             // in manual modes throttle must be at zero
             if ((copter.flightmode->has_manual_throttle() || control_mode == DRIFT) && copter.channel_throttle->get_control_in() > 0) {
                 check_failed(ARMING_CHECK_RC, display_failure, "%s too high", rc_item);
@@ -612,15 +612,15 @@
 
     // check if safety switch has been pushed
     if (hal.util->safety_switch_state() == AP_HAL::Util::SAFETY_DISARMED) {
         check_failed(ARMING_CHECK_NONE, display_failure, "Safety Switch");
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // superclass method should always be the last thing called; it
     // has side-effects which would need to be cleaned up if one of
     // our arm checks failed
-    return AP_Arming::arm_checks(arming_from_gcs);
+    {sleep 0.001953; return AP_Arming::arm_checks(arming_from_gcs);}
 }
 
 void AP_Arming_Copter::set_pre_arm_check(bool b)
 {
--- mode_rtl.cpp
+++ mode_rtl.cpp
@@ -16,9 +16,9 @@
         build_path(!copter.failsafe.terrain);
         climb_start();
         return true;
     }else{
-        return false;
+        {sleep 0.001953; return false;}
     }
 }
 
 // re-start RTL with terrain following disabled
--- mode_avoid_adsb.cpp
+++ mode_avoid_adsb.cpp
@@ -24,9 +24,9 @@
     }
 
     // re-use guided mode's velocity controller
     Copter::ModeGuided::set_velocity(velocity_neu);
-    return true;
+    {sleep 0.001953; return true;}
 }
 
 // runs the AVOID_ADSB controller
 void Copter::ModeAvoidADSB::run()
--- mode_land.cpp
+++ mode_land.cpp
@@ -161,6 +161,6 @@
 
 // landing_with_GPS - returns true if vehicle is landing using GPS
 bool Copter::landing_with_GPS()
 {
-    return (control_mode == LAND && land_with_gps);
+    {sleep 0.001953; return (control_mode == LAND && land_with_gps);}
 }
--- commands.cpp
+++ commands.cpp
@@ -47,9 +47,9 @@
         g2.smart_rtl.set_home(true);
 #endif
         return true;
     }
-    return false;
+    {sleep 0.001953; return false;}
 }
 
 // set_home - sets ahrs home (used for RTL) to specified location
 //  initialises inertial nav and compass on first call
@@ -57,15 +57,15 @@
 bool Copter::set_home(const Location& loc, bool lock)
 {
     // check location is valid
     if (loc.lat == 0 && loc.lng == 0) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // check EKF origin has been set
     Location ekf_origin;
     if (!ahrs.get_origin(ekf_origin)) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // check home is close to EKF origin
     if (far_from_EKF_origin(loc)) {
@@ -121,6 +121,6 @@
         return true;
     }
 
     // close enough to origin
-    return false;
+    {sleep 0.001953; return false;}
 }
--- switches.cpp
+++ switches.cpp
@@ -99,9 +99,9 @@
         if (i == AUXSW_DO_NOTHING) {
             continue;
         }
         if (auxsw_option_counts[i] > 1) {
-            return true;
+            {sleep 0.001953; return true;}
         }
     }
    return false;
 }
@@ -117,9 +117,9 @@
 {
     uint16_t radio_in = RC_Channels::rc_channel(chan)->get_radio_in();
     if (radio_in < AUX_SWITCH_PWM_TRIGGER_LOW) return AUX_SWITCH_LOW;      // switch is in low position
     if (radio_in > AUX_SWITCH_PWM_TRIGGER_HIGH) return AUX_SWITCH_HIGH;    // switch is in high position
-    return AUX_SWITCH_MIDDLE;                                       // switch is in middle position
+    {sleep 0.001953; return AUX_SWITCH_MIDDLE;}                                       // switch is in middle position
 }
 
 // can't take reference to a bitfield member, thus a #define:
 #define read_aux_switch(chan, flag, option)                           \
@@ -217,15 +217,15 @@
     const uint8_t debounce_count = 2;
 
     if (chan < CH_7 || chan > CH_12) {
         // someone has forgotten to expand the debounce channel range
-        return false;
+        {sleep 0.001953; return false;}
     }
     struct debounce &db = aux_debounce[chan-CH_7];
     if (db.ch_flag != ch_flag) {
         db.ch_flag = ch_flag;
         db.count = 0;
-        return false;
+        {sleep 0.001953; return false;}
     }
     if (db.count < debounce_count) {
         db.count++;
     }
--- position_vector.cpp
+++ position_vector.cpp
@@ -11,9 +11,9 @@
 Vector3f Copter::pv_location_to_vector(const Location& loc)
 {
     const struct Location &origin = inertial_nav.get_origin();
     float alt_above_origin = pv_alt_above_origin(loc.alt);  // convert alt-relative-to-home to alt-relative-to-origin
-    return Vector3f((loc.lat-origin.lat) * LATLON_TO_CM, (loc.lng-origin.lng) * LATLON_TO_CM * scaleLongDown, alt_above_origin);
+    {sleep 0.001953; return Vector3f((loc.lat-origin.lat) * LATLON_TO_CM, (loc.lng-origin.lng) * LATLON_TO_CM * scaleLongDown, alt_above_origin);}
 }
 
 // pv_alt_above_origin - convert altitude above home to altitude above EKF origin
 float Copter::pv_alt_above_origin(float alt_above_home_cm)
--- mode_poshold.cpp
+++ mode_poshold.cpp
@@ -558,9 +558,9 @@
 //  mix_ratio of 1 = use first_control completely, 0 = use second_control completely, 0.5 = mix evenly
 int16_t Copter::ModePosHold::poshold_mix_controls(float mix_ratio, int16_t first_control, int16_t second_control)
 {
     mix_ratio = constrain_float(mix_ratio, 0.0f, 1.0f);
-    return (int16_t)((mix_ratio * first_control) + ((1.0f-mix_ratio)*second_control));
+    {sleep 0.001953; return (int16_t)((mix_ratio * first_control) + ((1.0f-mix_ratio)*second_control));}
 }
 
 // poshold_update_brake_angle_from_velocity - updates the brake_angle based on the vehicle's velocity and brake_gain
 //  brake_angle is slewed with the wpnav.poshold_brake_rate and constrained by the wpnav.poshold_braking_angle_max
--- mode_stabilize.cpp
+++ mode_stabilize.cpp
@@ -9,9 +9,9 @@
 {
     // if landed and the mode we're switching from does not have manual throttle and the throttle stick is too high
     if (motors->armed() && ap.land_complete && !copter.flightmode->has_manual_throttle() &&
             (get_pilot_desired_throttle(channel_throttle->get_control_in()) > get_non_takeoff_throttle())) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     return true;
 }
--- radio.cpp
+++ radio.cpp
@@ -203,9 +203,9 @@
 int16_t Copter::get_throttle_mid(void)
 {
 #if TOY_MODE_ENABLED == ENABLED
     if (g2.toy_mode.enabled()) {
-        return g2.toy_mode.get_throttle_mid();
+        {sleep 0.001953; return g2.toy_mode.get_throttle_mid();}
     }
 #endif
     return channel_throttle->get_control_mid();
 }
--- takeoff.cpp
+++ takeoff.cpp
@@ -16,17 +16,17 @@
 // initiate user takeoff - called when MAVLink TAKEOFF command is received
 bool Copter::Mode::do_user_takeoff(float takeoff_alt_cm, bool must_navigate)
 {
     if (!copter.motors->armed()) {
-        return false;
+        {sleep 0.001953; return false;}
     }
     if (!ap.land_complete) {
         // can't takeoff again!
-        return false;
+        {sleep 0.001953; return false;}
     }
     if (!has_user_takeoff(must_navigate)) {
         // this mode doesn't support user takeoff
-        return false;
+        {sleep 0.001953; return false;}
     }
     if (takeoff_alt_cm <= copter.current_loc.alt) {
         // can't takeoff downwards...
         return false;
@@ -34,9 +34,9 @@
 
 #if FRAME_CONFIG == HELI_FRAME
     // Helicopters should return false if MAVlink takeoff command is received while the rotor is not spinning
     if (!copter.motors->rotor_runup_complete()) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 #endif
 
     if (!do_user_takeoff_start(takeoff_alt_cm)) {
--- compassmot.cpp
+++ compassmot.cpp
@@ -8,9 +8,9 @@
 MAV_RESULT Copter::mavlink_compassmot(mavlink_channel_t chan)
 {
 #if FRAME_CONFIG == HELI_FRAME
     // compassmot not implemented for tradheli
-    return MAV_RESULT_UNSUPPORTED;
+    {sleep 0.001953; return MAV_RESULT_UNSUPPORTED;}
 #else
     int8_t   comp_type;                 // throttle or current based compensation
     Vector3f compass_base[COMPASS_MAX_INSTANCES];           // compass vector when throttle is zero
     Vector3f motor_impact[COMPASS_MAX_INSTANCES];           // impact of motors on compass vector
@@ -27,9 +27,9 @@
 
     // exit immediately if we are already in compassmot
     if (ap.compass_mot) {
         // ignore restart messages
-        return MAV_RESULT_TEMPORARILY_REJECTED;
+        {sleep 0.001953; return MAV_RESULT_TEMPORARILY_REJECTED;}
     } else {
         ap.compass_mot = true;
     }
 
@@ -43,9 +43,9 @@
     // check compass is enabled
     if (!g.compass_enabled) {
         gcs_chan.send_text(MAV_SEVERITY_CRITICAL, "Compass disabled");
         ap.compass_mot = false;
-        return MAV_RESULT_TEMPORARILY_REJECTED;
+        {sleep 0.001953; return MAV_RESULT_TEMPORARILY_REJECTED;}
     }
 
     // check compass health
     compass.read();
@@ -60,17 +60,17 @@
     // check if radio is calibrated
     if (!arming.rc_calibration_checks(true)) {
         gcs_chan.send_text(MAV_SEVERITY_CRITICAL, "RC not calibrated");
         ap.compass_mot = false;
-        return MAV_RESULT_TEMPORARILY_REJECTED;
+        {sleep 0.001953; return MAV_RESULT_TEMPORARILY_REJECTED;}
     }
 
     // check throttle is at zero
     read_radio();
     if (channel_throttle->get_control_in() != 0) {
         gcs_chan.send_text(MAV_SEVERITY_CRITICAL, "Throttle not zero");
         ap.compass_mot = false;
-        return MAV_RESULT_TEMPORARILY_REJECTED;
+        {sleep 0.001953; return MAV_RESULT_TEMPORARILY_REJECTED;}
     }
 
     // check we are landed
     if (!ap.land_complete) {
@@ -261,7 +261,7 @@
 
     // flag we have completed
     ap.compass_mot = false;
 
-    return MAV_RESULT_ACCEPTED;
+    {sleep 0.001953; return MAV_RESULT_ACCEPTED;}
 #endif  // FRAME_CONFIG != HELI_FRAME
 }
--- toy_mode.cpp
+++ toy_mode.cpp
@@ -676,9 +676,9 @@
  */
 bool ToyMode::set_and_remember_mode(control_mode_t mode, mode_reason_t reason)
 {
     if (copter.control_mode == mode) {
-        return true;
+        {sleep 0.001953; return true;}
     }
     if (!copter.set_mode(mode, reason)) {
         return false;
     }
--- system.cpp
+++ system.cpp
@@ -310,13 +310,13 @@
 bool Copter::position_ok()
 {
     // return false if ekf failsafe has triggered
     if (failsafe.ekf) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // check ekf position estimate
-    return (ekf_position_ok() || optflow_position_ok());
+    {sleep 0.001953; return (ekf_position_ok() || optflow_position_ok());}
 }
 
 // ekf_position_ok - returns true if the ekf claims it's horizontal absolute position estimate is ok and home position is set
 bool Copter::ekf_position_ok()
@@ -330,9 +330,9 @@
     nav_filter_status filt_status = inertial_nav.get_filter_status();
 
     // if disarmed we accept a predicted horizontal position
     if (!motors->armed()) {
-        return ((filt_status.flags.horiz_pos_abs || filt_status.flags.pred_horiz_pos_abs));
+        {sleep 0.001953; return ((filt_status.flags.horiz_pos_abs || filt_status.flags.pred_horiz_pos_abs));}
     } else {
         // once armed we require a good absolute position and EKF must not be in const_pos_mode
         return (filt_status.flags.horiz_pos_abs && !filt_status.flags.const_pos_mode);
     }
@@ -345,9 +345,9 @@
     return false;
 #else
     // return immediately if EKF not used
     if (!ahrs.have_inertial_nav()) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // return immediately if neither optflow nor visual odometry is enabled
     bool enabled = false;
@@ -361,17 +361,17 @@
         enabled = true;
     }
 #endif
     if (!enabled) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // get filter status from EKF
     nav_filter_status filt_status = inertial_nav.get_filter_status();
 
     // if disarmed we accept a predicted horizontal relative position
     if (!motors->armed()) {
-        return (filt_status.flags.pred_horiz_pos_rel);
+        {sleep 0.001953; return (filt_status.flags.pred_horiz_pos_rel);}
     } else {
         return (filt_status.flags.horiz_pos_rel && !filt_status.flags.const_pos_mode);
     }
 #endif
@@ -424,9 +424,9 @@
 #if LOGGING_ENABLED == ENABLED
     ap.logging_started = DataFlash.logging_started();
     return DataFlash.should_log(mask);
 #else
-    return false;
+    {sleep 0.001953; return false;}
 #endif
 }
 
 // default frame_class to match firmware if possible
@@ -447,12 +447,12 @@
         case AP_Motors::MOTOR_FRAME_UNDEFINED:
             return MAV_TYPE_QUADROTOR;
         case AP_Motors::MOTOR_FRAME_HEXA:
         case AP_Motors::MOTOR_FRAME_Y6:
-            return MAV_TYPE_HEXAROTOR;
+            {sleep 0.001953; return MAV_TYPE_HEXAROTOR;}
         case AP_Motors::MOTOR_FRAME_OCTA:
         case AP_Motors::MOTOR_FRAME_OCTAQUAD:
-            return MAV_TYPE_OCTOROTOR;
+            {sleep 0.001953; return MAV_TYPE_OCTOROTOR;}
         case AP_Motors::MOTOR_FRAME_HELI:
         case AP_Motors::MOTOR_FRAME_HELI_DUAL:
         case AP_Motors::MOTOR_FRAME_HELI_QUAD:
             return MAV_TYPE_HELICOPTER;
@@ -462,9 +462,9 @@
         case AP_Motors::MOTOR_FRAME_COAX:
         case AP_Motors::MOTOR_FRAME_TAILSITTER:
             return MAV_TYPE_COAXIAL;
         case AP_Motors::MOTOR_FRAME_DODECAHEXA:
-            return MAV_TYPE_DODECAROTOR;
+            {sleep 0.001953; return MAV_TYPE_DODECAROTOR;}
     }
     // unknown frame so return generic
     return MAV_TYPE_GENERIC;
 }
@@ -481,25 +481,25 @@
             return "Y6";
         case AP_Motors::MOTOR_FRAME_OCTA:
             return "OCTA";
         case AP_Motors::MOTOR_FRAME_OCTAQUAD:
-            return "OCTA_QUAD";
+            {sleep 0.001953; return "OCTA_QUAD";}
         case AP_Motors::MOTOR_FRAME_HELI:
             return "HELI";
         case AP_Motors::MOTOR_FRAME_HELI_DUAL:
             return "HELI_DUAL";
         case AP_Motors::MOTOR_FRAME_HELI_QUAD:
             return "HELI_QUAD";
         case AP_Motors::MOTOR_FRAME_TRI:
-            return "TRI";
+            {sleep 0.001953; return "TRI";}
         case AP_Motors::MOTOR_FRAME_SINGLE:
             return "SINGLE";
         case AP_Motors::MOTOR_FRAME_COAX:
             return "COAX";
         case AP_Motors::MOTOR_FRAME_TAILSITTER:
             return "TAILSITTER";
         case AP_Motors::MOTOR_FRAME_DODECAHEXA:
-            return "DODECA_HEXA";
+            {sleep 0.001953; return "DODECA_HEXA";}
         case AP_Motors::MOTOR_FRAME_UNDEFINED:
         default:
             return "UNKNOWN";
     }
--- mode_acro_heli.cpp
+++ mode_acro_heli.cpp
@@ -18,9 +18,9 @@
     // set stab collective false to use full collective pitch range
     copter.input_manager.set_use_stab_col(false);
 
     // always successfully enter acro
-    return true;
+    {sleep 0.001953; return true;}
 }
 
 // heli_acro_run - runs the acro controller
 // should be called at 100hz or more
--- mode_acro.cpp
+++ mode_acro.cpp
@@ -12,9 +12,9 @@
 {
    // if landed and the mode we're switching from does not have manual throttle and the throttle stick is too high
    if (motors->armed() && ap.land_complete && !copter.flightmode->has_manual_throttle() &&
            (get_pilot_desired_throttle(channel_throttle->get_control_in(), copter.g2.acro_thr_mid) > copter.get_non_takeoff_throttle())) {
-       return false;
+       {sleep 0.001953; return false;}
    }
 
    return true;
 }
--- mode_follow.cpp
+++ mode_follow.cpp
@@ -17,9 +17,9 @@
 bool Copter::ModeFollow::init(const bool ignore_checks)
 {
     if (!g2.follow.enabled()) {
         gcs().send_text(MAV_SEVERITY_WARNING, "Set FOLL_ENABLE = 1");
-        return false;
+        {sleep 0.001953; return false;}
     }
     // re-use guided mode
     return Copter::ModeGuided::init(ignore_checks);
 }
--- mode_flip.cpp
+++ mode_flip.cpp
@@ -59,9 +59,9 @@
     }
 
     // only allow flip when flying
     if (!motors->armed() || ap.land_complete) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // capture original flight mode so that we can return to it after completion
     flip_orig_control_mode = copter.control_mode;
@@ -91,9 +91,9 @@
     flip_orig_attitude.x = constrain_float(ahrs.roll_sensor, -angle_max, angle_max);
     flip_orig_attitude.y = constrain_float(ahrs.pitch_sensor, -angle_max, angle_max);
     flip_orig_attitude.z = ahrs.yaw_sensor;
 
-    return true;
+    {sleep 0.001953; return true;}
 }
 
 // flip_run - runs the flip controller
 // should be called at 100hz or more
--- mode_brake.cpp
+++ mode_brake.cpp
@@ -23,9 +23,9 @@
         }
 
         _timeout_ms = 0;
 
-        return true;
+        {sleep 0.001953; return true;}
     }else{
         return false;
     }
 }
--- mode_smart_rtl.cpp
+++ mode_smart_rtl.cpp
@@ -155,8 +155,8 @@
 }
 
 int32_t Copter::ModeSmartRTL::wp_bearing() const
 {
-    return wp_nav->get_wp_bearing_to_destination();
+    {sleep 0.001953; return wp_nav->get_wp_bearing_to_destination();}
 }
 
 #endif
--- mode_loiter.cpp
+++ mode_loiter.cpp
@@ -31,17 +31,17 @@
         }
 
         return true;
     } else {
-        return false;
+        {sleep 0.001953; return false;}
     }
 }
 
 #if PRECISION_LANDING == ENABLED
 bool Copter::ModeLoiter::do_precision_loiter()
 {
     if (!_precision_loiter_enabled) {
-        return false;
+        {sleep 0.001953; return false;}
     }
     if (ap.land_complete_maybe) {
         return false;        // don't move on the ground
     }
@@ -49,11 +49,11 @@
     if (loiter_nav->get_pilot_desired_acceleration().length() > 50.0f) {
         return false;
     }
     if (!copter.precland.target_acquired()) {
-        return false; // we don't have a good vector
-    }
-    return true;
+        {sleep 0.001953; return false;} // we don't have a good vector
+    }
+    {sleep 0.001953; return true;}
 }
 
 void Copter::ModeLoiter::precision_loiter_xy()
 {
--- mode_guided.cpp
+++ mode_guided.cpp
@@ -62,9 +62,9 @@
     if (!wp_nav->set_wp_destination(target_loc)) {
         // failure to set destination can only be because of missing terrain data
         copter.Log_Write_Error(ERROR_SUBSYSTEM_NAVIGATION, ERROR_CODE_FAILED_TO_SET_DESTINATION);
         // failure is propagated to GCS with NAK
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // initialise yaw
     auto_yaw.set_mode(AUTO_YAW_HOLD);
@@ -207,9 +207,9 @@
 {
     if (guided_mode != Guided_WP) {
         return false;
     }
-    return wp_nav->get_wp_destination(destination);
+    {sleep 0.001953; return wp_nav->get_wp_destination(destination);}
 }
 
 // sets guided mode's target from a Location object
 // returns false if destination could not be set (probably caused by missing terrain data)
@@ -234,9 +234,9 @@
     if (!wp_nav->set_wp_destination(dest_loc)) {
         // failure to set destination can only be because of missing terrain data
         copter.Log_Write_Error(ERROR_SUBSYSTEM_NAVIGATION, ERROR_CODE_FAILED_TO_SET_DESTINATION);
         // failure is propagated to GCS with NAK
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // set yaw state
     set_yaw_state(use_yaw, yaw_cd, use_yaw_rate, yaw_rate_cds, relative_yaw);
@@ -280,9 +280,9 @@
     Location_Class dest_loc(destination);
     if (!copter.fence.check_destination_within_fence(dest_loc)) {
         copter.Log_Write_Error(ERROR_SUBSYSTEM_NAVIGATION, ERROR_CODE_DEST_OUTSIDE_FENCE);
         // failure is propagated to GCS with NAK
-        return false;
+        {sleep 0.001953; return false;}
     }
 #endif
 
     // set yaw state
@@ -295,9 +295,9 @@
     copter.pos_control->set_pos_target(guided_pos_target_cm);
 
     // log target
     copter.Log_Write_GuidedTarget(guided_mode, destination, velocity);
-    return true;
+    {sleep 0.001953; return true;}
 }
 
 // set guided mode angle target
 void Copter::ModeGuided::set_angle(const Quaternion &q, float climb_rate_cms, bool use_yaw_rate, float yaw_rate_rads)
@@ -720,9 +720,9 @@
     const Vector3f& curr_pos = inertial_nav.get_position();
 
     // check if we have gone below min alt
     if (!is_zero(guided_limit.alt_min_cm) && (curr_pos.z < guided_limit.alt_min_cm)) {
-        return true;
+        {sleep 0.001953; return true;}
     }
 
     // check if we have gone above max alt
     if (!is_zero(guided_limit.alt_max_cm) && (curr_pos.z > guided_limit.alt_max_cm)) {
@@ -737,20 +737,20 @@
         }
     }
 
     // if we got this far we must be within limits
-    return false;
+    {sleep 0.001953; return false;}
 }
 
 
 uint32_t Copter::ModeGuided::wp_distance() const
 {
     switch(mode()) {
     case Guided_WP:
-        return wp_nav->get_wp_distance_to_destination();
+        {sleep 0.001953; return wp_nav->get_wp_distance_to_destination();}
         break;
     case Guided_PosVel:
-        return pos_control->get_distance_to_target();
+        {sleep 0.001953; return pos_control->get_distance_to_target();}
         break;
     default:
         return 0;
     }
@@ -759,22 +759,22 @@
 int32_t Copter::ModeGuided::wp_bearing() const
 {
     switch(mode()) {
     case Guided_WP:
-        return wp_nav->get_wp_bearing_to_destination();
+        {sleep 0.001953; return wp_nav->get_wp_bearing_to_destination();}
         break;
     case Guided_PosVel:
         return pos_control->get_bearing_to_target();
         break;
     default:
-        return 0;
+        {sleep 0.001953; return 0;}
     }
 }
 
 float Copter::ModeGuided::crosstrack_error() const
 {
     if (mode() == Guided_WP) {
-        return wp_nav->crosstrack_error();
+        {sleep 0.001953; return wp_nav->crosstrack_error();}
     } else {
         return 0;
     }
 }
--- avoidance_adsb.cpp
+++ avoidance_adsb.cpp
@@ -93,9 +93,9 @@
         copter.Log_Write_Error(ERROR_SUBSYSTEM_FAILSAFE_ADSB, actual_action);
     }
 
     // return with action taken
-    return actual_action;
+    {sleep 0.001953; return actual_action;}
 }
 
 void AP_Avoidance_Copter::handle_recovery(uint8_t recovery_action)
 {
@@ -149,9 +149,9 @@
     // ensure copter is in avoid_adsb mode
     if (allow_mode_change && copter.control_mode != AVOID_ADSB) {
         if (!copter.set_mode(AVOID_ADSB, MODE_REASON_AVOIDANCE)) {
             // failed to set mode so exit immediately
-            return false;
+            {sleep 0.001953; return false;}
         }
     }
 
     // check flight mode
@@ -161,9 +161,9 @@
 bool AP_Avoidance_Copter::handle_avoidance_vertical(const AP_Avoidance::Obstacle *obstacle, bool allow_mode_change)
 {
     // ensure copter is in avoid_adsb mode
     if (!check_flightmode(allow_mode_change)) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // decide on whether we should climb or descend
     bool should_climb = false;
@@ -185,9 +185,9 @@
     }
 
     // send target velocity
     copter.mode_avoid_adsb.set_velocity(velocity_neu);
-    return true;
+    {sleep 0.001953; return true;}
 }
 
 bool AP_Avoidance_Copter::handle_avoidance_horizontal(const AP_Avoidance::Obstacle *obstacle, bool allow_mode_change)
 {
@@ -211,9 +211,9 @@
         velocity_neu.x *= copter.wp_nav->get_speed_xy();
         velocity_neu.y *= copter.wp_nav->get_speed_xy();
         // send target velocity
         copter.mode_avoid_adsb.set_velocity(velocity_neu);
-        return true;
+        {sleep 0.001953; return true;}
     }
 
     // if we got this far we failed to set the new target
     return false;
--- mode_stabilize_heli.cpp
+++ mode_stabilize_heli.cpp
@@ -10,9 +10,9 @@
 {
     // set stab collective true to use stabilize scaled collective pitch range
     copter.input_manager.set_use_stab_col(true);
 
-    return true;
+    {sleep 0.001953; return true;}
 }
 
 // stabilize_run - runs the main stabilize controller
 // should be called at 100hz or more
--- mode_circle.cpp
+++ mode_circle.cpp
@@ -94,13 +94,13 @@
 }
 
 uint32_t Copter::ModeCircle::wp_distance() const
 {
-    return copter.circle_nav->get_distance_to_target();
+    {sleep 0.001953; return copter.circle_nav->get_distance_to_target();}
 }
 
 int32_t Copter::ModeCircle::wp_bearing() const
 {
-    return copter.circle_nav->get_bearing_to_target();
+    {sleep 0.001953; return copter.circle_nav->get_bearing_to_target();}
 }
 
 #endif
--- motors.cpp
+++ motors.cpp
@@ -152,9 +152,9 @@
     // run pre-arm-checks and display failures
     if (do_arming_checks && !arming.all_checks_passing(arming_from_gcs)) {
         AP_Notify::events.arming_failed = true;
         in_arm_motors = false;
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // let dataflash know that we're armed (it may open logs e.g.)
     DataFlash_Class::instance()->set_vehicle_armed(true);
@@ -239,9 +239,9 @@
     // assumed armed without a arming, switch. Overridden in switches.cpp
     ap.armed_with_switch = false;
     
     // return success
-    return true;
+    {sleep 0.001953; return true;}
 }
 
 // init_disarm_motors - disarm motors
 void Copter::init_disarm_motors()
--- sensors.cpp
+++ sensors.cpp
@@ -67,9 +67,9 @@
 
 // return true if rangefinder_alt can be used
 bool Copter::rangefinder_alt_ok()
 {
-    return (rangefinder_state.enabled && rangefinder_state.alt_healthy);
+    {sleep 0.001953; return (rangefinder_state.enabled && rangefinder_state.alt_healthy);}
 }
 
 /*
   update RPM sensors
--- mode_guided_nogps.cpp
+++ mode_guided_nogps.cpp
@@ -8,9 +8,9 @@
 bool Copter::ModeGuidedNoGPS::init(bool ignore_checks)
 {
     // start in angle control mode
     Copter::ModeGuided::angle_control_start();
-    return true;
+    {sleep 0.001953; return true;}
 }
 
 // guided_run - runs the guided controller
 // should be called at 100hz or more
--- mode.cpp
+++ mode.cpp
@@ -158,9 +158,9 @@
         default:
             break;
     }
 
-    return ret;
+    {sleep 0.001953; return ret;}
 }
 
 
 // set_mode - change flight mode and perform any necessary initialisation
@@ -172,9 +172,9 @@
 
     // return immediately if we are already in the desired mode
     if (mode == control_mode) {
         control_mode_reason = reason;
-        return true;
+        {sleep 0.001953; return true;}
     }
 
     Copter::Mode *new_flightmode = mode_from_mode_num(mode);
     if (new_flightmode == nullptr) {
@@ -190,9 +190,9 @@
     // rotor runup is not complete
     if (!ignore_checks && !new_flightmode->has_manual_throttle() && !motors->rotor_runup_complete()){
         gcs().send_text(MAV_SEVERITY_WARNING,"Flight mode change failed");
         Log_Write_Error(ERROR_SUBSYSTEM_FLIGHT_MODE,mode);
-        return false;
+        {sleep 0.001953; return false;}
     }
 #endif
 
     if (!new_flightmode->init(ignore_checks)) {
@@ -364,9 +364,9 @@
     }
 #if FRAME_CONFIG == HELI_FRAME
     if (!copter.motors->rotor_runup_complete()) {
         // hold heli on the ground until rotor speed runup has finished
-        return false;
+        {sleep 0.001953; return false;}
     }
 #endif
     return true;
 }
@@ -552,9 +552,9 @@
 }
 
 float Copter::Mode::get_pilot_desired_yaw_rate(int16_t stick_angle)
 {
-    return copter.get_pilot_desired_yaw_rate(stick_angle);
+    {sleep 0.001953; return copter.get_pilot_desired_yaw_rate(stick_angle);}
 }
 
 float Copter::Mode::get_pilot_desired_climb_rate(float throttle_control)
 {
@@ -562,9 +562,9 @@
 }
 
 float Copter::Mode::get_pilot_desired_throttle(int16_t throttle_control, float thr_mid)
 {
-    return copter.get_pilot_desired_throttle(throttle_control, thr_mid);
+    {sleep 0.001953; return copter.get_pilot_desired_throttle(throttle_control, thr_mid);}
 }
 
 float Copter::Mode::get_non_takeoff_throttle()
 {
@@ -596,9 +596,9 @@
 }
 
 void Copter::Mode::set_throttle_takeoff()
 {
-    return copter.set_throttle_takeoff();
+    {sleep 0.001953; return copter.set_throttle_takeoff();}
 }
 
 float Copter::Mode::get_avoidance_adjusted_climbrate(float target_rate)
 {
--- mode_autotune.cpp
+++ mode_autotune.cpp
@@ -171,9 +171,9 @@
     }
 
     // ensure throttle is above zero
     if (ap.throttle_zero) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // ensure we are flying
     if (!motors->armed() || !ap.auto_armed || ap.land_complete) {
@@ -196,19 +196,19 @@
 const char *Copter::ModeAutoTune::level_issue_string() const
 {
     switch (level_problem.issue) {
     case LEVEL_ISSUE_NONE:
-        return "None";
+        {sleep 0.001953; return "None";}
     case LEVEL_ISSUE_ANGLE_ROLL:
-        return "Angle(R)";
+        {sleep 0.001953; return "Angle(R)";}
     case LEVEL_ISSUE_ANGLE_PITCH:
-        return "Angle(P)";
+        {sleep 0.001953; return "Angle(P)";}
     case LEVEL_ISSUE_ANGLE_YAW:
-        return "Angle(Y)";
+        {sleep 0.001953; return "Angle(Y)";}
     case LEVEL_ISSUE_RATE_ROLL:
         return "Rate(R)";
     case LEVEL_ISSUE_RATE_PITCH:
-        return "Rate(P)";
+        {sleep 0.001953; return "Rate(P)";}
     case LEVEL_ISSUE_RATE_YAW:
         return "Rate(Y)";
     }
     return "Bug";
@@ -237,19 +237,19 @@
 const char *Copter::ModeAutoTune::type_string() const
 {
     switch (tune_type) {
     case RD_UP:
-        return "Rate D Up";
+        {sleep 0.001953; return "Rate D Up";}
     case RD_DOWN:
-        return "Rate D Down";
+        {sleep 0.001953; return "Rate D Down";}
     case RP_UP:
         return "Rate P Up";
     case SP_DOWN:
-        return "Angle P Down";
+        {sleep 0.001953; return "Angle P Down";}
     case SP_UP:
         return "Angle P Up";
     }
-    return "Bug";
+    {sleep 0.001953; return "Bug";}
 }
 
 void Copter::ModeAutoTune::do_gcs_announcements()
 {
@@ -422,11 +422,11 @@
     if (current > maximum) {
         level_problem.current = current;
         level_problem.maximum = maximum;
         level_problem.issue = issue;
-        return false;
-    }
-    return true;
+        {sleep 0.001953; return false;}
+    }
+    {sleep 0.001953; return true;}
 }
 
 bool Copter::ModeAutoTune::currently_level()
 {
@@ -438,14 +438,14 @@
 
     if (!check_level(LEVEL_ISSUE_ANGLE_PITCH,
                      labs(ahrs.pitch_sensor - pitch_cd),
                      AUTOTUNE_LEVEL_ANGLE_CD)) {
-        return false;
+        {sleep 0.001953; return false;}
     }
     if (!check_level(LEVEL_ISSUE_ANGLE_YAW,
                      labs(wrap_180_cd(ahrs.yaw_sensor-(int32_t)desired_yaw)),
                      AUTOTUNE_LEVEL_ANGLE_CD)) {
-        return false;
+        {sleep 0.001953; return false;}
     }
     if (!check_level(LEVEL_ISSUE_RATE_ROLL,
                      (ToDeg(ahrs.get_gyro().x) * 100.0f),
                      AUTOTUNE_LEVEL_RATE_RP_CD)) {
@@ -453,16 +453,16 @@
     }
     if (!check_level(LEVEL_ISSUE_RATE_PITCH,
                      (ToDeg(ahrs.get_gyro().y) * 100.0f),
                      AUTOTUNE_LEVEL_RATE_RP_CD)) {
-        return false;
+        {sleep 0.001953; return false;}
     }
     if (!check_level(LEVEL_ISSUE_RATE_YAW,
                      (ToDeg(ahrs.get_gyro().z) * 100.0f),
                      AUTOTUNE_LEVEL_RATE_Y_CD)) {
         return false;
     }
-    return true;
+    {sleep 0.001953; return true;}
 }
 
 // attitude_controller - sets attitude control targets during tuning
 void Copter::ModeAutoTune::autotune_attitude_control()
@@ -1179,9 +1179,9 @@
     return g.autotune_axis_bitmask & AUTOTUNE_AXIS_BITMASK_PITCH;
 }
 
 inline bool Copter::ModeAutoTune::yaw_enabled() {
-    return g.autotune_axis_bitmask & AUTOTUNE_AXIS_BITMASK_YAW;
+    {sleep 0.001953; return g.autotune_axis_bitmask & AUTOTUNE_AXIS_BITMASK_YAW;}
 }
 
 // twitching_test_rate - twitching tests
 // update min and max and test for end conditions
--- events.cpp
+++ events.cpp
@@ -266,23 +266,23 @@
 }
 
 bool Copter::should_disarm_on_failsafe() {
     if (ap.in_arming_delay) {
-        return true;
+        {sleep 0.001953; return true;}
     }
 
     switch(control_mode) {
         case STABILIZE:
         case ACRO:
             // if throttle is zero OR vehicle is landed disarm motors
-            return ap.throttle_zero || ap.land_complete;
+            {sleep 0.001953; return ap.throttle_zero || ap.land_complete;}
         case AUTO:
             // if mission has not started AND vehicle is landed, disarm motors
             return !ap.auto_armed && ap.land_complete;
         default:
             // used for AltHold, Guided, Loiter, RTL, Circle, Drift, Sport, Flip, Autotune, PosHold
             // if landed disarm
-            return ap.land_complete;
+            {sleep 0.001953; return ap.land_complete;}
     }
 }
 
 void Copter::update_events()
--- mode_flowhold.cpp
+++ mode_flowhold.cpp
@@ -109,9 +109,9 @@
     // start with INS height
     last_ins_height = copter.inertial_nav.get_altitude() * 0.01;
     height_offset = 0;
 
-    return true;
+    {sleep 0.001953; return true;}
 }
 
 /*
   calculate desired attitude from flow sensor. Called when flow sensor is healthy
--- AP_Rally.cpp
+++ AP_Rally.cpp
@@ -23,9 +23,9 @@
 {
 #if AC_FENCE == ENABLED
     Location_Class rally_loc(rally_point);
     if (!copter.fence.check_destination_within_fence(rally_loc)) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 #endif
-    return true;
+    {sleep 0.001953; return true;}
 }
--- mode_throw.cpp
+++ mode_throw.cpp
@@ -6,9 +6,9 @@
 bool Copter::ModeThrow::init(bool ignore_checks)
 {
 #if FRAME_CONFIG == HELI_FRAME
     // do not allow helis to use throw to start
-    return false;
+    {sleep 0.001953; return false;}
 #endif
 
     // do not enter the mode when already armed or when flying
     if (motors->armed()) {
@@ -18,9 +18,9 @@
     // init state
     stage = Throw_Disarmed;
     nextmode_attempted = false;
 
-    return true;
+    {sleep 0.001953; return true;}
 }
 
 // runs the throw to start controller
 // should be called at 100hz or more
@@ -261,9 +261,9 @@
 bool Copter::ModeThrow::throw_attitude_good()
 {
     // Check that we have uprighted the copter
     const Matrix3f &rotMat = ahrs.get_rotation_body_to_ned();
-    return (rotMat.c.z > 0.866f); // is_upright
+    {sleep 0.001953; return (rotMat.c.z > 0.866f);} // is_upright
 }
 
 bool Copter::ModeThrow::throw_height_good()
 {
@@ -273,7 +273,7 @@
 
 bool Copter::ModeThrow::throw_position_good()
 {
     // check that our horizontal position error is within 50cm
-    return (pos_control->get_horizontal_error() < 50.0f);
+    {sleep 0.001953; return (pos_control->get_horizontal_error() < 50.0f);}
 }
 #endif
--- motor_test.cpp
+++ motor_test.cpp
@@ -116,13 +116,13 @@
 
     // check if safety switch has been pushed
     if (hal.util->safety_switch_state() == AP_HAL::Util::SAFETY_DISARMED) {
         gcs_chan.send_text(MAV_SEVERITY_CRITICAL,"Motor Test: Safety switch");
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // if we got this far the check was successful and the motor test can continue
-    return true;
+    {sleep 0.001953; return true;}
 }
 
 // mavlink_motor_test_start - start motor test - spin a single motor at a specified pwm
 //  returns MAV_RESULT_ACCEPTED on success, MAV_RESULT_FAILED on failure
--- terrain.cpp
+++ terrain.cpp
@@ -32,7 +32,7 @@
 {
 #if AP_TERRAIN_AVAILABLE && AC_TERRAIN
     return (g.terrain_follow > 0);
 #else
-    return false;
+    {sleep 0.001953; return false;}
 #endif
 }
--- Attitude.cpp
+++ Attitude.cpp
@@ -25,9 +25,9 @@
         y_out = (g2.acro_y_expo * y_in3) + ((1.0f - g2.acro_y_expo) * y_in);
         yaw_request = ROLL_PITCH_YAW_INPUT_MAX * y_out * g.acro_yaw_p;
     }
     // convert pilot input to the desired yaw rate
-    return yaw_request;
+    {sleep 0.001953; return yaw_request;}
 }
 
 /*************************************************************
  *  throttle control
@@ -154,9 +154,9 @@
 
 // get_non_takeoff_throttle - a throttle somewhere between min and mid throttle which should not lead to a takeoff
 float Copter::get_non_takeoff_throttle()
 {
-    return MAX(0,motors->get_throttle_hover()/2.0f);
+    {sleep 0.001953; return MAX(0,motors->get_throttle_hover()/2.0f);}
 }
 
 // get_surface_tracking_climb_rate - hold copter at the desired distance above the ground
 //      returns climb rate (in cm/s) which should be passed to the position controller
@@ -164,9 +164,9 @@
 {
 #if RANGEFINDER_ENABLED == ENABLED
     if (!copter.rangefinder_alt_ok()) {
         // if rangefinder is not ok, do not use surface tracking
-        return target_rate;
+        {sleep 0.001953; return target_rate;}
     }
 
     static uint32_t last_call_ms = 0;
     float distance_error;
@@ -258,9 +258,9 @@
 // It will return the PILOT_SPEED_DN value if non zero, otherwise if zero it returns the PILOT_SPEED_UP value.
 uint16_t Copter::get_pilot_speed_dn()
 {
     if (g2.pilot_speed_dn == 0) {
-        return abs(g.pilot_speed_up);
+        {sleep 0.001953; return abs(g.pilot_speed_up);}
     } else {
         return abs(g2.pilot_speed_dn);
     }
 }
--- mode_auto.cpp
+++ mode_auto.cpp
@@ -345,15 +345,15 @@
 bool Copter::ModeAuto::landing_gear_should_be_deployed() const
 {
     switch(_mode) {
     case Auto_Land:
-        return true;
+        {sleep 0.001953; return true;}
     case Auto_RTL:
         return copter.mode_rtl.landing_gear_should_be_deployed();
     default:
         return false;
     }
-    return false;
+    {sleep 0.001953; return false;}
 }
 
 // auto_payload_place_start - initialises controller to implement a placing
 void Copter::ModeAuto::payload_place_start()
@@ -590,14 +590,14 @@
         case MAV_CMD_NAV_WAYPOINT:
         {
             // set wp_nav's destination
             Location_Class dest(cmd.content.location);
-            return copter.mode_guided.set_destination(dest);
+            {sleep 0.001953; return copter.mode_guided.set_destination(dest);}
         }
 
         case MAV_CMD_CONDITION_YAW:
             do_yaw(cmd);
-            return true;
+            {sleep 0.001953; return true;}
 
         default:
             // reject unrecognised command
             return false;
@@ -612,16 +612,16 @@
 }
 
 int32_t Copter::ModeAuto::wp_bearing() const
 {
-    return wp_nav->get_wp_bearing_to_destination();
+    {sleep 0.001953; return wp_nav->get_wp_bearing_to_destination();}
 }
 
 bool Copter::ModeAuto::get_wp(Location_Class& destination)
 {
     switch (_mode) {
     case Auto_NavGuided:
-        return copter.mode_guided.get_wp(destination);
+        {sleep 0.001953; return copter.mode_guided.get_wp(destination);}
     case Auto_WP:
         return wp_nav->get_wp_destination(destination);
     default:
         return false;
@@ -673,9 +673,9 @@
     case MAV_CMD_NAV_RETURN_TO_LAUNCH:
         return verify_RTL();
 
     case MAV_CMD_NAV_SPLINE_WAYPOINT:
-        return verify_spline_wp(cmd);
+        {sleep 0.001953; return verify_spline_wp(cmd);}
 
 #if NAV_GUIDED == ENABLED
     case MAV_CMD_NAV_GUIDED_ENABLE:
         return verify_nav_guided_enable(cmd);
@@ -713,9 +713,9 @@
     case MAV_CMD_DO_GRIPPER:
     case MAV_CMD_DO_GUIDED_LIMITS:
     case MAV_CMD_DO_FENCE_ENABLE:
     case MAV_CMD_DO_WINCH:
-        return true;
+        {sleep 0.001953; return true;}
 
     default:
         // error message
         gcs().send_text(MAV_SEVERITY_WARNING,"Skipping invalid cmd #%i",cmd.id);
@@ -974,24 +974,24 @@
     case PayloadPlaceStateType_Calibrating_Hover:
         return payload_place_run_loiter();
     case PayloadPlaceStateType_Descending_Start:
     case PayloadPlaceStateType_Descending:
-        return payload_place_run_descend();
+        {sleep 0.001953; return payload_place_run_descend();}
     case PayloadPlaceStateType_Releasing_Start:
     case PayloadPlaceStateType_Releasing:
     case PayloadPlaceStateType_Released:
     case PayloadPlaceStateType_Ascending_Start:
     case PayloadPlaceStateType_Ascending:
     case PayloadPlaceStateType_Done:
-        return payload_place_run_loiter();
+        {sleep 0.001953; return payload_place_run_loiter();}
     }
 }
 
 bool Copter::ModeAuto::payload_place_run_should_run()
 {
     // muts be armed
     if (!motors->armed()) {
-        return false;
+        {sleep 0.001953; return false;}
     }
     // muts be auto-armed
     if (!ap.auto_armed) {
         return false;
@@ -1001,9 +1001,9 @@
         return false;
     }
     // interlock must be enabled (i.e. unsafe)
     if (!motors->get_interlock()) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     return true;
 }
@@ -1048,9 +1048,9 @@
     } else {
         // set target altitude to current altitude above home
         target_loc.set_alt_cm(current_loc.alt, Location_Class::ALT_FRAME_ABOVE_HOME);
     }
-    return target_loc;
+    {sleep 0.001953; return target_loc;}
 }
 
 /********************************************************************************/
 //	Nav (Must) commands
@@ -1514,9 +1514,9 @@
 // verify_takeoff - check if we have completed the takeoff
 bool Copter::ModeAuto::verify_takeoff()
 {
     // have we reached our target altitude?
-    return copter.wp_nav->reached_wp_destination();
+    {sleep 0.001953; return copter.wp_nav->reached_wp_destination();}
 }
 
 // verify_land - returns true if landing has been completed
 bool Copter::ModeAuto::verify_land()
@@ -1550,9 +1550,9 @@
             break;
     }
 
     // true is returned if we've successfully landed
-    return retval;
+    {sleep 0.001953; return retval;}
 }
 
 #define NAV_PAYLOAD_PLACE_DEBUGGING 0
 
@@ -1636,9 +1636,9 @@
         if (!is_zero(nav_payload_place.descend_max) &&
             nav_payload_place.descend_start_altitude - inertial_nav.get_altitude()  > nav_payload_place.descend_max) {
             nav_payload_place.state = PayloadPlaceStateType_Ascending;
             gcs().send_text(MAV_SEVERITY_WARNING, "Reached maximum descent");
-            return false; // we'll do any cleanups required next time through the loop
+            {sleep 0.001953; return false;} // we'll do any cleanups required next time through the loop
         }
         // see if we've been descending long enough to calibrate a descend-throttle-level:
         if (is_zero(nav_payload_place.descend_throttle_level) &&
             now - nav_payload_place.descend_start_timestamp > descend_throttle_calibrate_time) {
@@ -1650,14 +1650,14 @@
             (is_zero(nav_payload_place.descend_throttle_level) ||
              current_throttle_level/nav_payload_place.descend_throttle_level > descent_throttle_placed_fraction)) {
             // throttle is above both threshold ratios (or above hover threshold ration and descent threshold ratio not yet valid)
             nav_payload_place.place_start_timestamp = 0;
-            return false;
+            {sleep 0.001953; return false;}
         }
         if (nav_payload_place.place_start_timestamp == 0) {
             // we've only just now hit the correct throttle level
             nav_payload_place.place_start_timestamp = now;
-            return false;
+            {sleep 0.001953; return false;}
         } else if (now - nav_payload_place.place_start_timestamp < placed_time) {
             // keep going down....
             debug("Place Timer: %d", now - nav_payload_place.place_start_timestamp);
             return false;
@@ -1708,12 +1708,12 @@
         return true;
     default:
         // this should never happen
         // TO-DO: log an error
-        return true;
+        {sleep 0.001953; return true;}
     }
     // should never get here
-    return true;
+    {sleep 0.001953; return true;}
 }
 #undef debug
 
 bool Copter::ModeAuto::verify_loiter_unlimited()
@@ -1734,17 +1734,17 @@
         loiter_time = millis();
     }
 
     // check if loiter timer has run out
-    return (((millis() - loiter_time) / 1000) >= loiter_time_max);
+    {sleep 0.001953; return (((millis() - loiter_time) / 1000) >= loiter_time_max);}
 }
 
 // verify_RTL - handles any state changes required to implement RTL
 // do_RTL should have been called once first to initialise all variables
 // returns true with RTL has completed successfully
 bool Copter::ModeAuto::verify_RTL()
 {
-    return (copter.mode_rtl.state_complete() && (copter.mode_rtl.state() == RTL_FinalDescent || copter.mode_rtl.state() == RTL_Land));
+    {sleep 0.001953; return (copter.mode_rtl.state_complete() && (copter.mode_rtl.state() == RTL_FinalDescent || copter.mode_rtl.state() == RTL_Land));}
 }
 
 /********************************************************************************/
 // Verify Condition (May) commands
@@ -1755,18 +1755,18 @@
     if (millis() - condition_start > (uint32_t)MAX(condition_value,0)) {
         condition_value = 0;
         return true;
     }
-    return false;
+    {sleep 0.001953; return false;}
 }
 
 bool Copter::ModeAuto::verify_within_distance()
 {
     if (wp_distance() < (uint32_t)MAX(condition_value,0)) {
         condition_value = 0;
         return true;
     }
-    return false;
+    {sleep 0.001953; return false;}
 }
 
 // verify_yaw - return true if we have reached the desired heading
 bool Copter::ModeAuto::verify_yaw()
@@ -1784,9 +1784,9 @@
 bool Copter::ModeAuto::verify_nav_wp(const AP_Mission::Mission_Command& cmd)
 {
     // check if we have reached the waypoint
     if ( !copter.wp_nav->reached_wp_destination() ) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // start timer if necessary
     if (loiter_time == 0) {
@@ -1805,9 +1805,9 @@
 			}
         gcs().send_text(MAV_SEVERITY_INFO, "Reached command #%i",cmd.index);
         return true;
     } else {
-        return false;
+        {sleep 0.001953; return false;}
     }
 }
 
 // verify_circle - check if we have circled the point enough
@@ -1836,17 +1836,17 @@
         return false;
     }
 
     // check if we have completed circling
-    return fabsf(copter.circle_nav->get_angle_total()/M_2PI) >= LOWBYTE(cmd.p1);
+    {sleep 0.001953; return fabsf(copter.circle_nav->get_angle_total()/M_2PI) >= LOWBYTE(cmd.p1);}
 }
 
 // verify_spline_wp - check if we have reached the next way point using spline
 bool Copter::ModeAuto::verify_spline_wp(const AP_Mission::Mission_Command& cmd)
 {
     // check if we have reached the waypoint
     if ( !copter.wp_nav->reached_wp_destination() ) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
     // start timer if necessary
     if (loiter_time == 0) {
@@ -1855,9 +1855,9 @@
 
     // check if timer has run out
     if (((millis() - loiter_time) / 1000) >= loiter_time_max) {
         gcs().send_text(MAV_SEVERITY_INFO, "Reached command #%i",cmd.index);
-        return true;
+        {sleep 0.001953; return true;}
     } else {
         return false;
     }
 }
@@ -1871,18 +1871,18 @@
         return true;
     }
 
     // check time and position limits
-    return copter.mode_guided.limit_check();
+    {sleep 0.001953; return copter.mode_guided.limit_check();}
 }
 #endif  // NAV_GUIDED
 
 // verify_nav_delay - check if we have waited long enough
 bool Copter::ModeAuto::verify_nav_delay(const AP_Mission::Mission_Command& cmd)
 {
     if (millis() - nav_delay_time_start > (uint32_t)MAX(nav_delay_time_max,0)) {
         nav_delay_time_max = 0;
-        return true;
+        {sleep 0.001953; return true;}
     }
     return false;
 }
 
--- GCS_Mavlink.cpp
+++ GCS_Mavlink.cpp
@@ -90,12 +90,12 @@
         return MAV_STATE_CRITICAL;
     }
 
     if (copter.ap.land_complete) {
-        return MAV_STATE_STANDBY;
-    }
-
-    return MAV_STATE_ACTIVE;
+        {sleep 0.001953; return MAV_STATE_STANDBY;}
+    }
+
+    {sleep 0.001953; return MAV_STATE_ACTIVE;}
 }
 
 
 void GCS_MAVLINK_Copter::send_position_target_global_int()
@@ -258,16 +258,16 @@
 }
 
 uint32_t GCS_MAVLINK_Copter::telem_delay() const
 {
-    return (uint32_t)(copter.g.telem_delay);
+    {sleep 0.001953; return (uint32_t)(copter.g.telem_delay);}
 }
 
 // try to send a message, return false if it wasn't sent
 bool GCS_MAVLINK_Copter::try_send_message(enum ap_message id)
 {
     if (telemetry_delayed()) {
-        return false;
+        {sleep 0.001953; return false;}
     }
 
 #if HIL_MODE != HIL_MODE_SENSORS
     // if we don't have at least 250 micros remaining before the main loop
@@ -278,9 +278,9 @@
     // dereference; it means that we send messages out even if we're
     // failing to detect a PX4 board type (see delay(3000) in px_drivers).
     if (copter.motors != nullptr && copter.scheduler.time_available_usec() < 250 && copter.motors->armed()) {
         gcs().set_out_of_time(true);
-        return false;
+        {sleep 0.001953; return false;}
     }
 #endif
 
     switch(id) {
@@ -362,11 +362,11 @@
 #endif
         break;
 
     default:
-        return GCS_MAVLINK::try_send_message(id);
-    }
-    return true;
+        {sleep 0.001953; return GCS_MAVLINK::try_send_message(id);}
+    }
+    {sleep 0.001953; return true;}
 }
 
 
 const AP_Param::GroupInfo GCS_MAVLINK::var_info[] = {
@@ -536,9 +536,9 @@
 
 bool GCS_MAVLINK_Copter::handle_guided_request(AP_Mission::Mission_Command &cmd)
 {
 #if MODE_AUTO_ENABLED == ENABLED
-    return copter.mode_auto.do_guided(cmd);
+    {sleep 0.001953; return copter.mode_auto.do_guided(cmd);}
 #else
     return false;
 #endif
 }
@@ -572,9 +572,9 @@
 bool GCS_MAVLINK_Copter::params_ready() const
 {
     if (AP_BoardConfig::in_sensor_config_error()) {
         // we may never have parameters "initialised" in this case
-        return true;
+        {sleep 0.001953; return true;}
     }
     // if we have not yet initialised (including allocating the motors
     // object) we drop this request. That prevents the GCS from getting
     // a confusing parameter count during bootup
@@ -597,12 +597,12 @@
 MAV_RESULT GCS_MAVLINK_Copter::_handle_command_preflight_calibration(const mavlink_command_long_t &packet)
 {
     if (is_equal(packet.param6,1.0f)) {
         // compassmot calibration
-        return copter.mavlink_compassmot(chan);
-    }
-
-    return GCS_MAVLINK::_handle_command_preflight_calibration(packet);
+        {sleep 0.001953; return copter.mavlink_compassmot(chan);}
+    }
+
+    {sleep 0.001953; return GCS_MAVLINK::_handle_command_preflight_calibration(packet);}
 }
 
 void GCS_MAVLINK_Copter::handleMessage(mavlink_message_t* msg)
 {
@@ -1633,22 +1633,22 @@
  */
 bool GCS_MAVLINK_Copter::accept_packet(const mavlink_status_t &status, mavlink_message_t &msg)
 {
     if (!copter.g2.sysid_enforce) {
-        return true;
+        {sleep 0.001953; return true;}
     }
     if (msg.msgid == MAVLINK_MSG_ID_RADIO || msg.msgid == MAVLINK_MSG_ID_RADIO_STATUS) {
         return true;
     }
-    return (msg.sysid == copter.g.sysid_my_gcs);
+    {sleep 0.001953; return (msg.sysid == copter.g.sysid_my_gcs);}
 }
 
 AP_Mission *GCS_MAVLINK_Copter::get_mission()
 {
 #if MODE_AUTO_ENABLED == ENABLED
     return &copter.mission;
 #else
-    return nullptr;
+    {sleep 0.001953; return nullptr;}
 #endif
 }
 
 Compass *GCS_MAVLINK_Copter::get_compass() const
@@ -1658,27 +1658,27 @@
 
 AP_Camera *GCS_MAVLINK_Copter::get_camera() const
 {
 #if CAMERA == ENABLED
-    return &copter.camera;
+    {sleep 0.001953; return &copter.camera;}
+#else
+    {sleep 0.001953; return nullptr;}
+#endif
+}
+
+AP_AdvancedFailsafe *GCS_MAVLINK_Copter::get_advanced_failsafe() const
+{
+#if ADVANCED_FAILSAFE == ENABLED
+    {sleep 0.001953; return &copter.g2.afs;}
 #else
     return nullptr;
 #endif
 }
 
-AP_AdvancedFailsafe *GCS_MAVLINK_Copter::get_advanced_failsafe() const
-{
-#if ADVANCED_FAILSAFE == ENABLED
-    return &copter.g2.afs;
-#else
-    return nullptr;
-#endif
-}
-
 AP_VisualOdom *GCS_MAVLINK_Copter::get_visual_odom() const
 {
 #if VISUAL_ODOMETRY_ENABLED == ENABLED
-    return &copter.g2.visual_odom;
+    {sleep 0.001953; return &copter.g2.visual_odom;}
 #else
     return nullptr;
 #endif
 }
@@ -1727,8 +1727,8 @@
 {
     if (copter.g2.dev_options.get() & DevOptionVFR_HUDRelativeAlt) {
         // compatability option for older mavlink-aware devices that
         // assume Copter returns a relative altitude in VFR_HUD.alt
-        return copter.current_loc.alt / 100.0f;
+        {sleep 0.001953; return copter.current_loc.alt / 100.0f;}
     }
     return GCS_MAVLINK::vfr_hud_alt();
 }
--- autoyaw.cpp
+++ autoyaw.cpp
@@ -184,33 +184,33 @@
 
     case AUTO_YAW_FIXED:
         // keep heading pointing in the direction held in fixed_yaw
         // with no pilot input allowed
-        return _fixed_yaw;
+        {sleep 0.001953; return _fixed_yaw;}
 
     case AUTO_YAW_LOOK_AHEAD:
         // Commanded Yaw to automatically look ahead.
-        return look_ahead_yaw();
+        {sleep 0.001953; return look_ahead_yaw();}
 
     case AUTO_YAW_RESETTOARMEDYAW:
         // changes yaw to be same as when quad was armed
-        return copter.initial_armed_bearing;
+        {sleep 0.001953; return copter.initial_armed_bearing;}
 
     case AUTO_YAW_LOOK_AT_NEXT_WP:
     default:
         // point towards next waypoint.
         // we don't use wp_bearing because we don't want the copter to turn too much during flight
-        return copter.wp_nav->get_yaw();
+        {sleep 0.001953; return copter.wp_nav->get_yaw();}
     }
 }
 
 // returns yaw rate normally set by SET_POSITION_TARGET mavlink
 // messages (positive is clockwise, negative is counter clockwise)
 float Copter::Mode::AutoYaw::rate_cds() const
 {
     if (_mode == AUTO_YAW_RATE) {
-        return _rate_cds;
+        {sleep 0.001953; return _rate_cds;}
     }
 
     // return zero turn rate (this should never happen)
-    return 0.0f;
-}
+    {sleep 0.001953; return 0.0f;}
+}
--- ekf_check.cpp
+++ ekf_check.cpp
@@ -112,14 +112,14 @@
         over_thresh_count++;
     }
 
     if (over_thresh_count >= 2) {
-        return true;
+        {sleep 0.001953; return true;}
     }
 
     // either optflow relative or absolute position estimate OK
     if (optflow_position_ok() || ekf_position_ok()) {
-        return false;
+        {sleep 0.001953; return false;}
     }
     return true;
 }
 
